<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="518" onload="init(evt)" viewBox="0 0 1200 518" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="501"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="501"> </text>
<g id="frames">
<g>
<title>all (500,493 samples, 100.00%)</title><rect x="10.0" y="467.0" width="1180.0" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="13.0" y="478.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (343,011 samples, 68.53%)</title><rect x="10.0" y="451.0" width="808.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (343,011 samples, 68.53%)</title><rect x="10.0" y="435.0" width="808.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (343,011 samples, 68.53%)</title><rect x="10.0" y="419.0" width="808.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="13.0" y="430.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (154,596 samples, 30.89%)</title><rect x="10.0" y="403.0" width="364.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="414.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (154,051 samples, 30.78%)</title><rect x="10.0" y="387.0" width="363.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="398.0">java/util/concurrent/Executors$RunnableAdapter.call</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (154,051 samples, 30.78%)</title><rect x="10.0" y="371.0" width="363.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="13.0" y="382.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.call (154,051 samples, 30.78%)</title><rect x="10.0" y="355.0" width="363.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="366.0">ru/mail/polis/service/boriskin/ReplicaWorker$$Lam..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.lambda$getResponses$0 (154,051 samples, 30.78%)</title><rect x="10.0" y="339.0" width="363.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="350.0">ru/mail/polis/service/boriskin/ReplicaWorker.lamb..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.proxy (154,051 samples, 30.78%)</title><rect x="10.0" y="323.0" width="363.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="13.0" y="334.0">ru/mail/polis/service/boriskin/ReplicaWorker.proxy</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (154,051 samples, 30.78%)</title><rect x="10.0" y="307.0" width="363.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="318.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (154,051 samples, 30.78%)</title><rect x="10.0" y="291.0" width="363.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="13.0" y="302.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (686 samples, 0.14%)</title><rect x="10.0" y="275.0" width="1.6" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (142,441 samples, 28.46%)</title><rect x="11.6" y="275.0" width="335.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="14.6" y="286.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (15,368 samples, 3.07%)</title><rect x="11.6" y="259.0" width="36.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="14.6" y="270.0">byt..</text>
</g>
<g>
<title>byte[] (127,073 samples, 25.39%)</title><rect x="47.9" y="259.0" width="299.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="50.9" y="270.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (7,025 samples, 1.40%)</title><rect x="347.4" y="275.0" width="16.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="350.4" y="286.0"></text>
</g>
<g>
<title>byte[] (272 samples, 0.05%)</title><rect x="347.4" y="259.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="350.4" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (403 samples, 0.08%)</title><rect x="348.1" y="259.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (403 samples, 0.08%)</title><rect x="348.1" y="243.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="351.1" y="254.0"></text>
</g>
<g>
<title>java.lang.String (211 samples, 0.04%)</title><rect x="348.1" y="227.0" width="0.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="351.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (192 samples, 0.04%)</title><rect x="348.6" y="227.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="351.6" y="238.0"></text>
</g>
<g>
<title>byte[] (192 samples, 0.04%)</title><rect x="348.6" y="211.0" width="0.4" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="351.6" y="222.0"></text>
</g>
<g>
<title>one.nio.http.Response (183 samples, 0.04%)</title><rect x="349.0" y="259.0" width="0.5" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="352.0" y="270.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (5,536 samples, 1.11%)</title><rect x="349.5" y="259.0" width="13.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="352.5" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,536 samples, 1.11%)</title><rect x="349.5" y="243.0" width="13.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="352.5" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,536 samples, 1.11%)</title><rect x="349.5" y="227.0" width="13.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="352.5" y="238.0"></text>
</g>
<g>
<title>char[] (3,310 samples, 0.66%)</title><rect x="349.5" y="211.0" width="7.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="352.5" y="222.0"></text>
</g>
<g>
<title>java.lang.String (926 samples, 0.19%)</title><rect x="357.3" y="211.0" width="2.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="360.3" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,300 samples, 0.26%)</title><rect x="359.5" y="211.0" width="3.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="362.5" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,300 samples, 0.26%)</title><rect x="359.5" y="195.0" width="3.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="362.5" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,300 samples, 0.26%)</title><rect x="359.5" y="179.0" width="3.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="362.5" y="190.0"></text>
</g>
<g>
<title>byte[] (1,300 samples, 0.26%)</title><rect x="359.5" y="163.0" width="3.0" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="362.5" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (248 samples, 0.05%)</title><rect x="362.5" y="259.0" width="0.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="365.5" y="270.0"></text>
</g>
<g>
<title>java.lang.String[] (248 samples, 0.05%)</title><rect x="362.5" y="243.0" width="0.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="365.5" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (383 samples, 0.08%)</title><rect x="363.1" y="259.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="366.1" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (383 samples, 0.08%)</title><rect x="363.1" y="243.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="366.1" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (383 samples, 0.08%)</title><rect x="363.1" y="227.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="366.1" y="238.0"></text>
</g>
<g>
<title>java.lang.String (192 samples, 0.04%)</title><rect x="363.1" y="211.0" width="0.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="366.1" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (191 samples, 0.04%)</title><rect x="363.6" y="211.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="366.6" y="222.0"></text>
</g>
<g>
<title>byte[] (191 samples, 0.04%)</title><rect x="363.6" y="195.0" width="0.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="366.6" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (2,578 samples, 0.52%)</title><rect x="364.0" y="275.0" width="6.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="367.0" y="286.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (2,555 samples, 0.51%)</title><rect x="364.0" y="259.0" width="6.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="367.0" y="270.0"></text>
</g>
<g>
<title>byte[] (2,555 samples, 0.51%)</title><rect x="364.0" y="243.0" width="6.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="367.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (783 samples, 0.16%)</title><rect x="370.1" y="275.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="373.1" y="286.0"></text>
</g>
<g>
<title>java/lang/String.substring (783 samples, 0.16%)</title><rect x="370.1" y="259.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="373.1" y="270.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (783 samples, 0.16%)</title><rect x="370.1" y="243.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="373.1" y="254.0"></text>
</g>
<g>
<title>java.lang.String (280 samples, 0.06%)</title><rect x="370.1" y="227.0" width="0.6" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="373.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (503 samples, 0.10%)</title><rect x="370.7" y="227.0" width="1.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="373.7" y="238.0"></text>
</g>
<g>
<title>byte[] (503 samples, 0.10%)</title><rect x="370.7" y="211.0" width="1.2" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="373.7" y="222.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (538 samples, 0.11%)</title><rect x="371.9" y="275.0" width="1.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="374.9" y="286.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (538 samples, 0.11%)</title><rect x="371.9" y="259.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="374.9" y="270.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (538 samples, 0.11%)</title><rect x="371.9" y="243.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="374.9" y="254.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (538 samples, 0.11%)</title><rect x="371.9" y="227.0" width="1.3" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="374.9" y="238.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (545 samples, 0.11%)</title><rect x="373.2" y="387.0" width="1.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="376.2" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (545 samples, 0.11%)</title><rect x="373.2" y="371.0" width="1.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="376.2" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.done (545 samples, 0.11%)</title><rect x="373.2" y="355.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="376.2" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (545 samples, 0.11%)</title><rect x="373.2" y="339.0" width="1.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="376.2" y="350.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (545 samples, 0.11%)</title><rect x="373.2" y="323.0" width="1.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="376.2" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (542 samples, 0.11%)</title><rect x="373.2" y="307.0" width="1.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="376.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,369 samples, 0.27%)</title><rect x="374.5" y="403.0" width="3.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="377.5" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,369 samples, 0.27%)</title><rect x="374.5" y="387.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="377.5" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,361 samples, 0.27%)</title><rect x="374.5" y="371.0" width="3.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="377.5" y="382.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,361 samples, 0.27%)</title><rect x="374.5" y="355.0" width="3.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="377.5" y="366.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,361 samples, 0.27%)</title><rect x="374.5" y="339.0" width="3.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="377.5" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.run (187,046 samples, 37.37%)</title><rect x="377.7" y="403.0" width="441.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="380.7" y="414.0">ru/mail/polis/service/boriskin/NewService$$Lambda$64/3138249..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$0 (187,046 samples, 37.37%)</title><rect x="377.7" y="387.0" width="441.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="380.7" y="398.0">ru/mail/polis/service/boriskin/NewService.lambda$runExecutor..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (187,046 samples, 37.37%)</title><rect x="377.7" y="371.0" width="441.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="380.7" y="382.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,390 samples, 0.28%)</title><rect x="377.7" y="355.0" width="3.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="380.7" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,390 samples, 0.28%)</title><rect x="377.7" y="339.0" width="3.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="380.7" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,390 samples, 0.28%)</title><rect x="377.7" y="323.0" width="3.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="380.7" y="334.0"></text>
</g>
<g>
<title>java.lang.String (1,275 samples, 0.25%)</title><rect x="377.7" y="307.0" width="3.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="380.7" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (115 samples, 0.02%)</title><rect x="380.7" y="307.0" width="0.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="383.7" y="318.0"></text>
</g>
<g>
<title>byte[] (115 samples, 0.02%)</title><rect x="380.7" y="291.0" width="0.3" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="383.7" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.MetaInfoRequest (338 samples, 0.07%)</title><rect x="381.0" y="355.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="384.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/MetaInfoRequest.&lt;init&gt; (1,487 samples, 0.30%)</title><rect x="381.8" y="355.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="384.8" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (458 samples, 0.09%)</title><rect x="381.8" y="339.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="384.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (458 samples, 0.09%)</title><rect x="381.8" y="323.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="384.8" y="334.0"></text>
</g>
<g>
<title>java.lang.String (226 samples, 0.05%)</title><rect x="381.8" y="307.0" width="0.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="384.8" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (232 samples, 0.05%)</title><rect x="382.3" y="307.0" width="0.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="385.3" y="318.0"></text>
</g>
<g>
<title>byte[] (232 samples, 0.05%)</title><rect x="382.3" y="291.0" width="0.6" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="385.3" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (616 samples, 0.12%)</title><rect x="382.9" y="339.0" width="1.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="385.9" y="350.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (468 samples, 0.09%)</title><rect x="382.9" y="323.0" width="1.1" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="385.9" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (148 samples, 0.03%)</title><rect x="384.0" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="387.0" y="334.0"></text>
</g>
<g>
<title>byte[] (148 samples, 0.03%)</title><rect x="384.0" y="307.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="387.0" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (413 samples, 0.08%)</title><rect x="384.3" y="339.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.3" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (413 samples, 0.08%)</title><rect x="384.3" y="323.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="387.3" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (413 samples, 0.08%)</title><rect x="384.3" y="307.0" width="1.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="387.3" y="318.0"></text>
</g>
<g>
<title>java.lang.String (208 samples, 0.04%)</title><rect x="384.3" y="291.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="387.3" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (205 samples, 0.04%)</title><rect x="384.8" y="291.0" width="0.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="387.8" y="302.0"></text>
</g>
<g>
<title>byte[] (205 samples, 0.04%)</title><rect x="384.8" y="275.0" width="0.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="387.8" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (1,430 samples, 0.29%)</title><rect x="385.3" y="355.0" width="3.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="388.3" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,430 samples, 0.29%)</title><rect x="385.3" y="339.0" width="3.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="388.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,430 samples, 0.29%)</title><rect x="385.3" y="323.0" width="3.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="388.3" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1,049 samples, 0.21%)</title><rect x="385.3" y="307.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="388.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,049 samples, 0.21%)</title><rect x="385.3" y="291.0" width="2.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="388.3" y="302.0"></text>
</g>
<g>
<title>byte[] (1,049 samples, 0.21%)</title><rect x="385.3" y="275.0" width="2.5" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="388.3" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (381 samples, 0.08%)</title><rect x="387.8" y="307.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="390.8" y="318.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (381 samples, 0.08%)</title><rect x="387.8" y="291.0" width="0.9" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="390.8" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.getting (182,401 samples, 36.44%)</title><rect x="388.7" y="355.0" width="430.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="391.7" y="366.0">ru/mail/polis/service/boriskin/ReplicaWorker.getting</text>
</g>
<g>
<title>java/lang/String.getBytes (298 samples, 0.06%)</title><rect x="388.8" y="339.0" width="0.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="391.8" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (298 samples, 0.06%)</title><rect x="388.8" y="323.0" width="0.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="391.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (298 samples, 0.06%)</title><rect x="388.8" y="307.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="391.8" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (298 samples, 0.06%)</title><rect x="388.8" y="291.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="391.8" y="302.0"></text>
</g>
<g>
<title>byte[] (298 samples, 0.06%)</title><rect x="388.8" y="275.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="391.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (567 samples, 0.11%)</title><rect x="389.5" y="339.0" width="1.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="392.5" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (567 samples, 0.11%)</title><rect x="389.5" y="323.0" width="1.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="392.5" y="334.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (567 samples, 0.11%)</title><rect x="389.5" y="307.0" width="1.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="392.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (173 samples, 0.03%)</title><rect x="390.9" y="339.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="393.9" y="350.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (173 samples, 0.03%)</title><rect x="390.9" y="323.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="393.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (173 samples, 0.03%)</title><rect x="390.9" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="393.9" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (173 samples, 0.03%)</title><rect x="390.9" y="291.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.9" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (173 samples, 0.03%)</title><rect x="390.9" y="275.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="393.9" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (173 samples, 0.03%)</title><rect x="390.9" y="259.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="393.9" y="270.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (376 samples, 0.08%)</title><rect x="391.3" y="339.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="394.3" y="350.0"></text>
</g>
<g>
<title>java.util.ArrayList$Itr (376 samples, 0.08%)</title><rect x="391.3" y="323.0" width="0.9" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="394.3" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.getTableCell (173,546 samples, 34.68%)</title><rect x="392.2" y="339.0" width="409.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="395.2" y="350.0">ru/mail/polis/dao/boriskin/NewDAO.getTableCell</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (7,070 samples, 1.41%)</title><rect x="392.2" y="323.0" width="16.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.2" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (7,070 samples, 1.41%)</title><rect x="392.2" y="307.0" width="16.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="395.2" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (7,070 samples, 1.41%)</title><rect x="392.2" y="291.0" width="16.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (7,070 samples, 1.41%)</title><rect x="392.2" y="275.0" width="16.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="395.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6,211 samples, 1.24%)</title><rect x="392.2" y="259.0" width="14.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="395.2" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (874 samples, 0.17%)</title><rect x="392.2" y="243.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (874 samples, 0.17%)</title><rect x="392.2" y="227.0" width="2.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="395.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (874 samples, 0.17%)</title><rect x="392.2" y="211.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="395.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (874 samples, 0.17%)</title><rect x="392.2" y="195.0" width="2.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (874 samples, 0.17%)</title><rect x="392.2" y="179.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="395.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (874 samples, 0.17%)</title><rect x="392.2" y="163.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (874 samples, 0.17%)</title><rect x="392.2" y="147.0" width="2.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="395.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (874 samples, 0.17%)</title><rect x="392.2" y="131.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="395.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (874 samples, 0.17%)</title><rect x="392.2" y="115.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="395.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (874 samples, 0.17%)</title><rect x="392.2" y="99.0" width="2.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="395.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (874 samples, 0.17%)</title><rect x="392.2" y="83.0" width="2.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="395.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (874 samples, 0.17%)</title><rect x="392.2" y="67.0" width="2.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="395.2" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5,337 samples, 1.07%)</title><rect x="394.2" y="243.0" width="12.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="397.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5,337 samples, 1.07%)</title><rect x="394.2" y="227.0" width="12.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="397.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5,337 samples, 1.07%)</title><rect x="394.2" y="211.0" width="12.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="397.2" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5,337 samples, 1.07%)</title><rect x="394.2" y="195.0" width="12.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="397.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,337 samples, 1.07%)</title><rect x="394.2" y="179.0" width="12.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="397.2" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,337 samples, 1.07%)</title><rect x="394.2" y="163.0" width="12.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="397.2" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,390 samples, 0.88%)</title><rect x="394.2" y="147.0" width="10.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4,390 samples, 0.88%)</title><rect x="394.2" y="131.0" width="10.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="397.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4,390 samples, 0.88%)</title><rect x="394.2" y="115.0" width="10.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="397.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (4,390 samples, 0.88%)</title><rect x="394.2" y="99.0" width="10.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="397.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,701 samples, 0.54%)</title><rect x="394.2" y="83.0" width="6.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="397.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,783 samples, 0.36%)</title><rect x="394.2" y="67.0" width="4.2" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="397.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (918 samples, 0.18%)</title><rect x="398.4" y="67.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="401.4" y="78.0"></text>
</g>
<g>
<title>byte[] (918 samples, 0.18%)</title><rect x="398.4" y="51.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="401.4" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (193 samples, 0.04%)</title><rect x="400.6" y="83.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="403.6" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (215 samples, 0.04%)</title><rect x="401.0" y="83.0" width="0.6" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="404.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (1,281 samples, 0.26%)</title><rect x="401.6" y="83.0" width="3.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="404.6" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,281 samples, 0.26%)</title><rect x="401.6" y="67.0" width="3.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="404.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (833 samples, 0.17%)</title><rect x="401.6" y="51.0" width="1.9" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="404.6" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (448 samples, 0.09%)</title><rect x="403.5" y="51.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="406.5" y="62.0"></text>
</g>
<g>
<title>byte[] (448 samples, 0.09%)</title><rect x="403.5" y="35.0" width="1.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="406.5" y="46.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (947 samples, 0.19%)</title><rect x="404.6" y="147.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="407.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (947 samples, 0.19%)</title><rect x="404.6" y="131.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="407.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (947 samples, 0.19%)</title><rect x="404.6" y="115.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="407.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (947 samples, 0.19%)</title><rect x="404.6" y="99.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="407.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (947 samples, 0.19%)</title><rect x="404.6" y="83.0" width="2.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="407.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (947 samples, 0.19%)</title><rect x="404.6" y="67.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="407.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (947 samples, 0.19%)</title><rect x="404.6" y="51.0" width="2.2" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="407.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$80/2121773093.apply (859 samples, 0.17%)</title><rect x="406.8" y="259.0" width="2.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="409.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (859 samples, 0.17%)</title><rect x="406.8" y="243.0" width="2.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="409.8" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (859 samples, 0.17%)</title><rect x="406.8" y="227.0" width="2.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="409.8" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (859 samples, 0.17%)</title><rect x="406.8" y="211.0" width="2.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="409.8" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells (166,025 samples, 33.17%)</title><rect x="408.8" y="323.0" width="391.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="411.8" y="334.0">ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTable..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (290 samples, 0.06%)</title><rect x="408.8" y="307.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="411.8" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (290 samples, 0.06%)</title><rect x="408.8" y="291.0" width="0.7" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="411.8" y="302.0"></text>
</g>
<g>
<title>java.util.ArrayList (223 samples, 0.04%)</title><rect x="409.5" y="307.0" width="0.5" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="412.5" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (445 samples, 0.09%)</title><rect x="410.0" y="307.0" width="1.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="413.0" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (445 samples, 0.09%)</title><rect x="410.0" y="291.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="413.0" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (557 samples, 0.11%)</title><rect x="411.1" y="307.0" width="1.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.1" y="318.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection$1 (187 samples, 0.04%)</title><rect x="411.1" y="291.0" width="0.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="414.1" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (370 samples, 0.07%)</title><rect x="411.5" y="291.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="414.5" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (370 samples, 0.07%)</title><rect x="411.5" y="275.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="414.5" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (370 samples, 0.07%)</title><rect x="411.5" y="259.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="414.5" y="270.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (370 samples, 0.07%)</title><rect x="411.5" y="243.0" width="0.9" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="414.5" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.iterator (1,060 samples, 0.21%)</title><rect x="412.4" y="307.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="415.4" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (219 samples, 0.04%)</title><rect x="412.4" y="291.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="415.4" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (219 samples, 0.04%)</title><rect x="412.4" y="275.0" width="0.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="415.4" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (285 samples, 0.06%)</title><rect x="412.9" y="291.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="415.9" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (285 samples, 0.06%)</title><rect x="412.9" y="275.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="415.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (135 samples, 0.03%)</title><rect x="413.6" y="291.0" width="0.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="416.6" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (135 samples, 0.03%)</title><rect x="413.6" y="275.0" width="0.3" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="416.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (421 samples, 0.08%)</title><rect x="413.9" y="291.0" width="1.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="416.9" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (421 samples, 0.08%)</title><rect x="413.9" y="275.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="416.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (421 samples, 0.08%)</title><rect x="413.9" y="259.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="416.9" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (421 samples, 0.08%)</title><rect x="413.9" y="243.0" width="1.0" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="416.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.returnIteratorOverMergedCollapsedFiltered (163,450 samples, 32.66%)</title><rect x="414.9" y="307.0" width="385.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="417.9" y="318.0">ru/mail/polis/dao/boriskin/NewDAO.returnIteratorOverM..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (21,587 samples, 4.31%)</title><rect x="414.9" y="291.0" width="50.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="417.9" y="302.0">com/g..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (149 samples, 0.03%)</title><rect x="414.9" y="275.0" width="0.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="417.9" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (21,438 samples, 4.28%)</title><rect x="415.3" y="275.0" width="50.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="418.3" y="286.0">com/g..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (229 samples, 0.05%)</title><rect x="415.3" y="259.0" width="0.5" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="418.3" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (894 samples, 0.18%)</title><rect x="415.8" y="259.0" width="2.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="418.8" y="270.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (894 samples, 0.18%)</title><rect x="415.8" y="243.0" width="2.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="418.8" y="254.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (289 samples, 0.06%)</title><rect x="417.9" y="259.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="420.9" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (227 samples, 0.05%)</title><rect x="418.6" y="259.0" width="0.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="421.6" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (227 samples, 0.05%)</title><rect x="418.6" y="243.0" width="0.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="421.6" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (19,799 samples, 3.96%)</title><rect x="419.1" y="259.0" width="46.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.1" y="270.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (19,799 samples, 3.96%)</title><rect x="419.1" y="243.0" width="46.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="422.1" y="254.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (348 samples, 0.07%)</title><rect x="419.1" y="227.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="422.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (348 samples, 0.07%)</title><rect x="419.1" y="211.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="422.1" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (348 samples, 0.07%)</title><rect x="419.1" y="195.0" width="0.8" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="422.1" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (19,451 samples, 3.89%)</title><rect x="419.9" y="227.0" width="45.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="422.9" y="238.0">java..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (19,451 samples, 3.89%)</title><rect x="419.9" y="211.0" width="45.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="422.9" y="222.0">java..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19,451 samples, 3.89%)</title><rect x="419.9" y="195.0" width="45.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="422.9" y="206.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (19,451 samples, 3.89%)</title><rect x="419.9" y="179.0" width="45.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="422.9" y="190.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (17,729 samples, 3.54%)</title><rect x="419.9" y="163.0" width="41.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.9" y="174.0">com..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (17,729 samples, 3.54%)</title><rect x="419.9" y="147.0" width="41.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="422.9" y="158.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (17,729 samples, 3.54%)</title><rect x="419.9" y="131.0" width="41.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="422.9" y="142.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (17,729 samples, 3.54%)</title><rect x="419.9" y="115.0" width="41.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="422.9" y="126.0">ru/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (10,799 samples, 2.16%)</title><rect x="419.9" y="99.0" width="25.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="422.9" y="110.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,108 samples, 1.42%)</title><rect x="419.9" y="83.0" width="16.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="422.9" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (3,691 samples, 0.74%)</title><rect x="436.7" y="83.0" width="8.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="439.7" y="94.0"></text>
</g>
<g>
<title>byte[] (3,691 samples, 0.74%)</title><rect x="436.7" y="67.0" width="8.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="439.7" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (912 samples, 0.18%)</title><rect x="445.4" y="99.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="448.4" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (857 samples, 0.17%)</title><rect x="447.5" y="99.0" width="2.1" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="450.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (5,161 samples, 1.03%)</title><rect x="449.6" y="99.0" width="12.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="452.6" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (5,161 samples, 1.03%)</title><rect x="449.6" y="83.0" width="12.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="452.6" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,442 samples, 0.69%)</title><rect x="449.6" y="67.0" width="8.1" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="452.6" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,719 samples, 0.34%)</title><rect x="457.7" y="67.0" width="4.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="460.7" y="78.0"></text>
</g>
<g>
<title>byte[] (1,719 samples, 0.34%)</title><rect x="457.7" y="51.0" width="4.0" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="460.7" y="62.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1,722 samples, 0.34%)</title><rect x="461.7" y="163.0" width="4.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="464.7" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (1,722 samples, 0.34%)</title><rect x="461.7" y="147.0" width="4.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="464.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (1,722 samples, 0.34%)</title><rect x="461.7" y="131.0" width="4.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="464.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (1,722 samples, 0.34%)</title><rect x="461.7" y="115.0" width="4.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="464.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1,722 samples, 0.34%)</title><rect x="461.7" y="99.0" width="4.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="464.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1,722 samples, 0.34%)</title><rect x="461.7" y="83.0" width="4.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="464.7" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (1,722 samples, 0.34%)</title><rect x="461.7" y="67.0" width="4.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="464.7" y="78.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (809 samples, 0.16%)</title><rect x="465.8" y="291.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="468.8" y="302.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection$1 (202 samples, 0.04%)</title><rect x="465.8" y="275.0" width="0.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="468.8" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (607 samples, 0.12%)</title><rect x="466.3" y="275.0" width="1.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="469.3" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (607 samples, 0.12%)</title><rect x="466.3" y="259.0" width="1.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="469.3" y="270.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (243 samples, 0.05%)</title><rect x="466.3" y="243.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="469.3" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (364 samples, 0.07%)</title><rect x="466.8" y="243.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="469.8" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (364 samples, 0.07%)</title><rect x="466.8" y="227.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="469.8" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (364 samples, 0.07%)</title><rect x="466.8" y="211.0" width="0.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="469.8" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (159 samples, 0.03%)</title><rect x="467.7" y="291.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="470.7" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableCollection (159 samples, 0.03%)</title><rect x="467.7" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="470.7" y="286.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection (159 samples, 0.03%)</title><rect x="467.7" y="259.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="470.7" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (6,593 samples, 1.32%)</title><rect x="468.1" y="291.0" width="15.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.1" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (214 samples, 0.04%)</title><rect x="468.1" y="275.0" width="0.5" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="471.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (6,379 samples, 1.27%)</title><rect x="468.6" y="275.0" width="15.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="471.6" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (6,379 samples, 1.27%)</title><rect x="468.6" y="259.0" width="15.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="471.6" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (956 samples, 0.19%)</title><rect x="468.6" y="243.0" width="2.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="471.6" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (956 samples, 0.19%)</title><rect x="468.6" y="227.0" width="2.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="471.6" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (956 samples, 0.19%)</title><rect x="468.6" y="211.0" width="2.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="471.6" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (956 samples, 0.19%)</title><rect x="468.6" y="195.0" width="2.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="471.6" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (956 samples, 0.19%)</title><rect x="468.6" y="179.0" width="2.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="471.6" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (956 samples, 0.19%)</title><rect x="468.6" y="163.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="471.6" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (956 samples, 0.19%)</title><rect x="468.6" y="147.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="471.6" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (956 samples, 0.19%)</title><rect x="468.6" y="131.0" width="2.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="471.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (956 samples, 0.19%)</title><rect x="468.6" y="115.0" width="2.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="471.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (956 samples, 0.19%)</title><rect x="468.6" y="99.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="471.6" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (956 samples, 0.19%)</title><rect x="468.6" y="83.0" width="2.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="471.6" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (956 samples, 0.19%)</title><rect x="468.6" y="67.0" width="2.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="471.6" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (5,423 samples, 1.08%)</title><rect x="470.8" y="243.0" width="12.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="473.8" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (5,423 samples, 1.08%)</title><rect x="470.8" y="227.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.8" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (5,423 samples, 1.08%)</title><rect x="470.8" y="211.0" width="12.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="473.8" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (5,423 samples, 1.08%)</title><rect x="470.8" y="195.0" width="12.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="473.8" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,423 samples, 1.08%)</title><rect x="470.8" y="179.0" width="12.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="473.8" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (5,423 samples, 1.08%)</title><rect x="470.8" y="163.0" width="12.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="473.8" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (4,565 samples, 0.91%)</title><rect x="470.8" y="147.0" width="10.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="473.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4,565 samples, 0.91%)</title><rect x="470.8" y="131.0" width="10.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="473.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4,565 samples, 0.91%)</title><rect x="470.8" y="115.0" width="10.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="473.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (4,565 samples, 0.91%)</title><rect x="470.8" y="99.0" width="10.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="473.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,773 samples, 0.55%)</title><rect x="470.8" y="83.0" width="6.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="473.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,808 samples, 0.36%)</title><rect x="470.8" y="67.0" width="4.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="473.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (965 samples, 0.19%)</title><rect x="475.1" y="67.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.1" y="78.0"></text>
</g>
<g>
<title>byte[] (965 samples, 0.19%)</title><rect x="475.1" y="51.0" width="2.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="478.1" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (222 samples, 0.04%)</title><rect x="477.4" y="83.0" width="0.5" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="480.4" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (218 samples, 0.04%)</title><rect x="477.9" y="83.0" width="0.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="480.9" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (1,352 samples, 0.27%)</title><rect x="478.4" y="83.0" width="3.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="481.4" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,352 samples, 0.27%)</title><rect x="478.4" y="67.0" width="3.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="481.4" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (875 samples, 0.17%)</title><rect x="478.4" y="51.0" width="2.1" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="481.4" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (477 samples, 0.10%)</title><rect x="480.5" y="51.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="483.5" y="62.0"></text>
</g>
<g>
<title>byte[] (477 samples, 0.10%)</title><rect x="480.5" y="35.0" width="1.1" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="483.5" y="46.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (858 samples, 0.17%)</title><rect x="481.6" y="147.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="484.6" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (858 samples, 0.17%)</title><rect x="481.6" y="131.0" width="2.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="484.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (858 samples, 0.17%)</title><rect x="481.6" y="115.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="484.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (858 samples, 0.17%)</title><rect x="481.6" y="99.0" width="2.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="484.6" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (858 samples, 0.17%)</title><rect x="481.6" y="83.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="484.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (858 samples, 0.17%)</title><rect x="481.6" y="67.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="484.6" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (858 samples, 0.17%)</title><rect x="481.6" y="51.0" width="2.0" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="484.6" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.iterator (134,302 samples, 26.83%)</title><rect x="483.6" y="291.0" width="316.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="486.6" y="302.0">ru/mail/polis/dao/boriskin/SortedStringTabl..</text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.SortedStringTable$1 (1,347 samples, 0.27%)</title><rect x="483.6" y="275.0" width="3.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="486.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt; (132,955 samples, 26.56%)</title><rect x="486.8" y="275.0" width="313.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="489.8" y="286.0">ru/mail/polis/dao/boriskin/SortedStringTab..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findNext (132,955 samples, 26.56%)</title><rect x="486.8" y="259.0" width="313.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="489.8" y="270.0">ru/mail/polis/dao/boriskin/SortedStringTab..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findK (132,955 samples, 26.56%)</title><rect x="486.8" y="243.0" width="313.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="489.8" y="254.0">ru/mail/polis/dao/boriskin/SortedStringTab..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (88,747 samples, 17.73%)</title><rect x="486.8" y="227.0" width="209.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="489.8" y="238.0">java/nio/ByteBuffer.allocate</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (59,828 samples, 11.95%)</title><rect x="486.8" y="211.0" width="141.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="489.8" y="222.0">java.nio.HeapByteB..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (28,919 samples, 5.78%)</title><rect x="627.9" y="211.0" width="68.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="630.9" y="222.0">java/ni..</text>
</g>
<g>
<title>byte[] (28,919 samples, 5.78%)</title><rect x="627.9" y="195.0" width="68.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="630.9" y="206.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (44,208 samples, 8.83%)</title><rect x="696.0" y="227.0" width="104.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="699.0" y="238.0">ru/mail/poli..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (44,208 samples, 8.83%)</title><rect x="696.0" y="211.0" width="104.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="699.0" y="222.0">java/nio/Byt..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (29,883 samples, 5.97%)</title><rect x="696.0" y="195.0" width="70.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="699.0" y="206.0">java.nio..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (14,325 samples, 2.86%)</title><rect x="766.5" y="195.0" width="33.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="769.5" y="206.0">ja..</text>
</g>
<g>
<title>byte[] (14,325 samples, 2.86%)</title><rect x="766.5" y="179.0" width="33.8" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="769.5" y="190.0">by..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (451 samples, 0.09%)</title><rect x="800.3" y="323.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="803.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (451 samples, 0.09%)</title><rect x="800.3" y="307.0" width="1.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="803.3" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (451 samples, 0.09%)</title><rect x="800.3" y="291.0" width="1.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="803.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.replicas (1,320 samples, 0.26%)</title><rect x="801.3" y="339.0" width="3.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="804.3" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (304 samples, 0.06%)</title><rect x="801.5" y="323.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="804.5" y="334.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (242 samples, 0.05%)</title><rect x="801.6" y="307.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.6" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (128 samples, 0.03%)</title><rect x="801.6" y="291.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="804.6" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (128 samples, 0.03%)</title><rect x="801.6" y="275.0" width="0.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="804.6" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (114 samples, 0.02%)</title><rect x="801.9" y="291.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="804.9" y="302.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (114 samples, 0.02%)</title><rect x="801.9" y="275.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="804.9" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (141 samples, 0.03%)</title><rect x="802.3" y="323.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.3" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (141 samples, 0.03%)</title><rect x="802.3" y="307.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="805.3" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (141 samples, 0.03%)</title><rect x="802.3" y="291.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="805.3" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (141 samples, 0.03%)</title><rect x="802.3" y="275.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.3" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (141 samples, 0.03%)</title><rect x="802.3" y="259.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.3" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (141 samples, 0.03%)</title><rect x="802.3" y="243.0" width="0.4" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="805.3" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (165 samples, 0.03%)</title><rect x="802.7" y="323.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="805.7" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (165 samples, 0.03%)</title><rect x="802.7" y="307.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="805.7" y="318.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (165 samples, 0.03%)</title><rect x="802.7" y="291.0" width="0.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="805.7" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.getFirstOne (588 samples, 0.12%)</title><rect x="803.1" y="323.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="806.1" y="334.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (458 samples, 0.09%)</title><rect x="803.1" y="307.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="806.1" y="318.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (369 samples, 0.07%)</title><rect x="803.1" y="291.0" width="0.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="806.1" y="302.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (369 samples, 0.07%)</title><rect x="803.1" y="275.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="806.1" y="286.0"></text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (141 samples, 0.03%)</title><rect x="803.1" y="259.0" width="0.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="806.1" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (228 samples, 0.05%)</title><rect x="803.4" y="259.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="806.4" y="270.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (228 samples, 0.05%)</title><rect x="803.4" y="243.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="806.4" y="254.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (228 samples, 0.05%)</title><rect x="803.4" y="227.0" width="0.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="806.4" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (228 samples, 0.05%)</title><rect x="803.4" y="211.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="806.4" y="222.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (130 samples, 0.03%)</title><rect x="803.4" y="195.0" width="0.3" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="806.4" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.getResponses (1,730 samples, 0.35%)</title><rect x="804.4" y="339.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="807.4" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (143 samples, 0.03%)</title><rect x="804.6" y="323.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.6" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (143 samples, 0.03%)</title><rect x="804.6" y="307.0" width="0.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="807.6" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.get$Lambda (143 samples, 0.03%)</title><rect x="804.6" y="291.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="807.6" y="302.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.ReplicaWorker$$Lambda$72 (143 samples, 0.03%)</title><rect x="804.6" y="275.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="807.6" y="286.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (447 samples, 0.09%)</title><rect x="804.9" y="323.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="807.9" y="334.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (447 samples, 0.09%)</title><rect x="804.9" y="307.0" width="1.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="807.9" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (447 samples, 0.09%)</title><rect x="804.9" y="291.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="807.9" y="302.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (447 samples, 0.09%)</title><rect x="804.9" y="275.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="807.9" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (447 samples, 0.09%)</title><rect x="804.9" y="259.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.9" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (447 samples, 0.09%)</title><rect x="804.9" y="243.0" width="1.1" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="807.9" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.submit (695 samples, 0.14%)</title><rect x="806.0" y="323.0" width="1.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="809.0" y="334.0"></text>
</g>
<g>
<title>java.util.concurrent.ExecutorCompletionService$QueueingFuture (199 samples, 0.04%)</title><rect x="806.0" y="307.0" width="0.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="809.0" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.&lt;init&gt; (143 samples, 0.03%)</title><rect x="806.5" y="307.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="809.5" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (143 samples, 0.03%)</title><rect x="806.5" y="291.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="809.5" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (143 samples, 0.03%)</title><rect x="806.5" y="275.0" width="0.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="809.5" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (143 samples, 0.03%)</title><rect x="806.5" y="259.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="809.5" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.newTaskFor (188 samples, 0.04%)</title><rect x="806.8" y="307.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="809.8" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (188 samples, 0.04%)</title><rect x="806.8" y="291.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="809.8" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (188 samples, 0.04%)</title><rect x="806.8" y="275.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="809.8" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (165 samples, 0.03%)</title><rect x="807.2" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="810.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (165 samples, 0.03%)</title><rect x="807.2" y="291.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="810.2" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (165 samples, 0.03%)</title><rect x="807.2" y="275.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="810.2" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.take (381 samples, 0.08%)</title><rect x="807.6" y="323.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="810.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (381 samples, 0.08%)</title><rect x="807.6" y="307.0" width="0.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="810.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (379 samples, 0.08%)</title><rect x="807.6" y="291.0" width="0.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="810.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (379 samples, 0.08%)</title><rect x="807.6" y="275.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="810.6" y="286.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (379 samples, 0.08%)</title><rect x="807.6" y="259.0" width="0.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="810.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.from (1,597 samples, 0.32%)</title><rect x="808.5" y="339.0" width="3.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.5" y="350.0"></text>
</g>
<g>
<title>byte[] (288 samples, 0.06%)</title><rect x="808.5" y="323.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="811.5" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (346 samples, 0.07%)</title><rect x="809.2" y="323.0" width="0.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="812.2" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (346 samples, 0.07%)</title><rect x="809.2" y="307.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="812.2" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (346 samples, 0.07%)</title><rect x="809.2" y="291.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="812.2" y="302.0"></text>
</g>
<g>
<title>java.lang.String (131 samples, 0.03%)</title><rect x="809.2" y="275.0" width="0.3" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="812.2" y="286.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (215 samples, 0.04%)</title><rect x="809.5" y="275.0" width="0.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="812.5" y="286.0"></text>
</g>
<g>
<title>byte[] (215 samples, 0.04%)</title><rect x="809.5" y="259.0" width="0.5" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="812.5" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.isPresent (963 samples, 0.19%)</title><rect x="810.0" y="323.0" width="2.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="813.0" y="334.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.Value (475 samples, 0.09%)</title><rect x="810.0" y="307.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="813.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.&lt;init&gt; (488 samples, 0.10%)</title><rect x="811.1" y="307.0" width="1.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="814.1" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (488 samples, 0.10%)</title><rect x="811.1" y="291.0" width="1.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="814.1" y="302.0"></text>
</g>
<g>
<title>byte[] (488 samples, 0.10%)</title><rect x="811.1" y="275.0" width="1.2" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="814.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.merge (631 samples, 0.13%)</title><rect x="812.3" y="339.0" width="1.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.3" y="350.0"></text>
</g>
<g>
<title>java/util/Collection.stream (261 samples, 0.05%)</title><rect x="812.3" y="323.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="815.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/StreamSupport.stream (170 samples, 0.03%)</title><rect x="812.5" y="307.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="815.5" y="318.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$Head (170 samples, 0.03%)</title><rect x="812.5" y="291.0" width="0.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="815.5" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.filter (182 samples, 0.04%)</title><rect x="812.9" y="323.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="815.9" y="334.0"></text>
</g>
<g>
<title>java.util.stream.ReferencePipeline$2 (182 samples, 0.04%)</title><rect x="812.9" y="307.0" width="0.4" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="815.9" y="318.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.max (188 samples, 0.04%)</title><rect x="813.3" y="323.0" width="0.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="816.3" y="334.0"></text>
</g>
<g>
<title>java/util/stream/ReferencePipeline.reduce (151 samples, 0.03%)</title><rect x="813.4" y="307.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="816.4" y="318.0"></text>
</g>
<g>
<title>java/util/stream/AbstractPipeline.evaluate (151 samples, 0.03%)</title><rect x="813.4" y="291.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.4" y="302.0"></text>
</g>
<g>
<title>java/util/stream/ReduceOps$ReduceOp.evaluateSequential (151 samples, 0.03%)</title><rect x="813.4" y="275.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="816.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.transform (2,094 samples, 0.42%)</title><rect x="813.8" y="339.0" width="4.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="816.8" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1406947162.linkToTargetMethod (453 samples, 0.09%)</title><rect x="813.8" y="323.0" width="1.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="816.8" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/1824422708.invoke (453 samples, 0.09%)</title><rect x="813.8" y="307.0" width="1.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="816.8" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (453 samples, 0.09%)</title><rect x="813.8" y="291.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="816.8" y="302.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (166 samples, 0.03%)</title><rect x="813.8" y="275.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="816.8" y="286.0"></text>
</g>
<g>
<title>java.lang.String (166 samples, 0.03%)</title><rect x="813.8" y="259.0" width="0.4" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="816.8" y="270.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (287 samples, 0.06%)</title><rect x="814.2" y="275.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="817.2" y="286.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (287 samples, 0.06%)</title><rect x="814.2" y="259.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="817.2" y="270.0"></text>
</g>
<g>
<title>byte[] (287 samples, 0.06%)</title><rect x="814.2" y="243.0" width="0.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="817.2" y="254.0"></text>
</g>
<g>
<title>one.nio.http.Response (229 samples, 0.05%)</title><rect x="814.8" y="323.0" width="0.6" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="817.8" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (803 samples, 0.16%)</title><rect x="815.4" y="323.0" width="1.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="818.4" y="334.0"></text>
</g>
<g>
<title>byte[] (322 samples, 0.06%)</title><rect x="815.4" y="307.0" width="0.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="818.4" y="318.0"></text>
</g>
<g>
<title>java.lang.String[] (270 samples, 0.05%)</title><rect x="816.1" y="307.0" width="0.7" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="819.1" y="318.0"></text>
</g>
<g>
<title>java.lang.String (211 samples, 0.04%)</title><rect x="816.8" y="307.0" width="0.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="819.8" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/Value.getData (609 samples, 0.12%)</title><rect x="817.3" y="323.0" width="1.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="820.3" y="334.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (609 samples, 0.12%)</title><rect x="817.3" y="307.0" width="1.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="820.3" y="318.0"></text>
</g>
<g>
<title>byte[] (609 samples, 0.12%)</title><rect x="817.3" y="291.0" width="1.4" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="820.3" y="302.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (157,482 samples, 31.47%)</title><rect x="818.7" y="451.0" width="371.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="821.7" y="462.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (5,121 samples, 1.02%)</title><rect x="818.7" y="435.0" width="12.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="821.7" y="446.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (5,121 samples, 1.02%)</title><rect x="818.7" y="419.0" width="12.1" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="821.7" y="430.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (152,361 samples, 30.44%)</title><rect x="830.8" y="435.0" width="359.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="833.8" y="446.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (152,361 samples, 30.44%)</title><rect x="830.8" y="419.0" width="359.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="833.8" y="430.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (152,361 samples, 30.44%)</title><rect x="830.8" y="403.0" width="359.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="833.8" y="414.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (78,470 samples, 15.68%)</title><rect x="830.8" y="387.0" width="185.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="833.8" y="398.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (78,470 samples, 15.68%)</title><rect x="830.8" y="371.0" width="185.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="833.8" y="382.0">one/nio/http/HttpServer...</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (71,998 samples, 14.39%)</title><rect x="830.8" y="355.0" width="169.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="833.8" y="366.0">RequestHandler1_entity..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4,746 samples, 0.95%)</title><rect x="830.8" y="339.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.8" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (4,746 samples, 0.95%)</title><rect x="830.8" y="323.0" width="11.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="833.8" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,746 samples, 0.95%)</title><rect x="830.8" y="307.0" width="11.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.8" y="318.0"></text>
</g>
<g>
<title>java.lang.String (2,851 samples, 0.57%)</title><rect x="830.8" y="291.0" width="6.7" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="833.8" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,895 samples, 0.38%)</title><rect x="837.5" y="291.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="840.5" y="302.0"></text>
</g>
<g>
<title>byte[] (1,895 samples, 0.38%)</title><rect x="837.5" y="275.0" width="4.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="840.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.entity (67,252 samples, 13.44%)</title><rect x="842.0" y="339.0" width="158.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="845.0" y="350.0">ru/mail/polis/servic..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.runExecutorService (5,604 samples, 1.12%)</title><rect x="842.0" y="323.0" width="13.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="845.0" y="334.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (3,474 samples, 0.69%)</title><rect x="842.0" y="307.0" width="8.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="845.0" y="318.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (3,474 samples, 0.69%)</title><rect x="842.0" y="291.0" width="8.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="845.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.get$Lambda (3,474 samples, 0.69%)</title><rect x="842.0" y="275.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="845.0" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.NewService$$Lambda$64 (3,474 samples, 0.69%)</title><rect x="842.0" y="259.0" width="8.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="845.0" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (2,130 samples, 0.43%)</title><rect x="850.2" y="307.0" width="5.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="853.2" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (2,130 samples, 0.43%)</title><rect x="850.2" y="291.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="853.2" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (2,123 samples, 0.42%)</title><rect x="850.2" y="275.0" width="5.0" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="853.2" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.all (61,648 samples, 12.32%)</title><rect x="855.2" y="323.0" width="145.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.2" y="334.0">ru/mail/polis/serv..</text>
</g>
<g>
<title>java/util/Set.copyOf (61,648 samples, 12.32%)</title><rect x="855.2" y="307.0" width="145.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="858.2" y="318.0">java/util/Set.copyOf</text>
</g>
<g>
<title>java.util.HashSet (1,145 samples, 0.23%)</title><rect x="855.2" y="291.0" width="2.7" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="858.2" y="302.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (10,835 samples, 2.16%)</title><rect x="857.9" y="291.0" width="25.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="860.9" y="302.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (3,077 samples, 0.61%)</title><rect x="857.9" y="275.0" width="7.2" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="860.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (7,758 samples, 1.55%)</title><rect x="865.1" y="275.0" width="18.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="868.1" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3,589 samples, 0.72%)</title><rect x="865.1" y="259.0" width="8.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="868.1" y="270.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (3,589 samples, 0.72%)</title><rect x="865.1" y="243.0" width="8.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="868.1" y="254.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (4,169 samples, 0.83%)</title><rect x="873.6" y="259.0" width="9.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="876.6" y="270.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (4,169 samples, 0.83%)</title><rect x="873.6" y="243.0" width="9.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="876.6" y="254.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (38,943 samples, 7.78%)</title><rect x="883.4" y="291.0" width="91.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="886.4" y="302.0">java/util/H..</text>
</g>
<g>
<title>java.util.HashMap (9,897 samples, 1.98%)</title><rect x="883.4" y="275.0" width="23.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="886.4" y="286.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (29,046 samples, 5.80%)</title><rect x="906.8" y="275.0" width="68.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="909.8" y="286.0">java/ut..</text>
</g>
<g>
<title>java/util/HashSet.add (29,046 samples, 5.80%)</title><rect x="906.8" y="259.0" width="68.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="909.8" y="270.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.put (29,046 samples, 5.80%)</title><rect x="906.8" y="243.0" width="68.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="909.8" y="254.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.putVal (29,046 samples, 5.80%)</title><rect x="906.8" y="227.0" width="68.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="909.8" y="238.0">java/ut..</text>
</g>
<g>
<title>java/util/HashMap.newNode (16,586 samples, 3.31%)</title><rect x="906.8" y="211.0" width="39.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="909.8" y="222.0">jav..</text>
</g>
<g>
<title>java.util.HashMap$Node (16,586 samples, 3.31%)</title><rect x="906.8" y="195.0" width="39.1" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="909.8" y="206.0">jav..</text>
</g>
<g>
<title>java/util/HashMap.resize (12,460 samples, 2.49%)</title><rect x="945.9" y="211.0" width="29.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="948.9" y="222.0">ja..</text>
</g>
<g>
<title>java.util.HashMap$Node[] (8,292 samples, 1.66%)</title><rect x="945.9" y="195.0" width="19.5" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="948.9" y="206.0"></text>
</g>
<g>
<title>java.util.HashMap$Node[] (4,168 samples, 0.83%)</title><rect x="965.4" y="195.0" width="9.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="968.4" y="206.0"></text>
</g>
<g>
<title>java/util/Set.of (10,725 samples, 2.14%)</title><rect x="975.2" y="291.0" width="25.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="978.2" y="302.0">j..</text>
</g>
<g>
<title>java.util.ImmutableCollections$SetN (5,460 samples, 1.09%)</title><rect x="975.2" y="275.0" width="12.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="978.2" y="286.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (5,265 samples, 1.05%)</title><rect x="988.1" y="275.0" width="12.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="991.1" y="286.0"></text>
</g>
<g>
<title>java.lang.Object[] (5,265 samples, 1.05%)</title><rect x="988.1" y="259.0" width="12.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="991.1" y="270.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (6,472 samples, 1.29%)</title><rect x="1000.5" y="355.0" width="15.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1003.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.substring (6,472 samples, 1.29%)</title><rect x="1000.5" y="339.0" width="15.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1003.5" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6,472 samples, 1.29%)</title><rect x="1000.5" y="323.0" width="15.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1003.5" y="334.0"></text>
</g>
<g>
<title>java.lang.String (4,348 samples, 0.87%)</title><rect x="1000.5" y="307.0" width="10.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1003.5" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,124 samples, 0.42%)</title><rect x="1010.8" y="307.0" width="5.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1013.8" y="318.0"></text>
</g>
<g>
<title>byte[] (2,124 samples, 0.42%)</title><rect x="1010.8" y="291.0" width="5.0" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1013.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (36,531 samples, 7.30%)</title><rect x="1015.8" y="387.0" width="86.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1018.8" y="398.0">one/nio/ht..</text>
</g>
<g>
<title>one.nio.http.Request (8,822 samples, 1.76%)</title><rect x="1015.8" y="371.0" width="20.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1018.8" y="382.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (7,759 samples, 1.55%)</title><rect x="1036.6" y="371.0" width="18.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1039.6" y="382.0"></text>
</g>
<g>
<title>java.lang.String[] (4,951 samples, 0.99%)</title><rect x="1036.6" y="355.0" width="11.7" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1039.6" y="366.0"></text>
</g>
<g>
<title>java.lang.String[] (2,808 samples, 0.56%)</title><rect x="1048.3" y="355.0" width="6.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1051.3" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (19,950 samples, 3.99%)</title><rect x="1054.9" y="371.0" width="47.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1057.9" y="382.0">one/..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (19,950 samples, 3.99%)</title><rect x="1054.9" y="355.0" width="47.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1057.9" y="366.0">one/..</text>
</g>
<g>
<title>char[] (8,261 samples, 1.65%)</title><rect x="1054.9" y="339.0" width="19.5" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1057.9" y="350.0"></text>
</g>
<g>
<title>char[] (2,655 samples, 0.53%)</title><rect x="1074.4" y="339.0" width="6.2" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1077.4" y="350.0"></text>
</g>
<g>
<title>java.lang.String (2,880 samples, 0.58%)</title><rect x="1080.6" y="339.0" width="6.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1083.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,154 samples, 1.23%)</title><rect x="1087.4" y="339.0" width="14.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1090.4" y="350.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (6,154 samples, 1.23%)</title><rect x="1087.4" y="323.0" width="14.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1090.4" y="334.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (6,154 samples, 1.23%)</title><rect x="1087.4" y="307.0" width="14.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1090.4" y="318.0"></text>
</g>
<g>
<title>byte[] (6,154 samples, 1.23%)</title><rect x="1087.4" y="291.0" width="14.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="1090.4" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (37,360 samples, 7.46%)</title><rect x="1101.9" y="387.0" width="88.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1104.9" y="398.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (37,360 samples, 7.46%)</title><rect x="1101.9" y="371.0" width="88.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1104.9" y="382.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (13,111 samples, 2.62%)</title><rect x="1101.9" y="355.0" width="30.9" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="1104.9" y="366.0">ch..</text>
</g>
<g>
<title>char[] (3,254 samples, 0.65%)</title><rect x="1132.8" y="355.0" width="7.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1135.8" y="366.0"></text>
</g>
<g>
<title>java.lang.String (7,792 samples, 1.56%)</title><rect x="1140.5" y="355.0" width="18.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1143.5" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13,203 samples, 2.64%)</title><rect x="1158.9" y="355.0" width="31.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1161.9" y="366.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (13,203 samples, 2.64%)</title><rect x="1158.9" y="339.0" width="31.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1161.9" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (13,203 samples, 2.64%)</title><rect x="1158.9" y="323.0" width="31.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1161.9" y="334.0">ja..</text>
</g>
<g>
<title>byte[] (13,203 samples, 2.64%)</title><rect x="1158.9" y="307.0" width="31.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="1161.9" y="318.0">by..</text>
</g>
</g>
</svg>
