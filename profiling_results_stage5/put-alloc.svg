<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="373"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="373"> </text>
<g id="frames">
<g>
<title>all (344,035 samples, 100.00%)</title><rect x="10.0" y="339.0" width="1180.0" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="13.0" y="350.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (238,647 samples, 69.37%)</title><rect x="10.0" y="323.0" width="818.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="13.0" y="334.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (238,647 samples, 69.37%)</title><rect x="10.0" y="307.0" width="818.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="13.0" y="318.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (238,647 samples, 69.37%)</title><rect x="10.0" y="291.0" width="818.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="302.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (82,063 samples, 23.85%)</title><rect x="10.0" y="275.0" width="281.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (81,971 samples, 23.83%)</title><rect x="10.0" y="259.0" width="281.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/Executors$Runnabl..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (81,971 samples, 23.83%)</title><rect x="10.0" y="243.0" width="281.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.call (81,971 samples, 23.83%)</title><rect x="10.0" y="227.0" width="281.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="238.0">ru/mail/polis/service/boriskin/Replica..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.lambda$getResponses$0 (81,971 samples, 23.83%)</title><rect x="10.0" y="211.0" width="281.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="222.0">ru/mail/polis/service/boriskin/Replica..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.proxy (81,971 samples, 23.83%)</title><rect x="10.0" y="195.0" width="281.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="206.0">ru/mail/polis/service/boriskin/Replica..</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (81,971 samples, 23.83%)</title><rect x="10.0" y="179.0" width="281.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (81,971 samples, 23.83%)</title><rect x="10.0" y="163.0" width="281.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (254 samples, 0.07%)</title><rect x="10.0" y="147.0" width="0.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (77,361 samples, 22.49%)</title><rect x="10.9" y="147.0" width="265.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="13.9" y="158.0">one/nio/http/HttpClient$ResponseRea..</text>
</g>
<g>
<title>byte[] (38,648 samples, 11.23%)</title><rect x="10.9" y="131.0" width="132.5" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="13.9" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (38,713 samples, 11.25%)</title><rect x="143.4" y="131.0" width="132.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="146.4" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (2,719 samples, 0.79%)</title><rect x="276.2" y="147.0" width="9.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="279.2" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (97 samples, 0.03%)</title><rect x="276.4" y="131.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.4" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (97 samples, 0.03%)</title><rect x="276.4" y="115.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="279.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2,282 samples, 0.66%)</title><rect x="276.9" y="131.0" width="7.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="279.9" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,282 samples, 0.66%)</title><rect x="276.9" y="115.0" width="7.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="279.9" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2,282 samples, 0.66%)</title><rect x="276.9" y="99.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="279.9" y="110.0"></text>
</g>
<g>
<title>char[] (1,717 samples, 0.50%)</title><rect x="276.9" y="83.0" width="5.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="279.9" y="94.0"></text>
</g>
<g>
<title>java.lang.String (269 samples, 0.08%)</title><rect x="282.8" y="83.0" width="0.9" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="285.8" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (296 samples, 0.09%)</title><rect x="283.7" y="83.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="286.7" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (296 samples, 0.09%)</title><rect x="283.7" y="67.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="286.7" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (296 samples, 0.09%)</title><rect x="283.7" y="51.0" width="1.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="286.7" y="62.0"></text>
</g>
<g>
<title>byte[] (296 samples, 0.09%)</title><rect x="283.7" y="35.0" width="1.1" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="286.7" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (174 samples, 0.05%)</title><rect x="284.9" y="131.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.9" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (174 samples, 0.05%)</title><rect x="284.9" y="115.0" width="0.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="287.9" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (174 samples, 0.05%)</title><rect x="284.9" y="99.0" width="0.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="287.9" y="110.0"></text>
</g>
<g>
<title>java.lang.String (86 samples, 0.02%)</title><rect x="284.9" y="83.0" width="0.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="287.9" y="94.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (88 samples, 0.03%)</title><rect x="285.2" y="83.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.2" y="94.0"></text>
</g>
<g>
<title>byte[] (88 samples, 0.03%)</title><rect x="285.2" y="67.0" width="0.3" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="288.2" y="78.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (1,310 samples, 0.38%)</title><rect x="285.5" y="147.0" width="4.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="288.5" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (1,272 samples, 0.37%)</title><rect x="285.5" y="131.0" width="4.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="288.5" y="142.0"></text>
</g>
<g>
<title>byte[] (1,272 samples, 0.37%)</title><rect x="285.5" y="115.0" width="4.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="288.5" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (216 samples, 0.06%)</title><rect x="290.0" y="147.0" width="0.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="293.0" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (216 samples, 0.06%)</title><rect x="290.0" y="131.0" width="0.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.0" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (216 samples, 0.06%)</title><rect x="290.0" y="115.0" width="0.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="293.0" y="126.0"></text>
</g>
<g>
<title>java.lang.String (80 samples, 0.02%)</title><rect x="290.0" y="99.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="293.0" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (136 samples, 0.04%)</title><rect x="290.3" y="99.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="293.3" y="110.0"></text>
</g>
<g>
<title>byte[] (136 samples, 0.04%)</title><rect x="290.3" y="83.0" width="0.5" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="293.3" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (111 samples, 0.03%)</title><rect x="290.8" y="147.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="293.8" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (111 samples, 0.03%)</title><rect x="290.8" y="131.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="293.8" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (111 samples, 0.03%)</title><rect x="290.8" y="115.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="293.8" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (111 samples, 0.03%)</title><rect x="290.8" y="99.0" width="0.4" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="293.8" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (92 samples, 0.03%)</title><rect x="291.2" y="259.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="294.2" y="270.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (92 samples, 0.03%)</title><rect x="291.2" y="243.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="294.2" y="254.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.done (92 samples, 0.03%)</title><rect x="291.2" y="227.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.2" y="238.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.add (92 samples, 0.03%)</title><rect x="291.2" y="211.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="294.2" y="222.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (92 samples, 0.03%)</title><rect x="291.2" y="195.0" width="0.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="294.2" y="206.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (89 samples, 0.03%)</title><rect x="291.2" y="179.0" width="0.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="294.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (6,658 samples, 1.94%)</title><rect x="291.5" y="275.0" width="22.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.5" y="286.0">j..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (6,658 samples, 1.94%)</title><rect x="291.5" y="259.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="294.5" y="270.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (6,587 samples, 1.91%)</title><rect x="291.5" y="243.0" width="22.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.5" y="254.0">j..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (6,587 samples, 1.91%)</title><rect x="291.5" y="227.0" width="22.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.5" y="238.0">j..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (6,587 samples, 1.91%)</title><rect x="291.5" y="211.0" width="22.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="294.5" y="222.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.run (149,926 samples, 43.58%)</title><rect x="314.3" y="275.0" width="514.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="317.3" y="286.0">ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.run</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$0 (149,926 samples, 43.58%)</title><rect x="314.3" y="259.0" width="514.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="317.3" y="270.0">ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$0</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (149,926 samples, 43.58%)</title><rect x="314.3" y="243.0" width="514.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="317.3" y="254.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (8,557 samples, 2.49%)</title><rect x="314.3" y="227.0" width="29.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.3" y="238.0">on..</text>
</g>
<g>
<title>java/lang/String.substring (8,557 samples, 2.49%)</title><rect x="314.3" y="211.0" width="29.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="317.3" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8,557 samples, 2.49%)</title><rect x="314.3" y="195.0" width="29.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="317.3" y="206.0">ja..</text>
</g>
<g>
<title>java.lang.String (6,243 samples, 1.81%)</title><rect x="314.3" y="179.0" width="21.4" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="317.3" y="190.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,314 samples, 0.67%)</title><rect x="335.7" y="179.0" width="8.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="338.7" y="190.0"></text>
</g>
<g>
<title>byte[] (2,314 samples, 0.67%)</title><rect x="335.7" y="163.0" width="8.0" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="338.7" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.MetaInfoRequest (6,104 samples, 1.77%)</title><rect x="343.7" y="227.0" width="20.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="346.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/MetaInfoRequest.&lt;init&gt; (23,612 samples, 6.86%)</title><rect x="364.6" y="227.0" width="81.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="367.6" y="238.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.substring (7,651 samples, 2.22%)</title><rect x="364.6" y="211.0" width="26.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="367.6" y="222.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,651 samples, 2.22%)</title><rect x="364.6" y="195.0" width="26.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="367.6" y="206.0">j..</text>
</g>
<g>
<title>java.lang.String (3,917 samples, 1.14%)</title><rect x="364.6" y="179.0" width="13.4" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="367.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,734 samples, 1.09%)</title><rect x="378.0" y="179.0" width="12.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="381.0" y="190.0"></text>
</g>
<g>
<title>byte[] (3,734 samples, 1.09%)</title><rect x="378.0" y="163.0" width="12.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="381.0" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7,810 samples, 2.27%)</title><rect x="390.8" y="211.0" width="26.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.8" y="222.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (7,810 samples, 2.27%)</title><rect x="390.8" y="195.0" width="26.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="393.8" y="206.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (7,810 samples, 2.27%)</title><rect x="390.8" y="179.0" width="26.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="393.8" y="190.0">j..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8,151 samples, 2.37%)</title><rect x="417.6" y="211.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.6" y="222.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (8,151 samples, 2.37%)</title><rect x="417.6" y="195.0" width="28.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="420.6" y="206.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (8,151 samples, 2.37%)</title><rect x="417.6" y="179.0" width="28.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="420.6" y="190.0">j..</text>
</g>
<g>
<title>java.lang.String (3,816 samples, 1.11%)</title><rect x="417.6" y="163.0" width="13.1" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="420.6" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (4,335 samples, 1.26%)</title><rect x="430.7" y="163.0" width="14.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="433.7" y="174.0"></text>
</g>
<g>
<title>byte[] (4,335 samples, 1.26%)</title><rect x="430.7" y="147.0" width="14.9" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="433.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (27,399 samples, 7.96%)</title><rect x="445.6" y="227.0" width="94.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="448.6" y="238.0">ru/mail/pol..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (27,399 samples, 7.96%)</title><rect x="445.6" y="211.0" width="94.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="448.6" y="222.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (27,399 samples, 7.96%)</title><rect x="445.6" y="195.0" width="94.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="448.6" y="206.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (19,309 samples, 5.61%)</title><rect x="445.6" y="179.0" width="66.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="448.6" y="190.0">one/nio..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (19,309 samples, 5.61%)</title><rect x="445.6" y="163.0" width="66.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="448.6" y="174.0">one/nio..</text>
</g>
<g>
<title>byte[] (17,339 samples, 5.04%)</title><rect x="445.6" y="147.0" width="59.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="448.6" y="158.0">byte[]</text>
</g>
<g>
<title>byte[] (1,970 samples, 0.57%)</title><rect x="505.0" y="147.0" width="6.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="508.0" y="158.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (8,090 samples, 2.35%)</title><rect x="511.8" y="179.0" width="27.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="514.8" y="190.0">o..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (8,090 samples, 2.35%)</title><rect x="511.8" y="163.0" width="27.8" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="514.8" y="174.0">o..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.upserting (84,254 samples, 24.49%)</title><rect x="539.6" y="227.0" width="288.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="542.6" y="238.0">ru/mail/polis/service/boriskin/ReplicaW..</text>
</g>
<g>
<title>java/lang/String.getBytes (4,748 samples, 1.38%)</title><rect x="539.6" y="211.0" width="16.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="542.6" y="222.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (4,748 samples, 1.38%)</title><rect x="539.6" y="195.0" width="16.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="542.6" y="206.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (4,748 samples, 1.38%)</title><rect x="539.6" y="179.0" width="16.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="542.6" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (4,748 samples, 1.38%)</title><rect x="539.6" y="163.0" width="16.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="542.6" y="174.0"></text>
</g>
<g>
<title>byte[] (4,748 samples, 1.38%)</title><rect x="539.6" y="147.0" width="16.2" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="542.6" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9,391 samples, 2.73%)</title><rect x="555.8" y="211.0" width="32.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="558.8" y="222.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (9,391 samples, 2.73%)</title><rect x="555.8" y="195.0" width="32.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="558.8" y="206.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (9,391 samples, 2.73%)</title><rect x="555.8" y="179.0" width="32.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="558.8" y="190.0">ja..</text>
</g>
<g>
<title>one.nio.http.Response (3,987 samples, 1.16%)</title><rect x="588.1" y="211.0" width="13.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="591.1" y="222.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (17,958 samples, 5.22%)</title><rect x="601.7" y="211.0" width="61.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="604.7" y="222.0">one/ni..</text>
</g>
<g>
<title>byte[] (7,695 samples, 2.24%)</title><rect x="601.7" y="195.0" width="26.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="604.7" y="206.0">b..</text>
</g>
<g>
<title>java.lang.String[] (5,354 samples, 1.56%)</title><rect x="628.1" y="195.0" width="18.4" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="631.1" y="206.0"></text>
</g>
<g>
<title>java.lang.String (4,909 samples, 1.43%)</title><rect x="646.5" y="195.0" width="16.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="649.5" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (21,397 samples, 6.22%)</title><rect x="663.3" y="211.0" width="73.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="666.3" y="222.0">ru/mail/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (117 samples, 0.03%)</title><rect x="663.3" y="195.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="666.3" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (117 samples, 0.03%)</title><rect x="663.3" y="179.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.3" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (117 samples, 0.03%)</title><rect x="663.3" y="163.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="666.3" y="174.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (106 samples, 0.03%)</title><rect x="663.3" y="147.0" width="0.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="666.3" y="158.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (106 samples, 0.03%)</title><rect x="663.3" y="131.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (19,997 samples, 5.81%)</title><rect x="663.7" y="195.0" width="68.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="666.7" y="206.0">ru/mail..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (15,802 samples, 4.59%)</title><rect x="663.7" y="179.0" width="54.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="666.7" y="190.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (15,802 samples, 4.59%)</title><rect x="663.7" y="163.0" width="54.2" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="666.7" y="174.0">java...</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (98 samples, 0.03%)</title><rect x="717.9" y="179.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="720.9" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (98 samples, 0.03%)</title><rect x="717.9" y="163.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="720.9" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (4,097 samples, 1.19%)</title><rect x="718.3" y="179.0" width="14.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="721.3" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (1,283 samples, 0.37%)</title><rect x="732.3" y="195.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="735.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (1,279 samples, 0.37%)</title><rect x="732.3" y="179.0" width="4.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="735.3" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (175 samples, 0.05%)</title><rect x="732.3" y="163.0" width="0.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="735.3" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (126 samples, 0.04%)</title><rect x="732.5" y="147.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="735.5" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (126 samples, 0.04%)</title><rect x="732.5" y="131.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="735.5" y="142.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (126 samples, 0.04%)</title><rect x="732.5" y="115.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="735.5" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (695 samples, 0.20%)</title><rect x="733.1" y="163.0" width="2.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="736.1" y="174.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (355 samples, 0.10%)</title><rect x="733.1" y="147.0" width="1.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="736.1" y="158.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (340 samples, 0.10%)</title><rect x="734.3" y="147.0" width="1.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="737.3" y="158.0"></text>
</g>
<g>
<title>byte[] (340 samples, 0.10%)</title><rect x="734.3" y="131.0" width="1.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="737.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (207 samples, 0.06%)</title><rect x="735.6" y="163.0" width="0.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="738.6" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (207 samples, 0.06%)</title><rect x="735.6" y="147.0" width="0.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="738.6" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (207 samples, 0.06%)</title><rect x="735.6" y="131.0" width="0.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="738.6" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Value.getData (114 samples, 0.03%)</title><rect x="736.3" y="163.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="739.3" y="174.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (114 samples, 0.03%)</title><rect x="736.3" y="147.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.3" y="158.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (114 samples, 0.03%)</title><rect x="736.3" y="131.0" width="0.4" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="739.3" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.replicas (13,887 samples, 4.04%)</title><rect x="736.7" y="211.0" width="47.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="739.7" y="222.0">ru/m..</text>
</g>
<g>
<title>java.util.ArrayList (720 samples, 0.21%)</title><rect x="736.7" y="195.0" width="2.5" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="739.7" y="206.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (2,870 samples, 0.83%)</title><rect x="739.2" y="195.0" width="9.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="742.2" y="206.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (746 samples, 0.22%)</title><rect x="739.2" y="179.0" width="2.6" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="742.2" y="190.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (2,124 samples, 0.62%)</title><rect x="741.8" y="179.0" width="7.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="744.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (1,181 samples, 0.34%)</title><rect x="741.8" y="163.0" width="4.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="744.8" y="174.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$SubMapEntryIterator (1,181 samples, 0.34%)</title><rect x="741.8" y="147.0" width="4.0" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="744.8" y="158.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (943 samples, 0.27%)</title><rect x="745.8" y="163.0" width="3.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="748.8" y="174.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap$AscendingEntrySetView (943 samples, 0.27%)</title><rect x="745.8" y="147.0" width="3.2" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="748.8" y="158.0"></text>
</g>
<g>
<title>java/util/AbstractMap.values (467 samples, 0.14%)</title><rect x="749.0" y="195.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="752.0" y="206.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2 (467 samples, 0.14%)</title><rect x="749.0" y="179.0" width="1.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="752.0" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,759 samples, 0.51%)</title><rect x="750.6" y="195.0" width="6.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="753.6" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,759 samples, 0.51%)</title><rect x="750.6" y="179.0" width="6.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="753.6" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,759 samples, 0.51%)</title><rect x="750.6" y="163.0" width="6.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="753.6" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,759 samples, 0.51%)</title><rect x="750.6" y="147.0" width="6.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="753.6" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,759 samples, 0.51%)</title><rect x="750.6" y="131.0" width="6.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="753.6" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,759 samples, 0.51%)</title><rect x="750.6" y="115.0" width="6.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="753.6" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1,483 samples, 0.43%)</title><rect x="756.9" y="195.0" width="5.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.9" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (1,483 samples, 0.43%)</title><rect x="756.9" y="179.0" width="5.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="759.9" y="190.0"></text>
</g>
<g>
<title>java.util.TreeMap$AscendingSubMap (1,483 samples, 0.43%)</title><rect x="756.9" y="163.0" width="5.1" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="759.9" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.getFirstOne (6,527 samples, 1.90%)</title><rect x="762.0" y="195.0" width="22.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="765.0" y="206.0">r..</text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (5,066 samples, 1.47%)</title><rect x="762.0" y="179.0" width="17.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="765.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (4,098 samples, 1.19%)</title><rect x="762.0" y="163.0" width="14.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="765.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (4,098 samples, 1.19%)</title><rect x="762.0" y="147.0" width="14.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="765.0" y="158.0"></text>
</g>
<g>
<title>com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher (1,479 samples, 0.43%)</title><rect x="762.0" y="131.0" width="5.0" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="765.0" y="142.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (2,619 samples, 0.76%)</title><rect x="767.0" y="131.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="770.0" y="142.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (2,619 samples, 0.76%)</title><rect x="767.0" y="115.0" width="9.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="770.0" y="126.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (2,619 samples, 0.76%)</title><rect x="767.0" y="99.0" width="9.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="770.0" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,619 samples, 0.76%)</title><rect x="767.0" y="83.0" width="9.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="770.0" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,447 samples, 0.42%)</title><rect x="767.0" y="67.0" width="5.0" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="770.0" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,172 samples, 0.34%)</title><rect x="772.0" y="67.0" width="4.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.0" y="78.0"></text>
</g>
<g>
<title>byte[] (1,172 samples, 0.34%)</title><rect x="772.0" y="51.0" width="4.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="775.0" y="62.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (968 samples, 0.28%)</title><rect x="776.0" y="163.0" width="3.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="779.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.makeHash (968 samples, 0.28%)</title><rect x="776.0" y="147.0" width="3.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="779.0" y="158.0"></text>
</g>
<g>
<title>byte[] (968 samples, 0.28%)</title><rect x="776.0" y="131.0" width="3.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="779.0" y="142.0"></text>
</g>
<g>
<title>java/lang/Long.valueOf (718 samples, 0.21%)</title><rect x="779.3" y="179.0" width="2.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="782.3" y="190.0"></text>
</g>
<g>
<title>java.lang.Long (718 samples, 0.21%)</title><rect x="779.3" y="163.0" width="2.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="782.3" y="174.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (727 samples, 0.21%)</title><rect x="781.8" y="179.0" width="2.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="784.8" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.exportEntry (727 samples, 0.21%)</title><rect x="781.8" y="163.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="784.8" y="174.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (727 samples, 0.21%)</title><rect x="781.8" y="147.0" width="2.5" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="784.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.getResponses (12,880 samples, 3.74%)</title><rect x="784.4" y="211.0" width="44.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="787.4" y="222.0">ru/m..</text>
</g>
<g>
<title>java.util.ArrayList (678 samples, 0.20%)</title><rect x="784.4" y="195.0" width="2.3" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="787.4" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (1,437 samples, 0.42%)</title><rect x="786.7" y="195.0" width="5.0" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="789.7" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,437 samples, 0.42%)</title><rect x="786.7" y="179.0" width="5.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="789.7" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.get$Lambda (1,437 samples, 0.42%)</title><rect x="786.7" y="163.0" width="5.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="789.7" y="174.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.ReplicaWorker$$Lambda$72 (1,437 samples, 0.42%)</title><rect x="786.7" y="147.0" width="5.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="789.7" y="158.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,782 samples, 0.52%)</title><rect x="791.7" y="195.0" width="6.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="794.7" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1,782 samples, 0.52%)</title><rect x="791.7" y="179.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.7" y="190.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,782 samples, 0.52%)</title><rect x="791.7" y="163.0" width="6.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="794.7" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1,782 samples, 0.52%)</title><rect x="791.7" y="147.0" width="6.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="794.7" y="158.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1,782 samples, 0.52%)</title><rect x="791.7" y="131.0" width="6.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="794.7" y="142.0"></text>
</g>
<g>
<title>java.lang.Object[] (1,764 samples, 0.51%)</title><rect x="791.7" y="115.0" width="6.0" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="794.7" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.submit (7,128 samples, 2.07%)</title><rect x="797.8" y="195.0" width="24.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="800.8" y="206.0">j..</text>
</g>
<g>
<title>java.util.concurrent.ExecutorCompletionService$QueueingFuture (2,341 samples, 0.68%)</title><rect x="797.8" y="179.0" width="8.0" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="800.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.&lt;init&gt; (1,440 samples, 0.42%)</title><rect x="805.8" y="179.0" width="5.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="808.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (1,440 samples, 0.42%)</title><rect x="805.8" y="163.0" width="5.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="808.8" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/Executors.callable (1,440 samples, 0.42%)</title><rect x="805.8" y="147.0" width="5.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="808.8" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.Executors$RunnableAdapter (1,440 samples, 0.42%)</title><rect x="805.8" y="131.0" width="5.0" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="808.8" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.newTaskFor (1,920 samples, 0.56%)</title><rect x="810.8" y="179.0" width="6.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.8" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (1,920 samples, 0.56%)</title><rect x="810.8" y="163.0" width="6.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="813.8" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.FutureTask (1,920 samples, 0.56%)</title><rect x="810.8" y="147.0" width="6.6" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="813.8" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1,427 samples, 0.41%)</title><rect x="817.4" y="179.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.4" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1,427 samples, 0.41%)</title><rect x="817.4" y="163.0" width="4.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="820.4" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (1,421 samples, 0.41%)</title><rect x="817.4" y="147.0" width="4.8" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="820.4" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.take (1,833 samples, 0.53%)</title><rect x="822.2" y="195.0" width="6.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="825.2" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,833 samples, 0.53%)</title><rect x="822.2" y="179.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.2" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (1,807 samples, 0.53%)</title><rect x="822.2" y="163.0" width="6.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="825.2" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (1,807 samples, 0.53%)</title><rect x="822.2" y="147.0" width="6.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="825.2" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (1,807 samples, 0.53%)</title><rect x="822.2" y="131.0" width="6.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="825.2" y="142.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (105,387 samples, 30.63%)</title><rect x="828.5" y="323.0" width="361.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="831.5" y="334.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,173 samples, 0.63%)</title><rect x="828.5" y="307.0" width="7.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="831.5" y="318.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,173 samples, 0.63%)</title><rect x="828.5" y="291.0" width="7.5" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="831.5" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (103,214 samples, 30.00%)</title><rect x="836.0" y="307.0" width="354.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="839.0" y="318.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (103,214 samples, 30.00%)</title><rect x="836.0" y="291.0" width="354.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="839.0" y="302.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (103,214 samples, 30.00%)</title><rect x="836.0" y="275.0" width="354.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="839.0" y="286.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (43,376 samples, 12.61%)</title><rect x="836.0" y="259.0" width="148.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.0" y="270.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (43,376 samples, 12.61%)</title><rect x="836.0" y="243.0" width="148.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="839.0" y="254.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (39,135 samples, 11.38%)</title><rect x="836.0" y="227.0" width="134.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="839.0" y="238.0">RequestHandler1_e..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (3,893 samples, 1.13%)</title><rect x="836.0" y="211.0" width="13.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="839.0" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,893 samples, 1.13%)</title><rect x="836.0" y="195.0" width="13.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="839.0" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,893 samples, 1.13%)</title><rect x="836.0" y="179.0" width="13.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="839.0" y="190.0"></text>
</g>
<g>
<title>java.lang.String (1,948 samples, 0.57%)</title><rect x="836.0" y="163.0" width="6.7" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="839.0" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,945 samples, 0.57%)</title><rect x="842.7" y="163.0" width="6.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="845.7" y="174.0"></text>
</g>
<g>
<title>byte[] (1,945 samples, 0.57%)</title><rect x="842.7" y="147.0" width="6.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="845.7" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.entity (35,242 samples, 10.24%)</title><rect x="849.3" y="211.0" width="120.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="852.3" y="222.0">ru/mail/polis/s..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.runExecutorService (4,376 samples, 1.27%)</title><rect x="849.3" y="195.0" width="15.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="852.3" y="206.0"></text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (2,540 samples, 0.74%)</title><rect x="849.3" y="179.0" width="8.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="852.3" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (2,540 samples, 0.74%)</title><rect x="849.3" y="163.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="852.3" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.get$Lambda (2,540 samples, 0.74%)</title><rect x="849.3" y="147.0" width="8.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="852.3" y="158.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.NewService$$Lambda$64 (2,540 samples, 0.74%)</title><rect x="849.3" y="131.0" width="8.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="852.3" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (1,836 samples, 0.53%)</title><rect x="858.1" y="179.0" width="6.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="861.1" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (1,836 samples, 0.53%)</title><rect x="858.1" y="163.0" width="6.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="861.1" y="174.0"></text>
</g>
<g>
<title>java.util.concurrent.LinkedBlockingQueue$Node (1,822 samples, 0.53%)</title><rect x="858.1" y="147.0" width="6.2" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="861.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.all (30,866 samples, 8.97%)</title><rect x="864.3" y="195.0" width="105.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.3" y="206.0">ru/mail/polis..</text>
</g>
<g>
<title>java/util/Set.copyOf (30,866 samples, 8.97%)</title><rect x="864.3" y="179.0" width="105.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="867.3" y="190.0">java/util/Set..</text>
</g>
<g>
<title>java.util.HashSet (1,472 samples, 0.43%)</title><rect x="864.3" y="163.0" width="5.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="867.3" y="174.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6,686 samples, 1.94%)</title><rect x="869.4" y="163.0" width="22.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="872.4" y="174.0">j..</text>
</g>
<g>
<title>java.lang.Object[] (2,531 samples, 0.74%)</title><rect x="869.4" y="147.0" width="8.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="872.4" y="158.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (4,155 samples, 1.21%)</title><rect x="878.1" y="147.0" width="14.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="881.1" y="158.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (3,063 samples, 0.89%)</title><rect x="878.1" y="131.0" width="10.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="881.1" y="142.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (3,063 samples, 0.89%)</title><rect x="878.1" y="115.0" width="10.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="881.1" y="126.0"></text>
</g>
<g>
<title>java/util/HashMap.keySet (1,092 samples, 0.32%)</title><rect x="888.6" y="131.0" width="3.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="891.6" y="142.0"></text>
</g>
<g>
<title>java.util.HashMap$KeySet (1,092 samples, 0.32%)</title><rect x="888.6" y="115.0" width="3.7" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="891.6" y="126.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (17,744 samples, 5.16%)</title><rect x="892.3" y="163.0" width="60.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="895.3" y="174.0">java/u..</text>
</g>
<g>
<title>java.util.HashMap (3,310 samples, 0.96%)</title><rect x="892.3" y="147.0" width="11.4" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="895.3" y="158.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (14,434 samples, 4.20%)</title><rect x="903.7" y="147.0" width="49.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="906.7" y="158.0">java/..</text>
</g>
<g>
<title>java/util/HashSet.add (14,434 samples, 4.20%)</title><rect x="903.7" y="131.0" width="49.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="906.7" y="142.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.put (14,434 samples, 4.20%)</title><rect x="903.7" y="115.0" width="49.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="906.7" y="126.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.putVal (14,434 samples, 4.20%)</title><rect x="903.7" y="99.0" width="49.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.7" y="110.0">java/..</text>
</g>
<g>
<title>java/util/HashMap.newNode (6,930 samples, 2.01%)</title><rect x="903.7" y="83.0" width="23.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.7" y="94.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node (6,930 samples, 2.01%)</title><rect x="903.7" y="67.0" width="23.8" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="906.7" y="78.0">j..</text>
</g>
<g>
<title>java/util/HashMap.resize (7,504 samples, 2.18%)</title><rect x="927.5" y="83.0" width="25.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="930.5" y="94.0">j..</text>
</g>
<g>
<title>java.util.HashMap$Node[] (7,499 samples, 2.18%)</title><rect x="927.5" y="67.0" width="25.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="930.5" y="78.0">j..</text>
</g>
<g>
<title>java/util/Set.of (4,964 samples, 1.44%)</title><rect x="953.2" y="163.0" width="17.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="956.2" y="174.0"></text>
</g>
<g>
<title>java.util.ImmutableCollections$SetN (1,828 samples, 0.53%)</title><rect x="953.2" y="147.0" width="6.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="956.2" y="158.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (3,136 samples, 0.91%)</title><rect x="959.5" y="147.0" width="10.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="962.5" y="158.0"></text>
</g>
<g>
<title>java.lang.Object[] (3,136 samples, 0.91%)</title><rect x="959.5" y="131.0" width="10.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="962.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (4,241 samples, 1.23%)</title><rect x="970.2" y="227.0" width="14.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="973.2" y="238.0"></text>
</g>
<g>
<title>java/lang/String.substring (4,241 samples, 1.23%)</title><rect x="970.2" y="211.0" width="14.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="973.2" y="222.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,241 samples, 1.23%)</title><rect x="970.2" y="195.0" width="14.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="973.2" y="206.0"></text>
</g>
<g>
<title>java.lang.String (1,852 samples, 0.54%)</title><rect x="970.2" y="179.0" width="6.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="973.2" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,389 samples, 0.69%)</title><rect x="976.6" y="179.0" width="8.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="979.6" y="190.0"></text>
</g>
<g>
<title>byte[] (2,389 samples, 0.69%)</title><rect x="976.6" y="163.0" width="8.2" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="979.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (25,554 samples, 7.43%)</title><rect x="984.8" y="259.0" width="87.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="987.8" y="270.0">one/nio/ht..</text>
</g>
<g>
<title>one.nio.http.Request (3,084 samples, 0.90%)</title><rect x="984.8" y="243.0" width="10.5" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="987.8" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (6,301 samples, 1.83%)</title><rect x="995.3" y="243.0" width="21.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="998.3" y="254.0">o..</text>
</g>
<g>
<title>java.lang.String[] (6,300 samples, 1.83%)</title><rect x="995.3" y="227.0" width="21.6" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="998.3" y="238.0">j..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,169 samples, 4.70%)</title><rect x="1017.0" y="243.0" width="55.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1020.0" y="254.0">one/n..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (16,169 samples, 4.70%)</title><rect x="1017.0" y="227.0" width="55.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1020.0" y="238.0">one/n..</text>
</g>
<g>
<title>char[] (11,633 samples, 3.38%)</title><rect x="1017.0" y="211.0" width="39.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="1020.0" y="222.0">cha..</text>
</g>
<g>
<title>java.lang.String (1,746 samples, 0.51%)</title><rect x="1056.9" y="211.0" width="5.9" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1059.9" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,790 samples, 0.81%)</title><rect x="1062.8" y="211.0" width="9.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1065.8" y="222.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2,790 samples, 0.81%)</title><rect x="1062.8" y="195.0" width="9.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1065.8" y="206.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2,790 samples, 0.81%)</title><rect x="1062.8" y="179.0" width="9.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1065.8" y="190.0"></text>
</g>
<g>
<title>byte[] (2,790 samples, 0.81%)</title><rect x="1062.8" y="163.0" width="9.6" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1065.8" y="174.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (2,392 samples, 0.70%)</title><rect x="1072.4" y="259.0" width="8.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1075.4" y="270.0"></text>
</g>
<g>
<title>byte[] (2,392 samples, 0.70%)</title><rect x="1072.4" y="243.0" width="8.2" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="1075.4" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3,766 samples, 1.09%)</title><rect x="1080.6" y="259.0" width="12.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1083.6" y="270.0"></text>
</g>
<g>
<title>java/lang/String.substring (3,766 samples, 1.09%)</title><rect x="1080.6" y="243.0" width="12.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1083.6" y="254.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (3,766 samples, 1.09%)</title><rect x="1080.6" y="227.0" width="12.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1083.6" y="238.0"></text>
</g>
<g>
<title>java.lang.String (1,909 samples, 0.55%)</title><rect x="1080.6" y="211.0" width="6.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="1083.6" y="222.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,857 samples, 0.54%)</title><rect x="1087.2" y="211.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1090.2" y="222.0"></text>
</g>
<g>
<title>byte[] (1,857 samples, 0.54%)</title><rect x="1087.2" y="195.0" width="6.3" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1090.2" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28,126 samples, 8.18%)</title><rect x="1093.5" y="259.0" width="96.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1096.5" y="270.0">one/nio/uti..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (28,126 samples, 8.18%)</title><rect x="1093.5" y="243.0" width="96.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1096.5" y="254.0">one/nio/uti..</text>
</g>
<g>
<title>char[] (12,802 samples, 3.72%)</title><rect x="1093.5" y="227.0" width="43.9" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="1096.5" y="238.0">char[]</text>
</g>
<g>
<title>java.lang.String (5,765 samples, 1.68%)</title><rect x="1137.4" y="227.0" width="19.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1140.4" y="238.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,559 samples, 2.78%)</title><rect x="1157.2" y="227.0" width="32.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1160.2" y="238.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (9,559 samples, 2.78%)</title><rect x="1157.2" y="211.0" width="32.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1160.2" y="222.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (9,559 samples, 2.78%)</title><rect x="1157.2" y="195.0" width="32.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1160.2" y="206.0">ja..</text>
</g>
<g>
<title>byte[] (9,559 samples, 2.78%)</title><rect x="1157.2" y="179.0" width="32.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="1160.2" y="190.0">by..</text>
</g>
</g>
</svg>
