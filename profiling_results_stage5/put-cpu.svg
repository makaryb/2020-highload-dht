<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="998" onload="init(evt)" viewBox="0 0 1200 998" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="981"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="981"> </text>
<g id="frames">
<g>
<title>all (6,438 samples, 100.00%)</title><rect x="10.0" y="947.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="958.0">all</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (23 samples, 0.36%)</title><rect x="10.0" y="931.0" width="4.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="13.0" y="942.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (23 samples, 0.36%)</title><rect x="10.0" y="915.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="926.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) [clone .part.93] (23 samples, 0.36%)</title><rect x="10.0" y="899.0" width="4.2" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="910.0"></text>
</g>
<g>
<title>ObjectMonitor::EnterI(Thread*) (23 samples, 0.36%)</title><rect x="10.0" y="883.0" width="4.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="894.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (13 samples, 0.20%)</title><rect x="10.5" y="867.0" width="2.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="13.5" y="878.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.03%)</title><rect x="12.9" y="867.0" width="0.4" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="15.9" y="878.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (3 samples, 0.05%)</title><rect x="13.3" y="867.0" width="0.5" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="16.3" y="878.0"></text>
</g>
<g>
<title>[no_Java_frame] (5 samples, 0.08%)</title><rect x="14.2" y="931.0" width="0.9" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="17.2" y="942.0"></text>
</g>
<g>
<title>[not_walkable_Java] (13 samples, 0.20%)</title><rect x="15.1" y="931.0" width="2.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="18.1" y="942.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (9 samples, 0.14%)</title><rect x="15.3" y="915.0" width="1.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="18.3" y="926.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (9 samples, 0.14%)</title><rect x="15.3" y="899.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="18.3" y="910.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (5 samples, 0.08%)</title><rect x="15.3" y="883.0" width="0.9" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="18.3" y="894.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (4 samples, 0.06%)</title><rect x="15.5" y="867.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="18.5" y="878.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (4 samples, 0.06%)</title><rect x="16.2" y="883.0" width="0.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="19.2" y="894.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (3 samples, 0.05%)</title><rect x="17.0" y="915.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="20.0" y="926.0"></text>
</g>
<g>
<title>[unknown] (14 samples, 0.22%)</title><rect x="17.5" y="931.0" width="2.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="20.5" y="942.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (4 samples, 0.06%)</title><rect x="17.5" y="915.0" width="0.7" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="20.5" y="926.0"></text>
</g>
<g>
<title>pthread_cond_timedwait@@GLIBC_2.3.2 (9 samples, 0.14%)</title><rect x="18.4" y="915.0" width="1.7" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="21.4" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="19.5" y="899.0" width="0.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="22.5" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="19.5" y="883.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="22.5" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="19.7" y="867.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="22.7" y="878.0"></text>
</g>
<g>
<title>[unknown_Java] (7 samples, 0.11%)</title><rect x="20.1" y="931.0" width="1.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="23.1" y="942.0"></text>
</g>
<g>
<title>SharedRuntime::on_slowpath_allocation_exit(JavaThread*) (2 samples, 0.03%)</title><rect x="20.3" y="915.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="23.3" y="926.0"></text>
</g>
<g>
<title>__pthread_cond_signal (4 samples, 0.06%)</title><rect x="20.6" y="915.0" width="0.8" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="23.6" y="926.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="20.8" y="899.0" width="0.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="23.8" y="910.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="20.8" y="883.0" width="0.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.8" y="894.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="20.8" y="867.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="23.8" y="878.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="20.8" y="851.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="23.8" y="862.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="20.8" y="835.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="23.8" y="846.0"></text>
</g>
<g>
<title>wake_up_q (2 samples, 0.03%)</title><rect x="20.8" y="819.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="23.8" y="830.0"></text>
</g>
<g>
<title>try_to_wake_up (2 samples, 0.03%)</title><rect x="20.8" y="803.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="23.8" y="814.0"></text>
</g>
<g>
<title>__lock_text_start (2 samples, 0.03%)</title><rect x="20.8" y="787.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="23.8" y="798.0"></text>
</g>
<g>
<title>java/lang/Thread.run (4,750 samples, 73.78%)</title><rect x="21.4" y="931.0" width="870.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="24.4" y="942.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (4,750 samples, 73.78%)</title><rect x="21.4" y="915.0" width="870.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="24.4" y="926.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (4,749 samples, 73.77%)</title><rect x="21.5" y="899.0" width="870.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="24.5" y="910.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/lang/Thread.interrupted (5 samples, 0.08%)</title><rect x="24.8" y="883.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="27.8" y="894.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (5 samples, 0.08%)</title><rect x="24.8" y="867.0" width="1.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="27.8" y="878.0"></text>
</g>
<g>
<title>JVM_IsInterrupted (4 samples, 0.06%)</title><rect x="24.8" y="851.0" width="0.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="27.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,647 samples, 25.58%)</title><rect x="25.8" y="883.0" width="301.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="28.8" y="894.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/Executors$RunnableAdapter.call (1,440 samples, 22.37%)</title><rect x="26.9" y="867.0" width="263.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="29.9" y="878.0">java/util/concurrent/Executors$Runn..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (1,440 samples, 22.37%)</title><rect x="26.9" y="851.0" width="263.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="29.9" y="862.0">java/util/concurrent/FutureTask.run</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (4 samples, 0.06%)</title><rect x="27.0" y="835.0" width="0.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="30.0" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (3 samples, 0.05%)</title><rect x="27.2" y="819.0" width="0.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="30.2" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.call (1,435 samples, 22.29%)</title><rect x="27.8" y="835.0" width="263.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="30.8" y="846.0">ru/mail/polis/service/boriskin/Repl..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.lambda$getResponses$0 (1,435 samples, 22.29%)</title><rect x="27.8" y="819.0" width="263.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="30.8" y="830.0">ru/mail/polis/service/boriskin/Repl..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.proxy (1,434 samples, 22.27%)</title><rect x="28.0" y="803.0" width="262.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="31.0" y="814.0">ru/mail/polis/service/boriskin/Repl..</text>
</g>
<g>
<title>java/util/HashMap.get (11 samples, 0.17%)</title><rect x="28.0" y="787.0" width="2.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="31.0" y="798.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (11 samples, 0.17%)</title><rect x="28.0" y="771.0" width="2.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="31.0" y="782.0"></text>
</g>
<g>
<title>java/lang/String.equals (5 samples, 0.08%)</title><rect x="28.9" y="755.0" width="0.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="31.9" y="766.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.03%)</title><rect x="29.4" y="739.0" width="0.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="32.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,423 samples, 22.10%)</title><rect x="30.0" y="787.0" width="260.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="33.0" y="798.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (1,422 samples, 22.09%)</title><rect x="30.2" y="771.0" width="260.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="33.2" y="782.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (8 samples, 0.12%)</title><rect x="31.1" y="755.0" width="1.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="34.1" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (2 samples, 0.03%)</title><rect x="31.1" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="34.1" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (2 samples, 0.03%)</title><rect x="31.1" y="723.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="34.1" y="734.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="31.4" y="739.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="34.4" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (395 samples, 6.14%)</title><rect x="32.5" y="755.0" width="72.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="35.5" y="766.0">one/nio/..</text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (20 samples, 0.31%)</title><rect x="32.9" y="739.0" width="3.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="35.9" y="750.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (20 samples, 0.31%)</title><rect x="32.9" y="723.0" width="3.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="35.9" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (18 samples, 0.28%)</title><rect x="33.3" y="707.0" width="3.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="36.3" y="718.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (2 samples, 0.03%)</title><rect x="33.3" y="691.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="36.3" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (15 samples, 0.23%)</title><rect x="33.6" y="691.0" width="2.8" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="36.6" y="702.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_outside_tlab(Klass*, HeapWord*, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="34.0" y="675.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="37.0" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::mem_allocate(unsigned long, bool*) (3 samples, 0.05%)</title><rect x="34.6" y="675.0" width="0.5" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="37.6" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="34.7" y="659.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="37.7" y="670.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (2 samples, 0.03%)</title><rect x="34.7" y="643.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="37.7" y="654.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (2 samples, 0.03%)</title><rect x="34.7" y="627.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="37.7" y="638.0"></text>
</g>
<g>
<title>G1CollectedHeap::unsafe_max_tlab_alloc(Thread*) const (2 samples, 0.03%)</title><rect x="35.1" y="675.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="38.1" y="686.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (4 samples, 0.06%)</title><rect x="35.5" y="675.0" width="0.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="38.5" y="686.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="35.5" y="659.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="38.5" y="670.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="35.8" y="659.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="38.8" y="670.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (373 samples, 5.79%)</title><rect x="36.6" y="739.0" width="68.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="39.6" y="750.0">one/nio..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (26 samples, 0.40%)</title><rect x="38.8" y="723.0" width="4.7" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="41.8" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="40.4" y="707.0" width="0.4" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="43.4" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.05%)</title><rect x="41.0" y="707.0" width="0.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="44.0" y="718.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (10 samples, 0.16%)</title><rect x="41.7" y="707.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="44.7" y="718.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="41.9" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="44.9" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (6 samples, 0.09%)</title><rect x="42.4" y="691.0" width="1.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="45.4" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.06%)</title><rect x="42.8" y="675.0" width="0.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="45.8" y="686.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (4 samples, 0.06%)</title><rect x="43.5" y="723.0" width="0.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="46.5" y="734.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (3 samples, 0.05%)</title><rect x="44.3" y="723.0" width="0.5" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="47.3" y="734.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.03%)</title><rect x="44.8" y="723.0" width="0.4" height="15" fill="#ee6b6b" rx="2" ry="2"/>
<text x="47.8" y="734.0"></text>
</g>
<g>
<title>recv (326 samples, 5.06%)</title><rect x="45.2" y="723.0" width="59.7" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="48.2" y="734.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (276 samples, 4.29%)</title><rect x="54.4" y="707.0" width="50.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="57.4" y="718.0">entry..</text>
</g>
<g>
<title>do_syscall_64 (275 samples, 4.27%)</title><rect x="54.5" y="691.0" width="50.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="57.5" y="702.0">do_sy..</text>
</g>
<g>
<title>__x64_sys_recvfrom (265 samples, 4.12%)</title><rect x="56.2" y="675.0" width="48.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="59.2" y="686.0">__x6..</text>
</g>
<g>
<title>__sys_recvfrom (261 samples, 4.05%)</title><rect x="56.2" y="659.0" width="47.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="59.2" y="670.0">__sy..</text>
</g>
<g>
<title>__fdget (2 samples, 0.03%)</title><rect x="57.1" y="643.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="60.1" y="654.0"></text>
</g>
<g>
<title>fput_many (5 samples, 0.08%)</title><rect x="57.5" y="643.0" width="0.9" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="60.5" y="654.0"></text>
</g>
<g>
<title>sock_recvmsg (242 samples, 3.76%)</title><rect x="58.4" y="643.0" width="44.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="61.4" y="654.0">sock..</text>
</g>
<g>
<title>apparmor_socket_recvmsg (6 samples, 0.09%)</title><rect x="58.4" y="627.0" width="1.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="61.4" y="638.0"></text>
</g>
<g>
<title>inet6_recvmsg (231 samples, 3.59%)</title><rect x="59.5" y="627.0" width="42.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="62.5" y="638.0">inet..</text>
</g>
<g>
<title>tcp_recvmsg (228 samples, 3.54%)</title><rect x="60.0" y="611.0" width="41.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="63.0" y="622.0">tcp..</text>
</g>
<g>
<title>__kfree_skb (5 samples, 0.08%)</title><rect x="65.2" y="595.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="68.2" y="606.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.08%)</title><rect x="65.2" y="579.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="68.2" y="590.0"></text>
</g>
<g>
<title>sock_rfree (4 samples, 0.06%)</title><rect x="65.4" y="563.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="68.4" y="574.0"></text>
</g>
<g>
<title>sk_wait_data (43 samples, 0.67%)</title><rect x="66.8" y="595.0" width="7.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="69.8" y="606.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (4 samples, 0.06%)</title><rect x="67.2" y="579.0" width="0.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="70.2" y="590.0"></text>
</g>
<g>
<title>remove_wait_queue (7 samples, 0.11%)</title><rect x="68.3" y="579.0" width="1.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="71.3" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (6 samples, 0.09%)</title><rect x="68.5" y="563.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="71.5" y="574.0"></text>
</g>
<g>
<title>wait_woken (28 samples, 0.43%)</title><rect x="69.6" y="579.0" width="5.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="72.6" y="590.0"></text>
</g>
<g>
<title>schedule (2 samples, 0.03%)</title><rect x="70.5" y="563.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="73.5" y="574.0"></text>
</g>
<g>
<title>schedule_timeout (21 samples, 0.33%)</title><rect x="70.9" y="563.0" width="3.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="73.9" y="574.0"></text>
</g>
<g>
<title>__mod_timer (16 samples, 0.25%)</title><rect x="71.0" y="547.0" width="3.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="74.0" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (14 samples, 0.22%)</title><rect x="71.0" y="531.0" width="2.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="74.0" y="542.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="73.6" y="531.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="76.6" y="542.0"></text>
</g>
<g>
<title>schedule (3 samples, 0.05%)</title><rect x="74.2" y="547.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="77.2" y="558.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="74.2" y="531.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="77.2" y="542.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (76 samples, 1.18%)</title><rect x="74.7" y="595.0" width="13.9" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="77.7" y="606.0"></text>
</g>
<g>
<title>__skb_datagram_iter (75 samples, 1.16%)</title><rect x="74.9" y="579.0" width="13.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="77.9" y="590.0"></text>
</g>
<g>
<title>_copy_to_iter (3 samples, 0.05%)</title><rect x="79.8" y="563.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="82.8" y="574.0"></text>
</g>
<g>
<title>simple_copy_to_iter (45 samples, 0.70%)</title><rect x="80.4" y="563.0" width="8.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="83.4" y="574.0"></text>
</g>
<g>
<title>__check_object_size (22 samples, 0.34%)</title><rect x="80.4" y="547.0" width="4.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="83.4" y="558.0"></text>
</g>
<g>
<title>__virt_addr_valid (8 samples, 0.12%)</title><rect x="82.9" y="531.0" width="1.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="85.9" y="542.0"></text>
</g>
<g>
<title>_copy_to_iter (18 samples, 0.28%)</title><rect x="84.6" y="547.0" width="3.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="87.6" y="558.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (14 samples, 0.22%)</title><rect x="85.3" y="531.0" width="2.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="88.3" y="542.0"></text>
</g>
<g>
<title>copyout (3 samples, 0.05%)</title><rect x="88.1" y="547.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="91.1" y="558.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (63 samples, 0.98%)</title><rect x="88.6" y="595.0" width="11.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="91.6" y="606.0"></text>
</g>
<g>
<title>tcp_send_ack (59 samples, 0.92%)</title><rect x="89.4" y="579.0" width="10.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="92.4" y="590.0"></text>
</g>
<g>
<title>__tcp_send_ack.part.0 (59 samples, 0.92%)</title><rect x="89.4" y="563.0" width="10.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.4" y="574.0"></text>
</g>
<g>
<title>__alloc_skb (12 samples, 0.19%)</title><rect x="89.4" y="547.0" width="2.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="92.4" y="558.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (6 samples, 0.09%)</title><rect x="89.7" y="531.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="92.7" y="542.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.06%)</title><rect x="89.7" y="515.0" width="0.8" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="92.7" y="526.0"></text>
</g>
<g>
<title>memset_erms (2 samples, 0.03%)</title><rect x="90.5" y="515.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="93.5" y="526.0"></text>
</g>
<g>
<title>ksize (2 samples, 0.03%)</title><rect x="90.8" y="531.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="93.8" y="542.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.03%)</title><rect x="90.8" y="515.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="93.8" y="526.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (46 samples, 0.71%)</title><rect x="91.6" y="547.0" width="8.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="94.6" y="558.0"></text>
</g>
<g>
<title>ip_queue_xmit (43 samples, 0.67%)</title><rect x="92.1" y="531.0" width="7.9" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="95.1" y="542.0"></text>
</g>
<g>
<title>__ip_queue_xmit (43 samples, 0.67%)</title><rect x="92.1" y="515.0" width="7.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="95.1" y="526.0"></text>
</g>
<g>
<title>ip_local_out (41 samples, 0.64%)</title><rect x="92.3" y="499.0" width="7.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="95.3" y="510.0"></text>
</g>
<g>
<title>ip_output (39 samples, 0.61%)</title><rect x="92.5" y="483.0" width="7.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="95.5" y="494.0"></text>
</g>
<g>
<title>ip_finish_output (39 samples, 0.61%)</title><rect x="92.5" y="467.0" width="7.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="95.5" y="478.0"></text>
</g>
<g>
<title>__ip_finish_output (38 samples, 0.59%)</title><rect x="92.7" y="451.0" width="6.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="95.7" y="462.0"></text>
</g>
<g>
<title>ip_finish_output2 (36 samples, 0.56%)</title><rect x="92.8" y="435.0" width="6.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="95.8" y="446.0"></text>
</g>
<g>
<title>__local_bh_enable_ip (30 samples, 0.47%)</title><rect x="92.8" y="419.0" width="5.5" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="95.8" y="430.0"></text>
</g>
<g>
<title>do_softirq.part.0 (30 samples, 0.47%)</title><rect x="92.8" y="403.0" width="5.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="95.8" y="414.0"></text>
</g>
<g>
<title>do_softirq_own_stack (29 samples, 0.45%)</title><rect x="93.0" y="387.0" width="5.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="96.0" y="398.0"></text>
</g>
<g>
<title>__softirqentry_text_start (29 samples, 0.45%)</title><rect x="93.0" y="371.0" width="5.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="96.0" y="382.0"></text>
</g>
<g>
<title>net_rx_action (29 samples, 0.45%)</title><rect x="93.0" y="355.0" width="5.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="96.0" y="366.0"></text>
</g>
<g>
<title>process_backlog (29 samples, 0.45%)</title><rect x="93.0" y="339.0" width="5.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="96.0" y="350.0"></text>
</g>
<g>
<title>__netif_receive_skb (29 samples, 0.45%)</title><rect x="93.0" y="323.0" width="5.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="96.0" y="334.0"></text>
</g>
<g>
<title>__netif_receive_skb_one_core (29 samples, 0.45%)</title><rect x="93.0" y="307.0" width="5.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="96.0" y="318.0"></text>
</g>
<g>
<title>__netif_receive_skb_core (2 samples, 0.03%)</title><rect x="93.0" y="291.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="96.0" y="302.0"></text>
</g>
<g>
<title>ip_rcv (27 samples, 0.42%)</title><rect x="93.4" y="291.0" width="4.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="96.4" y="302.0"></text>
</g>
<g>
<title>ip_rcv_finish (27 samples, 0.42%)</title><rect x="93.4" y="275.0" width="4.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="96.4" y="286.0"></text>
</g>
<g>
<title>ip_local_deliver (24 samples, 0.37%)</title><rect x="93.8" y="259.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="96.8" y="270.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (24 samples, 0.37%)</title><rect x="93.8" y="243.0" width="4.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="96.8" y="254.0"></text>
</g>
<g>
<title>ip_protocol_deliver_rcu (21 samples, 0.33%)</title><rect x="93.8" y="227.0" width="3.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="96.8" y="238.0"></text>
</g>
<g>
<title>tcp_v4_rcv (20 samples, 0.31%)</title><rect x="93.9" y="211.0" width="3.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="96.9" y="222.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (18 samples, 0.28%)</title><rect x="94.3" y="195.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="97.3" y="206.0"></text>
</g>
<g>
<title>tcp_rcv_established (18 samples, 0.28%)</title><rect x="94.3" y="179.0" width="3.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="97.3" y="190.0"></text>
</g>
<g>
<title>__kfree_skb (6 samples, 0.09%)</title><rect x="94.5" y="163.0" width="1.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="97.5" y="174.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="94.5" y="147.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="97.5" y="158.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.03%)</title><rect x="94.5" y="131.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="97.5" y="142.0"></text>
</g>
<g>
<title>skb_release_all (4 samples, 0.06%)</title><rect x="94.9" y="147.0" width="0.7" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="97.9" y="158.0"></text>
</g>
<g>
<title>skb_release_head_state (3 samples, 0.05%)</title><rect x="95.0" y="131.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="98.0" y="142.0"></text>
</g>
<g>
<title>dst_release (3 samples, 0.05%)</title><rect x="95.0" y="115.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="98.0" y="126.0"></text>
</g>
<g>
<title>tcp_ack (10 samples, 0.16%)</title><rect x="95.8" y="163.0" width="1.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="98.8" y="174.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (7 samples, 0.11%)</title><rect x="96.3" y="147.0" width="1.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="99.3" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (7 samples, 0.11%)</title><rect x="96.3" y="131.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="99.3" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (2 samples, 0.03%)</title><rect x="96.3" y="115.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="99.3" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (2 samples, 0.03%)</title><rect x="96.3" y="99.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="99.3" y="110.0"></text>
</g>
<g>
<title>skb_release_all (5 samples, 0.08%)</title><rect x="96.7" y="115.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="99.7" y="126.0"></text>
</g>
<g>
<title>skb_release_data (4 samples, 0.06%)</title><rect x="96.9" y="99.0" width="0.7" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="99.9" y="110.0"></text>
</g>
<g>
<title>skb_free_head (3 samples, 0.05%)</title><rect x="97.1" y="83.0" width="0.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="100.1" y="94.0"></text>
</g>
<g>
<title>kfree (3 samples, 0.05%)</title><rect x="97.1" y="67.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="100.1" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="97.2" y="51.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="100.2" y="62.0"></text>
</g>
<g>
<title>raw_local_deliver (3 samples, 0.05%)</title><rect x="97.6" y="227.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="100.6" y="238.0"></text>
</g>
<g>
<title>dev_queue_xmit (6 samples, 0.09%)</title><rect x="98.3" y="419.0" width="1.1" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="101.3" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (6 samples, 0.09%)</title><rect x="98.3" y="403.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="101.3" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (3 samples, 0.05%)</title><rect x="98.5" y="387.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="101.5" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (2 samples, 0.03%)</title><rect x="98.7" y="371.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="101.7" y="382.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (6 samples, 0.09%)</title><rect x="100.2" y="595.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="103.2" y="606.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (5 samples, 0.08%)</title><rect x="100.4" y="579.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="103.4" y="590.0"></text>
</g>
<g>
<title>read_tsc (4 samples, 0.06%)</title><rect x="100.5" y="563.0" width="0.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="103.5" y="574.0"></text>
</g>
<g>
<title>wait_woken (2 samples, 0.03%)</title><rect x="101.5" y="595.0" width="0.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="104.5" y="606.0"></text>
</g>
<g>
<title>security_socket_recvmsg (4 samples, 0.06%)</title><rect x="101.8" y="627.0" width="0.8" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="104.8" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (2 samples, 0.03%)</title><rect x="102.2" y="611.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="105.2" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (2 samples, 0.03%)</title><rect x="102.2" y="595.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="105.2" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (7 samples, 0.11%)</title><rect x="102.7" y="643.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="105.7" y="654.0"></text>
</g>
<g>
<title>__fdget (4 samples, 0.06%)</title><rect x="102.7" y="627.0" width="0.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="105.7" y="638.0"></text>
</g>
<g>
<title>__fget_light (4 samples, 0.06%)</title><rect x="102.7" y="611.0" width="0.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="105.7" y="622.0"></text>
</g>
<g>
<title>__fget (4 samples, 0.06%)</title><rect x="102.7" y="595.0" width="0.8" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="105.7" y="606.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="103.5" y="627.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="106.5" y="638.0"></text>
</g>
<g>
<title>import_single_range (4 samples, 0.06%)</title><rect x="104.0" y="659.0" width="0.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="107.0" y="670.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (81 samples, 1.26%)</title><rect x="104.9" y="755.0" width="14.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="107.9" y="766.0"></text>
</g>
<g>
<title>java/lang/String.length (3 samples, 0.05%)</title><rect x="106.4" y="739.0" width="0.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="109.4" y="750.0"></text>
</g>
<g>
<title>java/lang/String.coder (3 samples, 0.05%)</title><rect x="106.4" y="723.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="109.4" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (45 samples, 0.70%)</title><rect x="107.0" y="739.0" width="8.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="110.0" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28 samples, 0.43%)</title><rect x="110.1" y="723.0" width="5.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="113.1" y="734.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (28 samples, 0.43%)</title><rect x="110.1" y="707.0" width="5.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="113.1" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (5 samples, 0.08%)</title><rect x="115.2" y="739.0" width="0.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.2" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="115.8" y="723.0" width="0.3" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="118.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (14 samples, 0.22%)</title><rect x="116.3" y="739.0" width="2.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="119.3" y="750.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (6 samples, 0.09%)</title><rect x="117.6" y="723.0" width="1.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="120.6" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (6 samples, 0.09%)</title><rect x="117.6" y="707.0" width="1.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.6" y="718.0"></text>
</g>
<g>
<title>one/nio/http/Response.setBody (4 samples, 0.06%)</title><rect x="119.1" y="739.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="122.1" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (50 samples, 0.78%)</title><rect x="119.8" y="755.0" width="9.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="122.8" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="125.5" y="739.0" width="0.3" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="128.5" y="750.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (17 samples, 0.26%)</title><rect x="125.8" y="739.0" width="3.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="128.8" y="750.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (17 samples, 0.26%)</title><rect x="125.8" y="723.0" width="3.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="128.8" y="734.0"></text>
</g>
<g>
<title>java/lang/String.charAt (17 samples, 0.26%)</title><rect x="125.8" y="707.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="128.8" y="718.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="128.6" y="691.0" width="0.4" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="131.6" y="702.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (10 samples, 0.16%)</title><rect x="129.0" y="755.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="132.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.12%)</title><rect x="129.3" y="739.0" width="1.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="132.3" y="750.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.12%)</title><rect x="129.3" y="723.0" width="1.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="132.3" y="734.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.setTimeout (185 samples, 2.87%)</title><rect x="130.8" y="755.0" width="33.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="133.8" y="766.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_setTimeout (3 samples, 0.05%)</title><rect x="131.5" y="739.0" width="0.6" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="134.5" y="750.0"></text>
</g>
<g>
<title>setsockopt (176 samples, 2.73%)</title><rect x="132.1" y="739.0" width="32.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="135.1" y="750.0">se..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (106 samples, 1.65%)</title><rect x="144.9" y="723.0" width="19.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="147.9" y="734.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (6 samples, 0.09%)</title><rect x="144.9" y="707.0" width="1.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="147.9" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (100 samples, 1.55%)</title><rect x="146.0" y="707.0" width="18.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="149.0" y="718.0"></text>
</g>
<g>
<title>__x64_sys_setsockopt (76 samples, 1.18%)</title><rect x="150.4" y="691.0" width="13.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="153.4" y="702.0"></text>
</g>
<g>
<title>__sys_setsockopt (74 samples, 1.15%)</title><rect x="150.4" y="675.0" width="13.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="153.4" y="686.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_setsockopt (2 samples, 0.03%)</title><rect x="151.7" y="659.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="154.7" y="670.0"></text>
</g>
<g>
<title>__get_user_4 (3 samples, 0.05%)</title><rect x="152.0" y="659.0" width="0.6" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="155.0" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (4 samples, 0.06%)</title><rect x="152.6" y="659.0" width="0.7" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="155.6" y="670.0"></text>
</g>
<g>
<title>bpf_prog_array_is_empty (3 samples, 0.05%)</title><rect x="153.3" y="659.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="156.3" y="670.0"></text>
</g>
<g>
<title>fput_many (2 samples, 0.03%)</title><rect x="154.1" y="659.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="157.1" y="670.0"></text>
</g>
<g>
<title>release_sock (4 samples, 0.06%)</title><rect x="154.4" y="659.0" width="0.8" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="157.4" y="670.0"></text>
</g>
<g>
<title>security_socket_setsockopt (8 samples, 0.12%)</title><rect x="155.2" y="659.0" width="1.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="158.2" y="670.0"></text>
</g>
<g>
<title>apparmor_socket_setsockopt (7 samples, 0.11%)</title><rect x="155.3" y="643.0" width="1.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="158.3" y="654.0"></text>
</g>
<g>
<title>aa_sk_perm (7 samples, 0.11%)</title><rect x="155.3" y="627.0" width="1.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="158.3" y="638.0"></text>
</g>
<g>
<title>sock_setsockopt (23 samples, 0.36%)</title><rect x="156.6" y="659.0" width="4.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="159.6" y="670.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.08%)</title><rect x="157.4" y="643.0" width="0.9" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="160.4" y="654.0"></text>
</g>
<g>
<title>lock_sock_nested (2 samples, 0.03%)</title><rect x="158.3" y="643.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="161.3" y="654.0"></text>
</g>
<g>
<title>release_sock (6 samples, 0.09%)</title><rect x="158.6" y="643.0" width="1.1" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="161.6" y="654.0"></text>
</g>
<g>
<title>tcp_release_cb (3 samples, 0.05%)</title><rect x="159.2" y="627.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="162.2" y="638.0"></text>
</g>
<g>
<title>sock_set_timeout (5 samples, 0.08%)</title><rect x="159.7" y="643.0" width="1.0" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="162.7" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (17 samples, 0.26%)</title><rect x="160.8" y="659.0" width="3.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="163.8" y="670.0"></text>
</g>
<g>
<title>__fdget (13 samples, 0.20%)</title><rect x="161.0" y="643.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="164.0" y="654.0"></text>
</g>
<g>
<title>__fget_light (13 samples, 0.20%)</title><rect x="161.0" y="627.0" width="2.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="164.0" y="638.0"></text>
</g>
<g>
<title>__fget (13 samples, 0.20%)</title><rect x="161.0" y="611.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="164.0" y="622.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="163.4" y="643.0" width="0.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="166.4" y="654.0"></text>
</g>
<g>
<title>setsockopt@plt (2 samples, 0.03%)</title><rect x="164.3" y="739.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="167.3" y="750.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.writeFully (675 samples, 10.48%)</title><rect x="164.7" y="755.0" width="123.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="167.7" y="766.0">one/nio/net/Nat..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_writeFully (22 samples, 0.34%)</title><rect x="165.2" y="739.0" width="4.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="168.2" y="750.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (13 samples, 0.20%)</title><rect x="166.7" y="723.0" width="2.4" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="169.7" y="734.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="167.4" y="707.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="170.4" y="718.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (5 samples, 0.08%)</title><rect x="168.2" y="707.0" width="0.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="171.2" y="718.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (4 samples, 0.06%)</title><rect x="168.4" y="691.0" width="0.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="171.4" y="702.0"></text>
</g>
<g>
<title>__send (646 samples, 10.03%)</title><rect x="169.6" y="739.0" width="118.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="172.6" y="750.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (605 samples, 9.40%)</title><rect x="177.2" y="723.0" width="110.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="180.2" y="734.0">entry_SYSCALL..</text>
</g>
<g>
<title>__x64_sys_sendto (5 samples, 0.08%)</title><rect x="177.2" y="707.0" width="0.9" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="180.2" y="718.0"></text>
</g>
<g>
<title>do_syscall_64 (600 samples, 9.32%)</title><rect x="178.1" y="707.0" width="109.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="181.1" y="718.0">do_syscall_64</text>
</g>
<g>
<title>__sys_sendto (2 samples, 0.03%)</title><rect x="180.5" y="691.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="183.5" y="702.0"></text>
</g>
<g>
<title>__x64_sys_sendto (583 samples, 9.06%)</title><rect x="180.8" y="691.0" width="106.9" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="183.8" y="702.0">__x64_sys_sen..</text>
</g>
<g>
<title>__sys_sendto (583 samples, 9.06%)</title><rect x="180.8" y="675.0" width="106.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="183.8" y="686.0">__sys_sendto</text>
</g>
<g>
<title>inet6_sendmsg (2 samples, 0.03%)</title><rect x="181.2" y="659.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="184.2" y="670.0"></text>
</g>
<g>
<title>sock_sendmsg (577 samples, 8.96%)</title><rect x="181.6" y="659.0" width="105.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="184.6" y="670.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (3 samples, 0.05%)</title><rect x="181.6" y="643.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="184.6" y="654.0"></text>
</g>
<g>
<title>inet6_sendmsg (571 samples, 8.87%)</title><rect x="182.1" y="643.0" width="104.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="185.1" y="654.0">inet6_sendmsg</text>
</g>
<g>
<title>release_sock (2 samples, 0.03%)</title><rect x="182.3" y="627.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="185.3" y="638.0"></text>
</g>
<g>
<title>tcp_sendmsg (568 samples, 8.82%)</title><rect x="182.7" y="627.0" width="104.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="185.7" y="638.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (5 samples, 0.08%)</title><rect x="182.8" y="611.0" width="1.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="185.8" y="622.0"></text>
</g>
<g>
<title>tcp_release_cb (2 samples, 0.03%)</title><rect x="184.3" y="611.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="187.3" y="622.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (552 samples, 8.57%)</title><rect x="184.7" y="611.0" width="101.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="187.7" y="622.0">tcp_sendmsg_..</text>
</g>
<g>
<title>__check_object_size (2 samples, 0.03%)</title><rect x="186.3" y="595.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="189.3" y="606.0"></text>
</g>
<g>
<title>_copy_from_iter_full (9 samples, 0.14%)</title><rect x="187.1" y="595.0" width="1.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="190.1" y="606.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (6 samples, 0.09%)</title><rect x="187.1" y="579.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="190.1" y="590.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.05%)</title><rect x="188.2" y="579.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="191.2" y="590.0"></text>
</g>
<g>
<title>copyin (2 samples, 0.03%)</title><rect x="188.7" y="595.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="191.7" y="606.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (31 samples, 0.48%)</title><rect x="189.4" y="595.0" width="5.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="192.4" y="606.0"></text>
</g>
<g>
<title>__alloc_skb (31 samples, 0.48%)</title><rect x="189.4" y="579.0" width="5.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="192.4" y="590.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (7 samples, 0.11%)</title><rect x="190.4" y="563.0" width="1.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="193.4" y="574.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (4 samples, 0.06%)</title><rect x="190.4" y="547.0" width="0.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="193.4" y="558.0"></text>
</g>
<g>
<title>memset_erms (2 samples, 0.03%)</title><rect x="191.3" y="547.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="194.3" y="558.0"></text>
</g>
<g>
<title>__ksize (2 samples, 0.03%)</title><rect x="191.6" y="563.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="194.6" y="574.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (8 samples, 0.12%)</title><rect x="192.0" y="563.0" width="1.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="195.0" y="574.0"></text>
</g>
<g>
<title>ksize (7 samples, 0.11%)</title><rect x="193.5" y="563.0" width="1.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="196.5" y="574.0"></text>
</g>
<g>
<title>__ksize (7 samples, 0.11%)</title><rect x="193.5" y="547.0" width="1.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="196.5" y="558.0"></text>
</g>
<g>
<title>memset_erms (2 samples, 0.03%)</title><rect x="194.8" y="563.0" width="0.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="197.8" y="574.0"></text>
</g>
<g>
<title>tcp_push (481 samples, 7.47%)</title><rect x="195.5" y="595.0" width="88.1" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="198.5" y="606.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (481 samples, 7.47%)</title><rect x="195.5" y="579.0" width="88.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="198.5" y="590.0">__tcp_push..</text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="195.5" y="563.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="198.5" y="574.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (2 samples, 0.03%)</title><rect x="195.9" y="563.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="198.9" y="574.0"></text>
</g>
<g>
<title>tcp_write_xmit (475 samples, 7.38%)</title><rect x="196.6" y="563.0" width="87.0" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="199.6" y="574.0">tcp_write_..</text>
</g>
<g>
<title>__tcp_transmit_skb (430 samples, 6.68%)</title><rect x="199.3" y="547.0" width="78.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="202.3" y="558.0">__tcp_tra..</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="202.5" y="531.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="205.5" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (401 samples, 6.23%)</title><rect x="203.0" y="531.0" width="73.5" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="206.0" y="542.0">ip_queue..</text>
</g>
<g>
<title>__ip_queue_xmit (395 samples, 6.14%)</title><rect x="203.2" y="515.0" width="72.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="206.2" y="526.0">__ip_que..</text>
</g>
<g>
<title>__sk_dst_check (2 samples, 0.03%)</title><rect x="203.6" y="499.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="206.6" y="510.0"></text>
</g>
<g>
<title>ip_local_out (388 samples, 6.03%)</title><rect x="203.9" y="499.0" width="71.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="206.9" y="510.0">ip_local..</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="203.9" y="483.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="206.9" y="494.0"></text>
</g>
<g>
<title>ip_output (385 samples, 5.98%)</title><rect x="204.5" y="483.0" width="70.5" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="207.5" y="494.0">ip_output</text>
</g>
<g>
<title>ip_finish_output (383 samples, 5.95%)</title><rect x="204.8" y="467.0" width="70.2" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="207.8" y="478.0">ip_finis..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="205.0" y="451.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="208.0" y="462.0"></text>
</g>
<g>
<title>__ip_finish_output (378 samples, 5.87%)</title><rect x="205.4" y="451.0" width="69.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="208.4" y="462.0">__ip_fi..</text>
</g>
<g>
<title>ip_finish_output2 (377 samples, 5.86%)</title><rect x="205.6" y="435.0" width="69.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="208.6" y="446.0">ip_fini..</text>
</g>
<g>
<title>__local_bh_enable_ip (327 samples, 5.08%)</title><rect x="207.6" y="419.0" width="59.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="210.6" y="430.0">__loca..</text>
</g>
<g>
<title>do_softirq.part.0 (326 samples, 5.06%)</title><rect x="207.8" y="403.0" width="59.7" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="210.8" y="414.0">do_sof..</text>
</g>
<g>
<title>do_softirq_own_stack (325 samples, 5.05%)</title><rect x="207.9" y="387.0" width="59.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="210.9" y="398.0">do_sof..</text>
</g>
<g>
<title>__softirqentry_text_start (323 samples, 5.02%)</title><rect x="207.9" y="371.0" width="59.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="210.9" y="382.0">__soft..</text>
</g>
<g>
<title>net_rx_action (314 samples, 4.88%)</title><rect x="209.2" y="355.0" width="57.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="212.2" y="366.0">net_rx..</text>
</g>
<g>
<title>process_backlog (312 samples, 4.85%)</title><rect x="209.6" y="339.0" width="57.2" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="212.6" y="350.0">proces..</text>
</g>
<g>
<title>__netif_receive_skb (309 samples, 4.80%)</title><rect x="210.1" y="323.0" width="56.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="213.1" y="334.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (308 samples, 4.78%)</title><rect x="210.3" y="307.0" width="56.5" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="213.3" y="318.0">__neti..</text>
</g>
<g>
<title>__netif_receive_skb_core (14 samples, 0.22%)</title><rect x="210.7" y="291.0" width="2.6" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="213.7" y="302.0"></text>
</g>
<g>
<title>ip_rcv (290 samples, 4.50%)</title><rect x="213.3" y="291.0" width="53.1" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="216.3" y="302.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.05%)</title><rect x="214.0" y="275.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="217.0" y="286.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (4 samples, 0.06%)</title><rect x="214.5" y="275.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="217.5" y="286.0"></text>
</g>
<g>
<title>ip_rcv_finish (276 samples, 4.29%)</title><rect x="215.3" y="275.0" width="50.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="218.3" y="286.0">ip_rc..</text>
</g>
<g>
<title>ip_local_deliver (269 samples, 4.18%)</title><rect x="215.5" y="259.0" width="49.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="218.5" y="270.0">ip_lo..</text>
</g>
<g>
<title>ip_local_deliver_finish (268 samples, 4.16%)</title><rect x="215.5" y="243.0" width="49.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="218.5" y="254.0">ip_lo..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (267 samples, 4.15%)</title><rect x="215.5" y="227.0" width="48.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="218.5" y="238.0">ip_p..</text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="216.2" y="211.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="219.2" y="222.0"></text>
</g>
<g>
<title>tcp_v4_rcv (261 samples, 4.05%)</title><rect x="216.6" y="211.0" width="47.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="219.6" y="222.0">tcp_..</text>
</g>
<g>
<title>__inet_lookup_established (10 samples, 0.16%)</title><rect x="218.6" y="195.0" width="1.8" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="221.6" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (6 samples, 0.09%)</title><rect x="220.6" y="195.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="223.6" y="206.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="220.8" y="179.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="223.8" y="190.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="221.3" y="179.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="224.3" y="190.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (232 samples, 3.60%)</title><rect x="221.9" y="195.0" width="42.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="224.9" y="206.0">tcp_..</text>
</g>
<g>
<title>tcp_check_space (2 samples, 0.03%)</title><rect x="222.1" y="179.0" width="0.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="225.1" y="190.0"></text>
</g>
<g>
<title>tcp_data_ready (3 samples, 0.05%)</title><rect x="222.4" y="179.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="225.4" y="190.0"></text>
</g>
<g>
<title>tcp_rcv_established (225 samples, 3.49%)</title><rect x="223.2" y="179.0" width="41.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="226.2" y="190.0">tcp..</text>
</g>
<g>
<title>__tcp_ack_snd_check (4 samples, 0.06%)</title><rect x="223.9" y="163.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="226.9" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (4 samples, 0.06%)</title><rect x="223.9" y="147.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="226.9" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (3 samples, 0.05%)</title><rect x="224.1" y="131.0" width="0.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="227.1" y="142.0"></text>
</g>
<g>
<title>mod_timer (3 samples, 0.05%)</title><rect x="224.1" y="115.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="227.1" y="126.0"></text>
</g>
<g>
<title>sock_def_readable (3 samples, 0.05%)</title><rect x="224.8" y="163.0" width="0.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="227.8" y="174.0"></text>
</g>
<g>
<title>tcp_ack (50 samples, 0.78%)</title><rect x="225.4" y="163.0" width="9.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="228.4" y="174.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (27 samples, 0.42%)</title><rect x="228.3" y="147.0" width="4.9" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="231.3" y="158.0"></text>
</g>
<g>
<title>__kfree_skb (16 samples, 0.25%)</title><rect x="229.4" y="131.0" width="2.9" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="232.4" y="142.0"></text>
</g>
<g>
<title>kfree_skbmem (5 samples, 0.08%)</title><rect x="229.4" y="115.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="232.4" y="126.0"></text>
</g>
<g>
<title>kmem_cache_free (4 samples, 0.06%)</title><rect x="229.6" y="99.0" width="0.7" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="232.6" y="110.0"></text>
</g>
<g>
<title>skb_release_all (11 samples, 0.17%)</title><rect x="230.3" y="115.0" width="2.0" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="233.3" y="126.0"></text>
</g>
<g>
<title>skb_release_data (11 samples, 0.17%)</title><rect x="230.3" y="99.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="233.3" y="110.0"></text>
</g>
<g>
<title>skb_free_head (6 samples, 0.09%)</title><rect x="231.2" y="83.0" width="1.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="234.2" y="94.0"></text>
</g>
<g>
<title>kfree (6 samples, 0.09%)</title><rect x="231.2" y="67.0" width="1.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="234.2" y="78.0"></text>
</g>
<g>
<title>__slab_free (2 samples, 0.03%)</title><rect x="232.0" y="51.0" width="0.3" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="235.0" y="62.0"></text>
</g>
<g>
<title>bictcp_acked (2 samples, 0.03%)</title><rect x="232.3" y="131.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="235.3" y="142.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="233.2" y="147.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="236.2" y="158.0"></text>
</g>
<g>
<title>tcp_rack_advance (2 samples, 0.03%)</title><rect x="233.6" y="147.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="236.6" y="158.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (3 samples, 0.05%)</title><rect x="234.0" y="147.0" width="0.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="237.0" y="158.0"></text>
</g>
<g>
<title>tcp_data_ready (155 samples, 2.41%)</title><rect x="234.5" y="163.0" width="28.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="237.5" y="174.0">tc..</text>
</g>
<g>
<title>sock_def_readable (155 samples, 2.41%)</title><rect x="234.5" y="147.0" width="28.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="237.5" y="158.0">so..</text>
</g>
<g>
<title>__wake_up_sync_key (152 samples, 2.36%)</title><rect x="235.1" y="131.0" width="27.8" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="238.1" y="142.0">_..</text>
</g>
<g>
<title>__wake_up_common_lock (152 samples, 2.36%)</title><rect x="235.1" y="115.0" width="27.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="238.1" y="126.0">_..</text>
</g>
<g>
<title>__lock_text_start (150 samples, 2.33%)</title><rect x="235.3" y="99.0" width="27.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="238.3" y="110.0">_..</text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="262.9" y="163.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="265.9" y="174.0"></text>
</g>
<g>
<title>tcp_queue_rcv (3 samples, 0.05%)</title><rect x="263.5" y="163.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="266.5" y="174.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (2 samples, 0.03%)</title><rect x="264.0" y="163.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="267.0" y="174.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (3 samples, 0.05%)</title><rect x="264.8" y="259.0" width="0.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="267.8" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3 samples, 0.05%)</title><rect x="265.3" y="259.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="268.3" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (3 samples, 0.05%)</title><rect x="265.9" y="275.0" width="0.5" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="268.9" y="286.0"></text>
</g>
<g>
<title>process_backlog (2 samples, 0.03%)</title><rect x="266.8" y="355.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="269.8" y="366.0"></text>
</g>
<g>
<title>net_rx_action (2 samples, 0.03%)</title><rect x="267.2" y="371.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="270.2" y="382.0"></text>
</g>
<g>
<title>dev_queue_xmit (39 samples, 0.61%)</title><rect x="267.5" y="419.0" width="7.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="270.5" y="430.0"></text>
</g>
<g>
<title>__dev_queue_xmit (37 samples, 0.57%)</title><rect x="267.5" y="403.0" width="6.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="270.5" y="414.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (23 samples, 0.36%)</title><rect x="269.2" y="387.0" width="4.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="272.2" y="398.0"></text>
</g>
<g>
<title>loopback_xmit (16 samples, 0.25%)</title><rect x="269.7" y="371.0" width="2.9" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="272.7" y="382.0"></text>
</g>
<g>
<title>eth_type_trans (4 samples, 0.06%)</title><rect x="270.3" y="355.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="273.3" y="366.0"></text>
</g>
<g>
<title>netif_rx (6 samples, 0.09%)</title><rect x="271.0" y="355.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="274.0" y="366.0"></text>
</g>
<g>
<title>netif_rx_internal (6 samples, 0.09%)</title><rect x="271.0" y="339.0" width="1.1" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="274.0" y="350.0"></text>
</g>
<g>
<title>enqueue_to_backlog (5 samples, 0.08%)</title><rect x="271.2" y="323.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="274.2" y="334.0"></text>
</g>
<g>
<title>sk_free (2 samples, 0.03%)</title><rect x="272.3" y="355.0" width="0.3" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="275.3" y="366.0"></text>
</g>
<g>
<title>skb_clone_tx_timestamp (2 samples, 0.03%)</title><rect x="272.8" y="371.0" width="0.4" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="275.8" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (4 samples, 0.06%)</title><rect x="273.6" y="387.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="276.6" y="398.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.03%)</title><rect x="273.9" y="371.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="276.9" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.03%)</title><rect x="274.3" y="403.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="277.3" y="414.0"></text>
</g>
<g>
<title>ipv4_dst_check (2 samples, 0.03%)</title><rect x="275.2" y="499.0" width="0.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="278.2" y="510.0"></text>
</g>
<g>
<title>__sk_dst_check (3 samples, 0.05%)</title><rect x="275.6" y="515.0" width="0.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="278.6" y="526.0"></text>
</g>
<g>
<title>skb_clone (4 samples, 0.06%)</title><rect x="276.5" y="531.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="279.5" y="542.0"></text>
</g>
<g>
<title>__skb_clone (3 samples, 0.05%)</title><rect x="276.7" y="515.0" width="0.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="279.7" y="526.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="277.8" y="531.0" width="0.3" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="280.8" y="542.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.03%)</title><rect x="277.8" y="515.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="280.8" y="526.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (2 samples, 0.03%)</title><rect x="278.1" y="547.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="281.1" y="558.0"></text>
</g>
<g>
<title>ktime_get (2 samples, 0.03%)</title><rect x="278.7" y="547.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="281.7" y="558.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (10 samples, 0.16%)</title><rect x="279.4" y="547.0" width="1.9" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="282.4" y="558.0"></text>
</g>
<g>
<title>tcp_rearm_rto (3 samples, 0.05%)</title><rect x="280.7" y="531.0" width="0.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="283.7" y="542.0"></text>
</g>
<g>
<title>tcp_options_write (2 samples, 0.03%)</title><rect x="281.4" y="547.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="284.4" y="558.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (3 samples, 0.05%)</title><rect x="282.2" y="547.0" width="0.5" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="285.2" y="558.0"></text>
</g>
<g>
<title>tcp_update_skb_after_send (3 samples, 0.05%)</title><rect x="282.7" y="547.0" width="0.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="285.7" y="558.0"></text>
</g>
<g>
<title>tcp_v4_send_check (2 samples, 0.03%)</title><rect x="283.3" y="547.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="286.3" y="558.0"></text>
</g>
<g>
<title>tcp_send_mss (12 samples, 0.19%)</title><rect x="283.6" y="595.0" width="2.2" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="286.6" y="606.0"></text>
</g>
<g>
<title>ipv4_mtu (4 samples, 0.06%)</title><rect x="283.8" y="579.0" width="0.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="286.8" y="590.0"></text>
</g>
<g>
<title>tcp_current_mss (7 samples, 0.11%)</title><rect x="284.6" y="579.0" width="1.2" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="287.6" y="590.0"></text>
</g>
<g>
<title>tcp_established_options (2 samples, 0.03%)</title><rect x="285.5" y="563.0" width="0.3" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="288.5" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="285.8" y="611.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="288.8" y="622.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (3 samples, 0.05%)</title><rect x="286.2" y="611.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="289.2" y="622.0"></text>
</g>
<g>
<title>security_socket_sendmsg (2 samples, 0.03%)</title><rect x="286.8" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="289.8" y="654.0"></text>
</g>
<g>
<title>sockfd_lookup_light (2 samples, 0.03%)</title><rect x="287.3" y="659.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="290.3" y="670.0"></text>
</g>
<g>
<title>exit_to_usermode_loop (2 samples, 0.03%)</title><rect x="287.7" y="691.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="290.7" y="702.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.borrowObject (9 samples, 0.14%)</title><rect x="288.4" y="755.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="291.4" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.pollFirst (5 samples, 0.08%)</title><rect x="289.1" y="739.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="292.1" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.unlinkFirst (4 samples, 0.06%)</title><rect x="289.3" y="723.0" width="0.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="292.3" y="734.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (4 samples, 0.06%)</title><rect x="290.1" y="755.0" width="0.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.1" y="766.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (2 samples, 0.03%)</title><rect x="290.4" y="739.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="293.4" y="750.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (2 samples, 0.03%)</title><rect x="290.4" y="723.0" width="0.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="293.4" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.set (172 samples, 2.67%)</title><rect x="290.8" y="867.0" width="31.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="293.8" y="878.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/FutureTask.finishCompletion (171 samples, 2.66%)</title><rect x="291.0" y="851.0" width="31.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="294.0" y="862.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService$QueueingFuture.done (170 samples, 2.64%)</title><rect x="291.2" y="835.0" width="31.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="294.2" y="846.0">ja..</text>
</g>
<g>
<title>java/util/AbstractQueue.add (169 samples, 2.63%)</title><rect x="291.3" y="819.0" width="31.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.3" y="830.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (169 samples, 2.63%)</title><rect x="291.3" y="803.0" width="31.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.3" y="814.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (155 samples, 2.41%)</title><rect x="291.5" y="787.0" width="28.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="294.5" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="291.5" y="771.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.5" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="291.5" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="294.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="291.5" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="294.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="291.5" y="723.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="294.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="291.5" y="707.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="294.5" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="291.5" y="691.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.5" y="702.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="291.5" y="675.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="294.5" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (153 samples, 2.38%)</title><rect x="291.9" y="771.0" width="28.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="294.9" y="782.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (153 samples, 2.38%)</title><rect x="291.9" y="755.0" width="28.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="294.9" y="766.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (153 samples, 2.38%)</title><rect x="291.9" y="739.0" width="28.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="294.9" y="750.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (153 samples, 2.38%)</title><rect x="291.9" y="723.0" width="28.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="294.9" y="734.0">ja..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (144 samples, 2.24%)</title><rect x="293.5" y="707.0" width="26.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="296.5" y="718.0">j..</text>
</g>
<g>
<title>Unsafe_Unpark (29 samples, 0.45%)</title><rect x="294.3" y="691.0" width="5.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="297.3" y="702.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (3 samples, 0.05%)</title><rect x="295.6" y="675.0" width="0.5" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="298.6" y="686.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.03%)</title><rect x="296.1" y="675.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="299.1" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (2 samples, 0.03%)</title><rect x="296.5" y="675.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="299.5" y="686.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.06%)</title><rect x="296.8" y="675.0" width="0.8" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="299.8" y="686.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="297.6" y="675.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="300.6" y="686.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.05%)</title><rect x="298.1" y="675.0" width="0.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="301.1" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.08%)</title><rect x="298.7" y="675.0" width="0.9" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="301.7" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (109 samples, 1.69%)</title><rect x="299.8" y="691.0" width="20.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="302.8" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (86 samples, 1.34%)</title><rect x="304.0" y="675.0" width="15.8" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="307.0" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (85 samples, 1.32%)</title><rect x="304.2" y="659.0" width="15.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="307.2" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (73 samples, 1.13%)</title><rect x="305.8" y="643.0" width="13.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="308.8" y="654.0"></text>
</g>
<g>
<title>do_futex (73 samples, 1.13%)</title><rect x="305.8" y="627.0" width="13.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="308.8" y="638.0"></text>
</g>
<g>
<title>futex_wake (72 samples, 1.12%)</title><rect x="306.0" y="611.0" width="13.2" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="309.0" y="622.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="306.6" y="595.0" width="0.3" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="309.6" y="606.0"></text>
</g>
<g>
<title>mark_wake_futex (7 samples, 0.11%)</title><rect x="306.9" y="595.0" width="1.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="309.9" y="606.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.03%)</title><rect x="307.8" y="579.0" width="0.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="310.8" y="590.0"></text>
</g>
<g>
<title>wake_up_q (60 samples, 0.93%)</title><rect x="308.2" y="595.0" width="11.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="311.2" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (60 samples, 0.93%)</title><rect x="308.2" y="579.0" width="11.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="311.2" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (59 samples, 0.92%)</title><rect x="308.4" y="563.0" width="10.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="311.4" y="574.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="319.2" y="643.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="322.2" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (7 samples, 0.11%)</title><rect x="319.9" y="787.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="322.9" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (6 samples, 0.09%)</title><rect x="320.1" y="771.0" width="1.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="323.1" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="320.3" y="755.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="320.3" y="739.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="320.3" y="723.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="323.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="320.3" y="707.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="323.3" y="718.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="320.3" y="691.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="323.3" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$NonfairSync.tryAcquire (2 samples, 0.03%)</title><rect x="320.9" y="755.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="323.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.nonfairTryAcquire (2 samples, 0.03%)</title><rect x="320.9" y="739.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="323.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (2 samples, 0.03%)</title><rect x="320.9" y="723.0" width="0.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="323.9" y="734.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (2 samples, 0.03%)</title><rect x="320.9" y="707.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="323.9" y="718.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleInts$FieldInstanceReadWrite.compareAndSet (2 samples, 0.03%)</title><rect x="320.9" y="691.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="323.9" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (6 samples, 0.09%)</title><rect x="321.2" y="787.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="324.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (6 samples, 0.09%)</title><rect x="321.2" y="771.0" width="1.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="324.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (6 samples, 0.09%)</title><rect x="321.2" y="755.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="324.2" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (5 samples, 0.08%)</title><rect x="321.4" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="324.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker$$Lambda$72/823475275.call (29 samples, 0.45%)</title><rect x="322.3" y="867.0" width="5.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="325.3" y="878.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.lambda$getResponses$0 (29 samples, 0.45%)</title><rect x="322.3" y="851.0" width="5.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="325.3" y="862.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.proxy (29 samples, 0.45%)</title><rect x="322.3" y="835.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="325.3" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (7 samples, 0.11%)</title><rect x="322.5" y="819.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="325.5" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (7 samples, 0.11%)</title><rect x="322.5" y="803.0" width="1.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="325.5" y="814.0"></text>
</g>
<g>
<title>java/lang/String.equals (4 samples, 0.06%)</title><rect x="323.1" y="787.0" width="0.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="326.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (21 samples, 0.33%)</title><rect x="323.8" y="819.0" width="3.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="326.8" y="830.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (19 samples, 0.30%)</title><rect x="324.2" y="803.0" width="3.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.2" y="814.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (15 samples, 0.23%)</title><rect x="324.7" y="787.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="327.7" y="798.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (2 samples, 0.03%)</title><rect x="325.6" y="771.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="328.6" y="782.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="325.6" y="755.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="328.6" y="766.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="325.6" y="739.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.6" y="750.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (2 samples, 0.03%)</title><rect x="326.0" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="329.0" y="782.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (5 samples, 0.08%)</title><rect x="326.5" y="771.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="329.5" y="782.0"></text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 0.08%)</title><rect x="326.5" y="755.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="329.5" y="766.0"></text>
</g>
<g>
<title>java/lang/String.isLatin1 (2 samples, 0.03%)</title><rect x="326.5" y="739.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.5" y="750.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (2 samples, 0.03%)</title><rect x="326.5" y="723.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="329.5" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.charAt (3 samples, 0.05%)</title><rect x="326.9" y="739.0" width="0.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="329.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.lock (3 samples, 0.05%)</title><rect x="327.8" y="883.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.8" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (3 samples, 0.05%)</title><rect x="327.8" y="867.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="330.8" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.unlock (6 samples, 0.09%)</title><rect x="328.4" y="883.0" width="1.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="331.4" y="894.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.run (2 samples, 0.03%)</title><rect x="328.6" y="867.0" width="0.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="331.6" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (3 samples, 0.05%)</title><rect x="328.9" y="867.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="331.9" y="878.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (3 samples, 0.05%)</title><rect x="328.9" y="851.0" width="0.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="331.9" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (3 samples, 0.05%)</title><rect x="328.9" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="331.9" y="846.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.03%)</title><rect x="329.1" y="819.0" width="0.4" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="332.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (1,028 samples, 15.97%)</title><rect x="329.5" y="883.0" width="188.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.5" y="894.0">java/util/concurrent/Thr..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (1,021 samples, 15.86%)</title><rect x="330.8" y="867.0" width="187.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="333.8" y="878.0">java/util/concurrent/Lin..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (762 samples, 11.84%)</title><rect x="331.1" y="851.0" width="139.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="334.1" y="862.0">java/util/concurr..</text>
</g>
<g>
<title>java/lang/Thread.interrupted (3 samples, 0.05%)</title><rect x="333.5" y="835.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="336.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3 samples, 0.05%)</title><rect x="334.1" y="835.0" width="0.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="337.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (27 samples, 0.42%)</title><rect x="334.6" y="835.0" width="4.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="337.6" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (36 samples, 0.56%)</title><rect x="339.5" y="835.0" width="6.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="342.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (36 samples, 0.56%)</title><rect x="339.5" y="819.0" width="6.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="342.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (25 samples, 0.39%)</title><rect x="341.2" y="803.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.2" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (25 samples, 0.39%)</title><rect x="341.2" y="787.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="344.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="341.2" y="771.0" width="0.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="344.2" y="782.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (23 samples, 0.36%)</title><rect x="341.6" y="771.0" width="4.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.6" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (2 samples, 0.03%)</title><rect x="341.7" y="755.0" width="0.4" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="344.7" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (19 samples, 0.30%)</title><rect x="342.3" y="755.0" width="3.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="345.3" y="766.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (17 samples, 0.26%)</title><rect x="342.7" y="739.0" width="3.1" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="345.7" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (17 samples, 0.26%)</title><rect x="342.7" y="723.0" width="3.1" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="345.7" y="734.0"></text>
</g>
<g>
<title>__x64_sys_futex (14 samples, 0.22%)</title><rect x="343.2" y="707.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="346.2" y="718.0"></text>
</g>
<g>
<title>do_futex (14 samples, 0.22%)</title><rect x="343.2" y="691.0" width="2.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="346.2" y="702.0"></text>
</g>
<g>
<title>futex_wake (13 samples, 0.20%)</title><rect x="343.4" y="675.0" width="2.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="346.4" y="686.0"></text>
</g>
<g>
<title>wake_up_q (12 samples, 0.19%)</title><rect x="343.6" y="659.0" width="2.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="346.6" y="670.0"></text>
</g>
<g>
<title>try_to_wake_up (12 samples, 0.19%)</title><rect x="343.6" y="643.0" width="2.2" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="346.6" y="654.0"></text>
</g>
<g>
<title>__lock_text_start (12 samples, 0.19%)</title><rect x="343.6" y="627.0" width="2.2" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="346.6" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="345.8" y="803.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="348.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.isOnSyncQueue (3 samples, 0.05%)</title><rect x="346.1" y="835.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="349.1" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.findNodeFromTail (3 samples, 0.05%)</title><rect x="346.1" y="819.0" width="0.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="349.1" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock$Sync.tryRelease (2 samples, 0.03%)</title><rect x="346.3" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.3" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (675 samples, 10.48%)</title><rect x="346.7" y="835.0" width="123.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="349.7" y="846.0">java/util/concu..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (673 samples, 10.45%)</title><rect x="347.1" y="819.0" width="123.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="350.1" y="830.0">jdk/internal/mi..</text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (2 samples, 0.03%)</title><rect x="348.5" y="803.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="351.5" y="814.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (3 samples, 0.05%)</title><rect x="348.9" y="803.0" width="0.5" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="351.9" y="814.0"></text>
</g>
<g>
<title>Unsafe_Park (237 samples, 3.68%)</title><rect x="349.8" y="803.0" width="43.5" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="352.8" y="814.0">Unsa..</text>
</g>
<g>
<title>JavaFrameAnchor::make_walkable(JavaThread*) (3 samples, 0.05%)</title><rect x="352.0" y="787.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="355.0" y="798.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (11 samples, 0.17%)</title><rect x="352.6" y="787.0" width="2.0" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="355.6" y="798.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (39 samples, 0.61%)</title><rect x="354.9" y="787.0" width="7.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="357.9" y="798.0"></text>
</g>
<g>
<title>Monitor::lock_without_safepoint_check() (9 samples, 0.14%)</title><rect x="358.4" y="771.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="361.4" y="782.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.03%)</title><rect x="359.7" y="755.0" width="0.4" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="362.7" y="766.0"></text>
</g>
<g>
<title>Monitor::unlock() (4 samples, 0.06%)</title><rect x="360.1" y="771.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="363.1" y="782.0"></text>
</g>
<g>
<title>__tls_get_addr (3 samples, 0.05%)</title><rect x="360.8" y="771.0" width="0.6" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="363.8" y="782.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.05%)</title><rect x="361.5" y="771.0" width="0.6" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="364.5" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (5 samples, 0.08%)</title><rect x="362.3" y="787.0" width="0.9" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="365.3" y="798.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (6 samples, 0.09%)</title><rect x="363.4" y="787.0" width="1.1" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="366.4" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (2 samples, 0.03%)</title><rect x="364.5" y="787.0" width="0.3" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="367.5" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (143 samples, 2.22%)</title><rect x="364.8" y="787.0" width="26.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="367.8" y="798.0">_..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (52 samples, 0.81%)</title><rect x="381.5" y="771.0" width="9.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="384.5" y="782.0"></text>
</g>
<g>
<title>do_syscall_64 (51 samples, 0.79%)</title><rect x="381.7" y="755.0" width="9.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="384.7" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (29 samples, 0.45%)</title><rect x="385.6" y="739.0" width="5.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="388.6" y="750.0"></text>
</g>
<g>
<title>do_futex (24 samples, 0.37%)</title><rect x="386.1" y="723.0" width="4.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="389.1" y="734.0"></text>
</g>
<g>
<title>futex_wake (23 samples, 0.36%)</title><rect x="386.3" y="707.0" width="4.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="389.3" y="718.0"></text>
</g>
<g>
<title>get_futex_key (7 samples, 0.11%)</title><rect x="389.2" y="691.0" width="1.3" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="392.2" y="702.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (6 samples, 0.09%)</title><rect x="389.4" y="675.0" width="1.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="392.4" y="686.0"></text>
</g>
<g>
<title>futex_wake (2 samples, 0.03%)</title><rect x="390.5" y="723.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="393.5" y="734.0"></text>
</g>
<g>
<title>__tls_get_addr (2 samples, 0.03%)</title><rect x="391.1" y="787.0" width="0.3" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="394.1" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::get_thread_status(oopDesc*) (2 samples, 0.03%)</title><rect x="391.4" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="394.4" y="798.0"></text>
</g>
<g>
<title>java_lang_Thread::set_thread_status(oopDesc*, java_lang_Thread::ThreadStatus) (4 samples, 0.06%)</title><rect x="391.8" y="787.0" width="0.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="394.8" y="798.0"></text>
</g>
<g>
<title>pthread_mutex_unlock@plt (2 samples, 0.03%)</title><rect x="392.9" y="787.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="395.9" y="798.0"></text>
</g>
<g>
<title>[unknown] (420 samples, 6.52%)</title><rect x="393.3" y="803.0" width="76.9" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="396.3" y="814.0">[unknown]</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (6 samples, 0.09%)</title><rect x="393.3" y="787.0" width="1.1" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="396.3" y="798.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (8 samples, 0.12%)</title><rect x="394.4" y="787.0" width="1.4" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="397.4" y="798.0"></text>
</g>
<g>
<title>__pthread_cond_wait (365 samples, 5.67%)</title><rect x="396.0" y="787.0" width="66.9" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="399.0" y="798.0">__pthre..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (99 samples, 1.54%)</title><rect x="444.8" y="771.0" width="18.1" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="447.8" y="782.0"></text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="444.8" y="755.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="447.8" y="766.0"></text>
</g>
<g>
<title>do_syscall_64 (97 samples, 1.51%)</title><rect x="445.1" y="755.0" width="17.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="448.1" y="766.0"></text>
</g>
<g>
<title>__x64_sys_futex (71 samples, 1.10%)</title><rect x="449.5" y="739.0" width="13.0" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="452.5" y="750.0"></text>
</g>
<g>
<title>do_futex (66 samples, 1.03%)</title><rect x="450.3" y="723.0" width="12.1" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="453.3" y="734.0"></text>
</g>
<g>
<title>futex_wait (63 samples, 0.98%)</title><rect x="450.4" y="707.0" width="11.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="453.4" y="718.0"></text>
</g>
<g>
<title>futex_wait_queue_me (25 samples, 0.39%)</title><rect x="451.7" y="691.0" width="4.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="454.7" y="702.0"></text>
</g>
<g>
<title>schedule (18 samples, 0.28%)</title><rect x="453.0" y="675.0" width="3.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="456.0" y="686.0"></text>
</g>
<g>
<title>__sched_text_start (14 samples, 0.22%)</title><rect x="453.7" y="659.0" width="2.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="456.7" y="670.0"></text>
</g>
<g>
<title>finish_task_switch (7 samples, 0.11%)</title><rect x="455.0" y="643.0" width="1.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="458.0" y="654.0"></text>
</g>
<g>
<title>futex_wait_setup (23 samples, 0.36%)</title><rect x="456.3" y="691.0" width="4.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="459.3" y="702.0"></text>
</g>
<g>
<title>get_futex_key (3 samples, 0.05%)</title><rect x="458.3" y="675.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="461.3" y="686.0"></text>
</g>
<g>
<title>get_futex_value_locked (9 samples, 0.14%)</title><rect x="458.9" y="675.0" width="1.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="461.9" y="686.0"></text>
</g>
<g>
<title>hash_futex (5 samples, 0.08%)</title><rect x="460.5" y="691.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="463.5" y="702.0"></text>
</g>
<g>
<title>plist_add (3 samples, 0.05%)</title><rect x="461.4" y="691.0" width="0.6" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="464.4" y="702.0"></text>
</g>
<g>
<title>futex_wait_setup (2 samples, 0.03%)</title><rect x="462.0" y="707.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="465.0" y="718.0"></text>
</g>
<g>
<title>do_futex (2 samples, 0.03%)</title><rect x="462.5" y="739.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="465.5" y="750.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (29 samples, 0.45%)</title><rect x="462.9" y="787.0" width="5.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="465.9" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (6 samples, 0.09%)</title><rect x="468.4" y="787.0" width="1.1" height="15" fill="#f97b7b" rx="2" ry="2"/>
<text x="471.4" y="798.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock_usercnt (3 samples, 0.05%)</title><rect x="469.5" y="787.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="472.5" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="470.4" y="835.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="473.4" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (7 samples, 0.11%)</title><rect x="470.8" y="851.0" width="1.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="473.8" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (7 samples, 0.11%)</title><rect x="470.8" y="835.0" width="1.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="473.8" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (7 samples, 0.11%)</title><rect x="470.8" y="819.0" width="1.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="473.8" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (7 samples, 0.11%)</title><rect x="470.8" y="803.0" width="1.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="473.8" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (5 samples, 0.08%)</title><rect x="472.1" y="851.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="475.1" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (20 samples, 0.31%)</title><rect x="473.0" y="851.0" width="3.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="476.0" y="862.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (17 samples, 0.26%)</title><rect x="473.5" y="835.0" width="3.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="476.5" y="846.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (17 samples, 0.26%)</title><rect x="473.5" y="819.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="476.5" y="830.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (3 samples, 0.05%)</title><rect x="475.9" y="803.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (3 samples, 0.05%)</title><rect x="475.9" y="787.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="478.9" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (3 samples, 0.05%)</title><rect x="475.9" y="771.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="478.9" y="782.0"></text>
</g>
<g>
<title>Unsafe_Park (2 samples, 0.03%)</title><rect x="475.9" y="755.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="478.9" y="766.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (2 samples, 0.03%)</title><rect x="475.9" y="739.0" width="0.4" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="478.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (225 samples, 3.49%)</title><rect x="476.6" y="851.0" width="41.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.6" y="862.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (225 samples, 3.49%)</title><rect x="476.6" y="835.0" width="41.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="479.6" y="846.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (225 samples, 3.49%)</title><rect x="476.6" y="819.0" width="41.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="479.6" y="830.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (225 samples, 3.49%)</title><rect x="476.6" y="803.0" width="41.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="479.6" y="814.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (2 samples, 0.03%)</title><rect x="482.3" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="485.3" y="798.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (192 samples, 2.98%)</title><rect x="482.7" y="787.0" width="35.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="485.7" y="798.0">jdk..</text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="483.1" y="771.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="486.1" y="782.0"></text>
</g>
<g>
<title>Unsafe_Unpark (24 samples, 0.37%)</title><rect x="483.4" y="771.0" width="4.4" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="486.4" y="782.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (4 samples, 0.06%)</title><rect x="484.5" y="755.0" width="0.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="487.5" y="766.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (4 samples, 0.06%)</title><rect x="485.4" y="755.0" width="0.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="488.4" y="766.0"></text>
</g>
<g>
<title>pthread_mutex_lock (4 samples, 0.06%)</title><rect x="486.9" y="755.0" width="0.7" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="489.9" y="766.0"></text>
</g>
<g>
<title>__pthread_cond_signal (163 samples, 2.53%)</title><rect x="488.0" y="771.0" width="29.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="491.0" y="782.0">__..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (134 samples, 2.08%)</title><rect x="493.3" y="755.0" width="24.6" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="496.3" y="766.0">e..</text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="493.3" y="739.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="496.3" y="750.0"></text>
</g>
<g>
<title>do_syscall_64 (132 samples, 2.05%)</title><rect x="493.7" y="739.0" width="24.2" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="496.7" y="750.0">d..</text>
</g>
<g>
<title>__x64_sys_futex (123 samples, 1.91%)</title><rect x="495.3" y="723.0" width="22.6" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="498.3" y="734.0">_..</text>
</g>
<g>
<title>do_futex (122 samples, 1.89%)</title><rect x="495.3" y="707.0" width="22.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="498.3" y="718.0">d..</text>
</g>
<g>
<title>futex_wake (119 samples, 1.85%)</title><rect x="495.3" y="691.0" width="21.9" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="498.3" y="702.0">f..</text>
</g>
<g>
<title>mark_wake_futex (6 samples, 0.09%)</title><rect x="496.3" y="675.0" width="1.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="499.3" y="686.0"></text>
</g>
<g>
<title>__unqueue_futex (4 samples, 0.06%)</title><rect x="496.6" y="659.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="499.6" y="670.0"></text>
</g>
<g>
<title>wake_up_q (107 samples, 1.66%)</title><rect x="497.5" y="675.0" width="19.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="500.5" y="686.0"></text>
</g>
<g>
<title>try_to_wake_up (105 samples, 1.63%)</title><rect x="497.9" y="659.0" width="19.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="500.9" y="670.0"></text>
</g>
<g>
<title>__lock_text_start (104 samples, 1.62%)</title><rect x="498.1" y="643.0" width="19.1" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="501.1" y="654.0"></text>
</g>
<g>
<title>hash_futex (3 samples, 0.05%)</title><rect x="517.2" y="691.0" width="0.5" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="520.2" y="702.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$64/313824963.run (2,041 samples, 31.70%)</title><rect x="517.9" y="883.0" width="374.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="520.9" y="894.0">ru/mail/polis/service/boriskin/NewService$$Lambda$6..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$0 (2,039 samples, 31.67%)</title><rect x="518.3" y="867.0" width="373.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="521.3" y="878.0">ru/mail/polis/service/boriskin/NewService.lambda$ru..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (2,039 samples, 31.67%)</title><rect x="518.3" y="851.0" width="373.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="521.3" y="862.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (4 samples, 0.06%)</title><rect x="520.8" y="835.0" width="0.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="523.8" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (19 samples, 0.30%)</title><rect x="521.6" y="835.0" width="3.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="524.6" y="846.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.19%)</title><rect x="522.1" y="819.0" width="2.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="525.1" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.19%)</title><rect x="522.1" y="803.0" width="2.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="525.1" y="814.0"></text>
</g>
<g>
<title>java/lang/String.substring (4 samples, 0.06%)</title><rect x="524.3" y="819.0" width="0.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="527.3" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4 samples, 0.06%)</title><rect x="524.3" y="803.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="527.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="524.3" y="787.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="527.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="524.3" y="771.0" width="0.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="527.3" y="782.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="524.7" y="787.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="527.7" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.03%)</title><rect x="525.0" y="835.0" width="0.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="528.0" y="846.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/MetaInfoRequest.&lt;init&gt; (29 samples, 0.45%)</title><rect x="525.4" y="835.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="528.4" y="846.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (25 samples, 0.39%)</title><rect x="526.1" y="819.0" width="4.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="529.1" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (6 samples, 0.09%)</title><rect x="526.9" y="803.0" width="1.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="529.9" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (6 samples, 0.09%)</title><rect x="526.9" y="787.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="529.9" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (6 samples, 0.09%)</title><rect x="528.0" y="803.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="531.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (6 samples, 0.09%)</title><rect x="528.0" y="787.0" width="1.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="531.0" y="798.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="528.7" y="771.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="531.7" y="782.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="529.3" y="803.0" width="0.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="532.3" y="814.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (6 samples, 0.09%)</title><rect x="529.6" y="803.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="532.6" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="530.0" y="787.0" width="0.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="533.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (4 samples, 0.06%)</title><rect x="530.0" y="771.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="533.0" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (4 samples, 0.06%)</title><rect x="530.0" y="755.0" width="0.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="533.0" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (1,218 samples, 18.92%)</title><rect x="530.7" y="835.0" width="223.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="533.7" y="846.0">ru/mail/polis/service/boriski..</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (1,215 samples, 18.87%)</title><rect x="530.9" y="819.0" width="222.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="533.9" y="830.0">one/nio/http/HttpSession.send..</text>
</g>
<g>
<title>SharedRuntime::complete_monitor_locking_C(oopDesc*, BasicLock*, JavaThread*) (28 samples, 0.43%)</title><rect x="535.8" y="803.0" width="5.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="538.8" y="814.0"></text>
</g>
<g>
<title>ObjectSynchronizer::fast_enter(Handle, BasicLock*, bool, Thread*) (28 samples, 0.43%)</title><rect x="535.8" y="787.0" width="5.2" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="538.8" y="798.0"></text>
</g>
<g>
<title>ObjectMonitor::enter(Thread*) (26 samples, 0.40%)</title><rect x="536.2" y="771.0" width="4.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="539.2" y="782.0"></text>
</g>
<g>
<title>ObjectMonitor::TrySpin(Thread*) [clone .part.71] (24 samples, 0.37%)</title><rect x="536.2" y="755.0" width="4.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="539.2" y="766.0"></text>
</g>
<g>
<title>SpinPause (2 samples, 0.03%)</title><rect x="540.6" y="755.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="543.6" y="766.0"></text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (12 samples, 0.19%)</title><rect x="541.0" y="803.0" width="2.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="544.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (12 samples, 0.19%)</title><rect x="541.0" y="787.0" width="2.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="544.0" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (12 samples, 0.19%)</title><rect x="541.0" y="771.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="544.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="542.8" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="545.8" y="766.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="542.8" y="739.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="545.8" y="750.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="542.8" y="723.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="545.8" y="734.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (1,137 samples, 17.66%)</title><rect x="543.4" y="803.0" width="208.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="546.4" y="814.0">one/nio/http/HttpSession.wr..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (38 samples, 0.59%)</title><rect x="543.4" y="787.0" width="6.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="546.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (3 samples, 0.05%)</title><rect x="546.5" y="771.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="549.5" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="546.5" y="755.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.5" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="546.5" y="739.0" width="0.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="549.5" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="546.5" y="723.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="549.5" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="546.5" y="707.0" width="0.3" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="549.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="546.5" y="691.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="549.5" y="702.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (18 samples, 0.28%)</title><rect x="547.0" y="771.0" width="3.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="550.0" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (18 samples, 0.28%)</title><rect x="547.0" y="755.0" width="3.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="550.0" y="766.0"></text>
</g>
<g>
<title>java/lang/String.charAt (18 samples, 0.28%)</title><rect x="547.0" y="739.0" width="3.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="550.0" y="750.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (3 samples, 0.05%)</title><rect x="549.8" y="723.0" width="0.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="552.8" y="734.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (1,099 samples, 17.07%)</title><rect x="550.3" y="787.0" width="201.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="553.3" y="798.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session.write (1,097 samples, 17.04%)</title><rect x="550.7" y="771.0" width="201.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="553.7" y="782.0">one/nio/net/Session.write</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (1,095 samples, 17.01%)</title><rect x="551.1" y="755.0" width="200.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="554.1" y="766.0">one/nio/net/Session$ArrayQ..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1,092 samples, 16.96%)</title><rect x="551.6" y="739.0" width="200.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="554.6" y="750.0">one/nio/net/NativeSocket.w..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (44 samples, 0.68%)</title><rect x="552.5" y="723.0" width="8.1" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="555.5" y="734.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (4 samples, 0.06%)</title><rect x="554.2" y="707.0" width="0.7" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="557.2" y="718.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (3 samples, 0.05%)</title><rect x="554.9" y="707.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="557.9" y="718.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (26 samples, 0.40%)</title><rect x="555.6" y="707.0" width="4.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="558.6" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="557.1" y="691.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="560.1" y="702.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (4 samples, 0.06%)</title><rect x="557.5" y="691.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="560.5" y="702.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (12 samples, 0.19%)</title><rect x="558.2" y="691.0" width="2.2" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="561.2" y="702.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (6 samples, 0.09%)</title><rect x="559.3" y="675.0" width="1.1" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="562.3" y="686.0"></text>
</g>
<g>
<title>__send (1,040 samples, 16.15%)</title><rect x="561.0" y="723.0" width="190.6" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="564.0" y="734.0">__send</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (992 samples, 15.41%)</title><rect x="569.8" y="707.0" width="181.8" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="572.8" y="718.0">entry_SYSCALL_64_after_..</text>
</g>
<g>
<title>__x64_sys_sendto (4 samples, 0.06%)</title><rect x="569.8" y="691.0" width="0.7" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="572.8" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (988 samples, 15.35%)</title><rect x="570.5" y="691.0" width="181.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="573.5" y="702.0">do_syscall_64</text>
</g>
<g>
<title>__x64_sys_sendto (970 samples, 15.07%)</title><rect x="573.8" y="675.0" width="177.8" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="576.8" y="686.0">__x64_sys_sendto</text>
</g>
<g>
<title>__sys_sendto (970 samples, 15.07%)</title><rect x="573.8" y="659.0" width="177.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="576.8" y="670.0">__sys_sendto</text>
</g>
<g>
<title>fput_many (6 samples, 0.09%)</title><rect x="574.5" y="643.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="577.5" y="654.0"></text>
</g>
<g>
<title>sock_sendmsg (929 samples, 14.43%)</title><rect x="575.6" y="643.0" width="170.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="578.6" y="654.0">sock_sendmsg</text>
</g>
<g>
<title>apparmor_socket_sendmsg (6 samples, 0.09%)</title><rect x="576.0" y="627.0" width="1.1" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="579.0" y="638.0"></text>
</g>
<g>
<title>inet6_sendmsg (915 samples, 14.21%)</title><rect x="577.1" y="627.0" width="167.7" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="580.1" y="638.0">inet6_sendmsg</text>
</g>
<g>
<title>tcp_sendmsg (910 samples, 14.13%)</title><rect x="577.8" y="611.0" width="166.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="580.8" y="622.0">tcp_sendmsg</text>
</g>
<g>
<title>_raw_spin_lock_bh (6 samples, 0.09%)</title><rect x="578.2" y="595.0" width="1.1" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="581.2" y="606.0"></text>
</g>
<g>
<title>release_sock (3 samples, 0.05%)</title><rect x="579.5" y="595.0" width="0.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="582.5" y="606.0"></text>
</g>
<g>
<title>tcp_push (8 samples, 0.12%)</title><rect x="580.8" y="595.0" width="1.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="583.8" y="606.0"></text>
</g>
<g>
<title>tcp_rate_check_app_limited (3 samples, 0.05%)</title><rect x="582.2" y="595.0" width="0.6" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="585.2" y="606.0"></text>
</g>
<g>
<title>tcp_sendmsg_locked (878 samples, 13.64%)</title><rect x="583.0" y="595.0" width="160.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="586.0" y="606.0">tcp_sendmsg_locked</text>
</g>
<g>
<title>__check_object_size (6 samples, 0.09%)</title><rect x="585.9" y="579.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="588.9" y="590.0"></text>
</g>
<g>
<title>__virt_addr_valid (5 samples, 0.08%)</title><rect x="586.1" y="563.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="589.1" y="574.0"></text>
</g>
<g>
<title>__tcp_push_pending_frames (2 samples, 0.03%)</title><rect x="587.0" y="579.0" width="0.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="590.0" y="590.0"></text>
</g>
<g>
<title>_copy_from_iter_full (14 samples, 0.22%)</title><rect x="587.5" y="579.0" width="2.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="590.5" y="590.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (8 samples, 0.12%)</title><rect x="587.9" y="563.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="590.9" y="574.0"></text>
</g>
<g>
<title>iov_iter_advance (3 samples, 0.05%)</title><rect x="589.6" y="563.0" width="0.5" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="592.6" y="574.0"></text>
</g>
<g>
<title>check_stack_object (2 samples, 0.03%)</title><rect x="590.1" y="579.0" width="0.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="593.1" y="590.0"></text>
</g>
<g>
<title>sk_page_frag_refill (4 samples, 0.06%)</title><rect x="590.7" y="579.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="593.7" y="590.0"></text>
</g>
<g>
<title>skb_page_frag_refill (4 samples, 0.06%)</title><rect x="590.7" y="563.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="593.7" y="574.0"></text>
</g>
<g>
<title>sk_stream_alloc_skb (67 samples, 1.04%)</title><rect x="591.4" y="579.0" width="12.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="594.4" y="590.0"></text>
</g>
<g>
<title>__alloc_skb (62 samples, 0.96%)</title><rect x="592.1" y="563.0" width="11.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="595.1" y="574.0"></text>
</g>
<g>
<title>__kmalloc_reserve.isra.0 (27 samples, 0.42%)</title><rect x="592.9" y="547.0" width="4.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="595.9" y="558.0"></text>
</g>
<g>
<title>__kmalloc_node_track_caller (20 samples, 0.31%)</title><rect x="593.0" y="531.0" width="3.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="596.0" y="542.0"></text>
</g>
<g>
<title>__slab_alloc (3 samples, 0.05%)</title><rect x="595.6" y="515.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="598.6" y="526.0"></text>
</g>
<g>
<title>memset_erms (4 samples, 0.06%)</title><rect x="597.1" y="531.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="600.1" y="542.0"></text>
</g>
<g>
<title>kmem_cache_alloc_node (12 samples, 0.19%)</title><rect x="598.2" y="547.0" width="2.2" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="601.2" y="558.0"></text>
</g>
<g>
<title>ksize (10 samples, 0.16%)</title><rect x="600.4" y="547.0" width="1.8" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="603.4" y="558.0"></text>
</g>
<g>
<title>__ksize (9 samples, 0.14%)</title><rect x="600.5" y="531.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="603.5" y="542.0"></text>
</g>
<g>
<title>memset_erms (3 samples, 0.05%)</title><rect x="602.6" y="547.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="605.6" y="558.0"></text>
</g>
<g>
<title>should_failslab (2 samples, 0.03%)</title><rect x="603.1" y="547.0" width="0.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="606.1" y="558.0"></text>
</g>
<g>
<title>skb_entail (4 samples, 0.06%)</title><rect x="603.7" y="579.0" width="0.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="606.7" y="590.0"></text>
</g>
<g>
<title>tcp_push (742 samples, 11.53%)</title><rect x="604.6" y="579.0" width="136.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="607.6" y="590.0">tcp_push</text>
</g>
<g>
<title>__tcp_push_pending_frames (740 samples, 11.49%)</title><rect x="604.6" y="563.0" width="135.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="607.6" y="574.0">__tcp_push_pendin..</text>
</g>
<g>
<title>tcp_write_xmit (735 samples, 11.42%)</title><rect x="605.5" y="547.0" width="134.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="608.5" y="558.0">tcp_write_xmit</text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="607.5" y="531.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="610.5" y="542.0"></text>
</g>
<g>
<title>__tcp_transmit_skb (694 samples, 10.78%)</title><rect x="607.9" y="531.0" width="127.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="610.9" y="542.0">__tcp_transmit_skb</text>
</g>
<g>
<title>__tcp_select_window (3 samples, 0.05%)</title><rect x="613.4" y="515.0" width="0.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="616.4" y="526.0"></text>
</g>
<g>
<title>__tcp_v4_send_check (2 samples, 0.03%)</title><rect x="613.9" y="515.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="616.9" y="526.0"></text>
</g>
<g>
<title>ip_queue_xmit (646 samples, 10.03%)</title><rect x="614.5" y="515.0" width="118.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="617.5" y="526.0">ip_queue_xmit</text>
</g>
<g>
<title>__ip_queue_xmit (640 samples, 9.94%)</title><rect x="614.5" y="499.0" width="117.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="617.5" y="510.0">__ip_queue_xmit</text>
</g>
<g>
<title>__ip_local_out (2 samples, 0.03%)</title><rect x="615.4" y="483.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="618.4" y="494.0"></text>
</g>
<g>
<title>__sk_dst_check (5 samples, 0.08%)</title><rect x="615.8" y="483.0" width="0.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="618.8" y="494.0"></text>
</g>
<g>
<title>ipv4_dst_check (3 samples, 0.05%)</title><rect x="616.1" y="467.0" width="0.6" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="619.1" y="478.0"></text>
</g>
<g>
<title>ip_local_out (621 samples, 9.65%)</title><rect x="616.7" y="483.0" width="113.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="619.7" y="494.0">ip_local_out</text>
</g>
<g>
<title>__ip_local_out (9 samples, 0.14%)</title><rect x="616.9" y="467.0" width="1.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="619.9" y="478.0"></text>
</g>
<g>
<title>ip_send_check (5 samples, 0.08%)</title><rect x="617.6" y="451.0" width="0.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="620.6" y="462.0"></text>
</g>
<g>
<title>ip_output (611 samples, 9.49%)</title><rect x="618.5" y="467.0" width="112.0" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="621.5" y="478.0">ip_output</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (3 samples, 0.05%)</title><rect x="619.4" y="451.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="622.4" y="462.0"></text>
</g>
<g>
<title>ip_finish_output (603 samples, 9.37%)</title><rect x="620.0" y="451.0" width="110.5" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="623.0" y="462.0">ip_finish_out..</text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (2 samples, 0.03%)</title><rect x="620.2" y="435.0" width="0.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="623.2" y="446.0"></text>
</g>
<g>
<title>__ip_finish_output (599 samples, 9.30%)</title><rect x="620.5" y="435.0" width="109.8" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="623.5" y="446.0">__ip_finish_o..</text>
</g>
<g>
<title>__local_bh_enable_ip (2 samples, 0.03%)</title><rect x="621.3" y="419.0" width="0.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="624.3" y="430.0"></text>
</g>
<g>
<title>ip_finish_output2 (592 samples, 9.20%)</title><rect x="621.6" y="419.0" width="108.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="624.6" y="430.0">ip_finish_out..</text>
</g>
<g>
<title>__local_bh_enable_ip (534 samples, 8.29%)</title><rect x="623.1" y="403.0" width="97.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="626.1" y="414.0">__local_bh_..</text>
</g>
<g>
<title>do_softirq.part.0 (532 samples, 8.26%)</title><rect x="623.5" y="387.0" width="97.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="626.5" y="398.0">do_softirq...</text>
</g>
<g>
<title>do_softirq_own_stack (530 samples, 8.23%)</title><rect x="623.8" y="371.0" width="97.2" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="626.8" y="382.0">do_softirq_..</text>
</g>
<g>
<title>__softirqentry_text_start (530 samples, 8.23%)</title><rect x="623.8" y="355.0" width="97.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="626.8" y="366.0">__softirqen..</text>
</g>
<g>
<title>net_rx_action (511 samples, 7.94%)</title><rect x="626.4" y="339.0" width="93.7" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="629.4" y="350.0">net_rx_action</text>
</g>
<g>
<title>__netif_receive_skb (2 samples, 0.03%)</title><rect x="627.1" y="323.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="630.1" y="334.0"></text>
</g>
<g>
<title>process_backlog (505 samples, 7.84%)</title><rect x="627.5" y="323.0" width="92.6" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="630.5" y="334.0">process_bac..</text>
</g>
<g>
<title>__netif_receive_skb (495 samples, 7.69%)</title><rect x="629.3" y="307.0" width="90.8" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="632.3" y="318.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_one_core (494 samples, 7.67%)</title><rect x="629.5" y="291.0" width="90.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="632.5" y="302.0">__netif_re..</text>
</g>
<g>
<title>__netif_receive_skb_core (14 samples, 0.22%)</title><rect x="630.1" y="275.0" width="2.5" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="633.1" y="286.0"></text>
</g>
<g>
<title>ip_rcv (476 samples, 7.39%)</title><rect x="632.6" y="275.0" width="87.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="635.6" y="286.0">ip_rcv</text>
</g>
<g>
<title>ip_local_deliver (3 samples, 0.05%)</title><rect x="633.4" y="259.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="636.4" y="270.0"></text>
</g>
<g>
<title>ip_rcv_core.isra.0 (3 samples, 0.05%)</title><rect x="633.9" y="259.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="636.9" y="270.0"></text>
</g>
<g>
<title>ip_rcv_finish (465 samples, 7.22%)</title><rect x="634.5" y="259.0" width="85.2" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="637.5" y="270.0">ip_rcv_fin..</text>
</g>
<g>
<title>ip_local_deliver (451 samples, 7.01%)</title><rect x="635.4" y="243.0" width="82.6" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="638.4" y="254.0">ip_local_..</text>
</g>
<g>
<title>ip_local_deliver_finish (446 samples, 6.93%)</title><rect x="636.3" y="227.0" width="81.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="639.3" y="238.0">ip_local_..</text>
</g>
<g>
<title>ip_protocol_deliver_rcu (444 samples, 6.90%)</title><rect x="636.3" y="211.0" width="81.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="639.3" y="222.0">ip_protoc..</text>
</g>
<g>
<title>_raw_spin_lock (2 samples, 0.03%)</title><rect x="637.6" y="195.0" width="0.3" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="640.6" y="206.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="637.9" y="195.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="640.9" y="206.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (2 samples, 0.03%)</title><rect x="638.3" y="195.0" width="0.4" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="641.3" y="206.0"></text>
</g>
<g>
<title>sock_put (2 samples, 0.03%)</title><rect x="638.7" y="195.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="641.7" y="206.0"></text>
</g>
<g>
<title>tcp_v4_fill_cb (2 samples, 0.03%)</title><rect x="639.0" y="195.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="642.0" y="206.0"></text>
</g>
<g>
<title>tcp_v4_rcv (427 samples, 6.63%)</title><rect x="639.4" y="195.0" width="78.3" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="642.4" y="206.0">tcp_v4_rcv</text>
</g>
<g>
<title>__inet_lookup_established (21 samples, 0.33%)</title><rect x="641.8" y="179.0" width="3.8" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="644.8" y="190.0"></text>
</g>
<g>
<title>sk_filter_trim_cap (9 samples, 0.14%)</title><rect x="645.8" y="179.0" width="1.7" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="648.8" y="190.0"></text>
</g>
<g>
<title>__cgroup_bpf_run_filter_skb (4 samples, 0.06%)</title><rect x="645.8" y="163.0" width="0.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="648.8" y="174.0"></text>
</g>
<g>
<title>apparmor_socket_sock_rcv_skb (3 samples, 0.05%)</title><rect x="646.6" y="163.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="649.6" y="174.0"></text>
</g>
<g>
<title>security_sock_rcv_skb (2 samples, 0.03%)</title><rect x="647.1" y="163.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="650.1" y="174.0"></text>
</g>
<g>
<title>tcp_v4_do_rcv (382 samples, 5.93%)</title><rect x="647.5" y="179.0" width="70.0" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="650.5" y="190.0">tcp_v4_d..</text>
</g>
<g>
<title>tcp_check_space (4 samples, 0.06%)</title><rect x="648.4" y="163.0" width="0.7" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="651.4" y="174.0"></text>
</g>
<g>
<title>tcp_data_ready (4 samples, 0.06%)</title><rect x="649.1" y="163.0" width="0.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="652.1" y="174.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (3 samples, 0.05%)</title><rect x="649.9" y="163.0" width="0.5" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="652.9" y="174.0"></text>
</g>
<g>
<title>tcp_rcv_established (366 samples, 5.68%)</title><rect x="650.4" y="163.0" width="67.1" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="653.4" y="174.0">tcp_rcv..</text>
</g>
<g>
<title>__tcp_ack_snd_check (13 samples, 0.20%)</title><rect x="652.6" y="147.0" width="2.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="655.6" y="158.0"></text>
</g>
<g>
<title>sk_reset_timer (2 samples, 0.03%)</title><rect x="652.6" y="131.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="655.6" y="142.0"></text>
</g>
<g>
<title>tcp_send_delayed_ack (11 samples, 0.17%)</title><rect x="653.0" y="131.0" width="2.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="656.0" y="142.0"></text>
</g>
<g>
<title>sk_reset_timer (11 samples, 0.17%)</title><rect x="653.0" y="115.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="656.0" y="126.0"></text>
</g>
<g>
<title>lock_timer_base (2 samples, 0.03%)</title><rect x="653.0" y="99.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="656.0" y="110.0"></text>
</g>
<g>
<title>mod_timer (9 samples, 0.14%)</title><rect x="653.3" y="99.0" width="1.7" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="656.3" y="110.0"></text>
</g>
<g>
<title>__lock_text_start (8 samples, 0.12%)</title><rect x="653.5" y="83.0" width="1.5" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="656.5" y="94.0"></text>
</g>
<g>
<title>ktime_get_seconds (2 samples, 0.03%)</title><rect x="655.0" y="147.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="658.0" y="158.0"></text>
</g>
<g>
<title>tcp_ack (90 samples, 1.40%)</title><rect x="655.5" y="147.0" width="16.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="658.5" y="158.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.06%)</title><rect x="658.5" y="131.0" width="0.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="661.5" y="142.0"></text>
</g>
<g>
<title>tcp_clean_rtx_queue (58 samples, 0.90%)</title><rect x="659.8" y="131.0" width="10.6" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="662.8" y="142.0"></text>
</g>
<g>
<title>__kfree_skb (33 samples, 0.51%)</title><rect x="662.0" y="115.0" width="6.0" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="665.0" y="126.0"></text>
</g>
<g>
<title>kfree_skbmem (11 samples, 0.17%)</title><rect x="662.0" y="99.0" width="2.0" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="665.0" y="110.0"></text>
</g>
<g>
<title>kmem_cache_free (11 samples, 0.17%)</title><rect x="662.0" y="83.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="665.0" y="94.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.06%)</title><rect x="663.2" y="67.0" width="0.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="666.2" y="78.0"></text>
</g>
<g>
<title>skb_release_all (22 samples, 0.34%)</title><rect x="664.0" y="99.0" width="4.0" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="667.0" y="110.0"></text>
</g>
<g>
<title>skb_release_data (21 samples, 0.33%)</title><rect x="664.0" y="83.0" width="3.8" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="667.0" y="94.0"></text>
</g>
<g>
<title>skb_free_head (13 samples, 0.20%)</title><rect x="665.4" y="67.0" width="2.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="668.4" y="78.0"></text>
</g>
<g>
<title>__slab_free (3 samples, 0.05%)</title><rect x="665.4" y="51.0" width="0.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="668.4" y="62.0"></text>
</g>
<g>
<title>kfree (10 samples, 0.16%)</title><rect x="666.0" y="51.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="669.0" y="62.0"></text>
</g>
<g>
<title>__slab_free (4 samples, 0.06%)</title><rect x="667.1" y="35.0" width="0.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="670.1" y="46.0"></text>
</g>
<g>
<title>bictcp_acked (4 samples, 0.06%)</title><rect x="668.0" y="115.0" width="0.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="671.0" y="126.0"></text>
</g>
<g>
<title>tcp_ack_update_rtt.isra.0 (4 samples, 0.06%)</title><rect x="668.9" y="115.0" width="0.7" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="671.9" y="126.0"></text>
</g>
<g>
<title>tcp_rate_skb_delivered (2 samples, 0.03%)</title><rect x="670.0" y="115.0" width="0.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="673.0" y="126.0"></text>
</g>
<g>
<title>tcp_newly_delivered (2 samples, 0.03%)</title><rect x="670.4" y="131.0" width="0.3" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="673.4" y="142.0"></text>
</g>
<g>
<title>tcp_rack_update_reo_wnd (2 samples, 0.03%)</title><rect x="670.7" y="131.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="673.7" y="142.0"></text>
</g>
<g>
<title>tcp_update_pacing_rate (4 samples, 0.06%)</title><rect x="671.3" y="131.0" width="0.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="674.3" y="142.0"></text>
</g>
<g>
<title>tcp_data_ready (233 samples, 3.62%)</title><rect x="672.0" y="147.0" width="42.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="675.0" y="158.0">tcp_..</text>
</g>
<g>
<title>__wake_up_sync_key (2 samples, 0.03%)</title><rect x="672.0" y="131.0" width="0.4" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="675.0" y="142.0"></text>
</g>
<g>
<title>sock_def_readable (231 samples, 3.59%)</title><rect x="672.4" y="131.0" width="42.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="675.4" y="142.0">sock..</text>
</g>
<g>
<title>__wake_up_common_lock (2 samples, 0.03%)</title><rect x="672.6" y="115.0" width="0.3" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="675.6" y="126.0"></text>
</g>
<g>
<title>__wake_up_sync_key (228 samples, 3.54%)</title><rect x="672.9" y="115.0" width="41.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="675.9" y="126.0">__w..</text>
</g>
<g>
<title>__wake_up_common_lock (228 samples, 3.54%)</title><rect x="672.9" y="99.0" width="41.8" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="675.9" y="110.0">__w..</text>
</g>
<g>
<title>__lock_text_start (228 samples, 3.54%)</title><rect x="672.9" y="83.0" width="41.8" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="675.9" y="94.0">__l..</text>
</g>
<g>
<title>tcp_event_data_recv (6 samples, 0.09%)</title><rect x="714.7" y="147.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="717.7" y="158.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="715.8" y="147.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="718.8" y="158.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (4 samples, 0.06%)</title><rect x="716.8" y="147.0" width="0.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="719.8" y="158.0"></text>
</g>
<g>
<title>raw_local_deliver (2 samples, 0.03%)</title><rect x="717.7" y="211.0" width="0.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="720.7" y="222.0"></text>
</g>
<g>
<title>ip_local_deliver_finish (2 samples, 0.03%)</title><rect x="718.0" y="243.0" width="0.4" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="721.0" y="254.0"></text>
</g>
<g>
<title>ip_rcv_finish_core.isra.0 (7 samples, 0.11%)</title><rect x="718.4" y="243.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="721.4" y="254.0"></text>
</g>
<g>
<title>process_backlog (5 samples, 0.08%)</title><rect x="720.1" y="339.0" width="0.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="723.1" y="350.0"></text>
</g>
<g>
<title>dev_queue_xmit (49 samples, 0.76%)</title><rect x="721.0" y="403.0" width="9.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="724.0" y="414.0"></text>
</g>
<g>
<title>__dev_queue_xmit (47 samples, 0.73%)</title><rect x="721.0" y="387.0" width="8.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="724.0" y="398.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (24 samples, 0.37%)</title><rect x="722.1" y="371.0" width="4.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="725.1" y="382.0"></text>
</g>
<g>
<title>loopback_xmit (17 samples, 0.26%)</title><rect x="723.0" y="355.0" width="3.1" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="726.0" y="366.0"></text>
</g>
<g>
<title>eth_type_trans (2 samples, 0.03%)</title><rect x="723.2" y="339.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="726.2" y="350.0"></text>
</g>
<g>
<title>netif_rx (11 samples, 0.17%)</title><rect x="723.5" y="339.0" width="2.1" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="726.5" y="350.0"></text>
</g>
<g>
<title>netif_rx_internal (11 samples, 0.17%)</title><rect x="723.5" y="323.0" width="2.1" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="726.5" y="334.0"></text>
</g>
<g>
<title>enqueue_to_backlog (9 samples, 0.14%)</title><rect x="723.9" y="307.0" width="1.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="726.9" y="318.0"></text>
</g>
<g>
<title>loopback_xmit (4 samples, 0.06%)</title><rect x="726.5" y="371.0" width="0.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="729.5" y="382.0"></text>
</g>
<g>
<title>skb_csum_hwoffload_help (5 samples, 0.08%)</title><rect x="727.2" y="371.0" width="0.9" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="730.2" y="382.0"></text>
</g>
<g>
<title>validate_xmit_skb (6 samples, 0.09%)</title><rect x="728.1" y="371.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="731.1" y="382.0"></text>
</g>
<g>
<title>netif_skb_features (4 samples, 0.06%)</title><rect x="728.5" y="355.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="731.5" y="366.0"></text>
</g>
<g>
<title>validate_xmit_xfrm (2 samples, 0.03%)</title><rect x="729.2" y="371.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="732.2" y="382.0"></text>
</g>
<g>
<title>dev_hard_start_xmit (2 samples, 0.03%)</title><rect x="729.6" y="387.0" width="0.4" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="732.6" y="398.0"></text>
</g>
<g>
<title>ip_output (6 samples, 0.09%)</title><rect x="730.5" y="483.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="733.5" y="494.0"></text>
</g>
<g>
<title>ip_copy_addrs (2 samples, 0.03%)</title><rect x="732.0" y="499.0" width="0.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="735.0" y="510.0"></text>
</g>
<g>
<title>ip_local_out (3 samples, 0.05%)</title><rect x="732.3" y="499.0" width="0.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="735.3" y="510.0"></text>
</g>
<g>
<title>skb_clone (8 samples, 0.12%)</title><rect x="732.9" y="515.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="735.9" y="526.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="733.1" y="499.0" width="0.3" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="736.1" y="510.0"></text>
</g>
<g>
<title>__skb_clone (5 samples, 0.08%)</title><rect x="733.4" y="499.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="736.4" y="510.0"></text>
</g>
<g>
<title>__copy_skb_header (2 samples, 0.03%)</title><rect x="734.0" y="483.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="737.0" y="494.0"></text>
</g>
<g>
<title>bictcp_cwnd_event (4 samples, 0.06%)</title><rect x="735.3" y="531.0" width="0.7" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="738.3" y="542.0"></text>
</g>
<g>
<title>ip_queue_xmit (2 samples, 0.03%)</title><rect x="736.0" y="531.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="739.0" y="542.0"></text>
</g>
<g>
<title>tcp_event_new_data_sent (11 samples, 0.17%)</title><rect x="736.7" y="531.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="739.7" y="542.0"></text>
</g>
<g>
<title>tcp_rearm_rto (8 samples, 0.12%)</title><rect x="737.3" y="515.0" width="1.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="740.3" y="526.0"></text>
</g>
<g>
<title>sk_reset_timer (6 samples, 0.09%)</title><rect x="737.6" y="499.0" width="1.1" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="740.6" y="510.0"></text>
</g>
<g>
<title>mod_timer (6 samples, 0.09%)</title><rect x="737.6" y="483.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="740.6" y="494.0"></text>
</g>
<g>
<title>__lock_text_start (3 samples, 0.05%)</title><rect x="738.2" y="467.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="741.2" y="478.0"></text>
</g>
<g>
<title>tcp_schedule_loss_probe (2 samples, 0.03%)</title><rect x="739.3" y="531.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="742.3" y="542.0"></text>
</g>
<g>
<title>tcp_write_xmit (2 samples, 0.03%)</title><rect x="740.2" y="563.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="743.2" y="574.0"></text>
</g>
<g>
<title>tcp_send_mss (18 samples, 0.28%)</title><rect x="740.6" y="579.0" width="3.3" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="743.6" y="590.0"></text>
</g>
<g>
<title>ipv4_mtu (5 samples, 0.08%)</title><rect x="741.3" y="563.0" width="0.9" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="744.3" y="574.0"></text>
</g>
<g>
<title>tcp_current_mss (9 samples, 0.14%)</title><rect x="742.2" y="563.0" width="1.7" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="745.2" y="574.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (2 samples, 0.03%)</title><rect x="743.9" y="595.0" width="0.3" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="746.9" y="606.0"></text>
</g>
<g>
<title>tcp_tx_timestamp (2 samples, 0.03%)</title><rect x="744.2" y="595.0" width="0.4" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="747.2" y="606.0"></text>
</g>
<g>
<title>inet_send_prepare (2 samples, 0.03%)</title><rect x="744.8" y="627.0" width="0.4" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="747.8" y="638.0"></text>
</g>
<g>
<title>security_socket_sendmsg (4 samples, 0.06%)</title><rect x="745.2" y="627.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="748.2" y="638.0"></text>
</g>
<g>
<title>apparmor_socket_sendmsg (4 samples, 0.06%)</title><rect x="745.2" y="611.0" width="0.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="748.2" y="622.0"></text>
</g>
<g>
<title>aa_sk_perm (4 samples, 0.06%)</title><rect x="745.2" y="595.0" width="0.7" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="748.2" y="606.0"></text>
</g>
<g>
<title>sockfd_lookup_light (31 samples, 0.48%)</title><rect x="745.9" y="643.0" width="5.7" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="748.9" y="654.0"></text>
</g>
<g>
<title>__fdget (24 samples, 0.37%)</title><rect x="746.3" y="627.0" width="4.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="749.3" y="638.0"></text>
</g>
<g>
<title>__fget_light (24 samples, 0.37%)</title><rect x="746.3" y="611.0" width="4.4" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="749.3" y="622.0"></text>
</g>
<g>
<title>__fget (24 samples, 0.37%)</title><rect x="746.3" y="595.0" width="4.4" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="749.3" y="606.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="750.7" y="627.0" width="0.9" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="753.7" y="638.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (10 samples, 0.16%)</title><rect x="751.8" y="803.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="754.8" y="814.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (2 samples, 0.03%)</title><rect x="753.2" y="787.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="756.2" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (2 samples, 0.03%)</title><rect x="753.2" y="771.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="756.2" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.upserting (2 samples, 0.03%)</title><rect x="753.6" y="819.0" width="0.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="756.6" y="830.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.upserting (753 samples, 11.70%)</title><rect x="754.0" y="835.0" width="138.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="757.0" y="846.0">ru/mail/polis/ser..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="755.2" y="819.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="758.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.getBytes (4 samples, 0.06%)</title><rect x="755.6" y="819.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="758.6" y="830.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (3 samples, 0.05%)</title><rect x="755.8" y="803.0" width="0.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="758.8" y="814.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (3 samples, 0.05%)</title><rect x="755.8" y="787.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="758.8" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2 samples, 0.03%)</title><rect x="756.0" y="771.0" width="0.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="759.0" y="782.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.09%)</title><rect x="756.3" y="819.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="759.3" y="830.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (6 samples, 0.09%)</title><rect x="756.3" y="803.0" width="1.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="759.3" y="814.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="756.3" y="787.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="759.3" y="798.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="756.3" y="771.0" width="0.4" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="759.3" y="782.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="756.3" y="755.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="759.3" y="766.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="756.3" y="739.0" width="0.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="759.3" y="750.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="756.7" y="787.0" width="0.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="759.7" y="798.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="756.7" y="771.0" width="0.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="759.7" y="782.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.03%)</title><rect x="756.9" y="755.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="759.9" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="756.9" y="739.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="759.9" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.03%)</title><rect x="756.9" y="723.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="759.9" y="734.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (2 samples, 0.03%)</title><rect x="757.4" y="819.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="760.4" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.contains (3 samples, 0.05%)</title><rect x="757.8" y="819.0" width="0.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="760.8" y="830.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOf (2 samples, 0.03%)</title><rect x="758.0" y="803.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="761.0" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOfRange (2 samples, 0.03%)</title><rect x="758.0" y="787.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.0" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (9 samples, 0.14%)</title><rect x="758.5" y="819.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="761.5" y="830.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="759.8" y="803.0" width="0.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="762.8" y="814.0"></text>
</g>
<g>
<title>one/nio/http/Response.getStatus (2 samples, 0.03%)</title><rect x="760.2" y="819.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="763.2" y="830.0"></text>
</g>
<g>
<title>java/lang/String.charAt (2 samples, 0.03%)</title><rect x="760.2" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="763.2" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (211 samples, 3.28%)</title><rect x="760.6" y="819.0" width="38.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="763.6" y="830.0">ru/..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (10 samples, 0.16%)</title><rect x="762.0" y="803.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="765.0" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (8 samples, 0.12%)</title><rect x="762.4" y="787.0" width="1.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="765.4" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (8 samples, 0.12%)</title><rect x="762.4" y="771.0" width="1.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="765.4" y="782.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (3 samples, 0.05%)</title><rect x="763.3" y="755.0" width="0.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="766.3" y="766.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.getMap (3 samples, 0.05%)</title><rect x="763.3" y="739.0" width="0.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="766.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.unlock (12 samples, 0.19%)</title><rect x="763.9" y="803.0" width="2.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="766.9" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.releaseShared (10 samples, 0.16%)</title><rect x="764.2" y="787.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="767.2" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doReleaseShared (2 samples, 0.03%)</title><rect x="764.2" y="771.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="767.2" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryReleaseShared (8 samples, 0.12%)</title><rect x="764.6" y="771.0" width="1.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="767.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.compareAndSetState (3 samples, 0.05%)</title><rect x="765.3" y="755.0" width="0.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="768.3" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LII_Z (3 samples, 0.05%)</title><rect x="765.3" y="739.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.3" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (163 samples, 2.53%)</title><rect x="766.1" y="803.0" width="29.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="769.1" y="814.0">ru..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (8 samples, 0.12%)</title><rect x="766.2" y="787.0" width="1.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="769.2" y="798.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="767.0" y="771.0" width="0.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="770.0" y="782.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="767.0" y="755.0" width="0.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="770.0" y="766.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="767.0" y="739.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="770.0" y="750.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="767.0" y="723.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.0" y="734.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (2 samples, 0.03%)</title><rect x="767.2" y="707.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="770.2" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (154 samples, 2.39%)</title><rect x="767.7" y="787.0" width="28.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="770.7" y="798.0">ja..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (139 samples, 2.16%)</title><rect x="769.5" y="771.0" width="25.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="772.5" y="782.0">j..</text>
</g>
<g>
<title>java/lang/invoke/VarHandleGuards.guard_LLL_Z (51 samples, 0.79%)</title><rect x="772.5" y="755.0" width="9.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="775.5" y="766.0"></text>
</g>
<g>
<title>java/lang/invoke/VarHandleObjects$FieldInstanceReadWrite.compareAndSet (26 samples, 0.40%)</title><rect x="777.1" y="739.0" width="4.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="780.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Index.&lt;init&gt; (4 samples, 0.06%)</title><rect x="781.8" y="755.0" width="0.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="784.8" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$Node.&lt;init&gt; (6 samples, 0.09%)</title><rect x="782.6" y="755.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="785.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.cpr (60 samples, 0.93%)</title><rect x="784.0" y="755.0" width="11.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="787.0" y="766.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (60 samples, 0.93%)</title><rect x="784.0" y="739.0" width="11.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="787.0" y="750.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (60 samples, 0.93%)</title><rect x="784.0" y="723.0" width="11.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="787.0" y="734.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (55 samples, 0.85%)</title><rect x="784.6" y="707.0" width="10.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="787.6" y="718.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (4 samples, 0.06%)</title><rect x="793.9" y="691.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="796.9" y="702.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.05%)</title><rect x="794.1" y="675.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="797.1" y="686.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.03%)</title><rect x="794.7" y="707.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="797.7" y="718.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="795.0" y="771.0" width="0.4" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="798.0" y="782.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="795.4" y="771.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="798.4" y="782.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 0.05%)</title><rect x="795.4" y="755.0" width="0.5" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="798.4" y="766.0"></text>
</g>
<g>
<title>[vdso] (3 samples, 0.05%)</title><rect x="795.4" y="739.0" width="0.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="798.4" y="750.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (18 samples, 0.28%)</title><rect x="795.9" y="803.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="798.9" y="814.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (17 samples, 0.26%)</title><rect x="796.1" y="787.0" width="3.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="799.1" y="798.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (14 samples, 0.22%)</title><rect x="796.7" y="771.0" width="2.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.7" y="782.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (13 samples, 0.20%)</title><rect x="796.7" y="755.0" width="2.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="799.7" y="766.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (13 samples, 0.20%)</title><rect x="796.7" y="739.0" width="2.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="799.7" y="750.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (13 samples, 0.20%)</title><rect x="796.7" y="723.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="799.7" y="734.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (13 samples, 0.20%)</title><rect x="796.7" y="707.0" width="2.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="799.7" y="718.0"></text>
</g>
<g>
<title>__libc_write (12 samples, 0.19%)</title><rect x="796.7" y="691.0" width="2.2" height="15" fill="#f57474" rx="2" ry="2"/>
<text x="799.7" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (10 samples, 0.16%)</title><rect x="797.0" y="675.0" width="1.9" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="800.0" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (10 samples, 0.16%)</title><rect x="797.0" y="659.0" width="1.9" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.0" y="670.0"></text>
</g>
<g>
<title>__x64_sys_write (8 samples, 0.12%)</title><rect x="797.4" y="643.0" width="1.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="800.4" y="654.0"></text>
</g>
<g>
<title>ksys_write (8 samples, 0.12%)</title><rect x="797.4" y="627.0" width="1.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="800.4" y="638.0"></text>
</g>
<g>
<title>vfs_write (7 samples, 0.11%)</title><rect x="797.6" y="611.0" width="1.3" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="800.6" y="622.0"></text>
</g>
<g>
<title>__vfs_write (6 samples, 0.09%)</title><rect x="797.6" y="595.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="800.6" y="606.0"></text>
</g>
<g>
<title>new_sync_write (6 samples, 0.09%)</title><rect x="797.6" y="579.0" width="1.1" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="800.6" y="590.0"></text>
</g>
<g>
<title>ext4_file_write_iter (6 samples, 0.09%)</title><rect x="797.6" y="563.0" width="1.1" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="800.6" y="574.0"></text>
</g>
<g>
<title>__generic_file_write_iter (5 samples, 0.08%)</title><rect x="797.6" y="547.0" width="0.9" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="800.6" y="558.0"></text>
</g>
<g>
<title>generic_perform_write (5 samples, 0.08%)</title><rect x="797.6" y="531.0" width="0.9" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="800.6" y="542.0"></text>
</g>
<g>
<title>balance_dirty_pages_ratelimited (2 samples, 0.03%)</title><rect x="797.6" y="515.0" width="0.3" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.6" y="526.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.03%)</title><rect x="797.9" y="515.0" width="0.4" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="800.9" y="526.0"></text>
</g>
<g>
<title>generic_write_end (2 samples, 0.03%)</title><rect x="797.9" y="499.0" width="0.4" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="800.9" y="510.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.03%)</title><rect x="797.9" y="483.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="800.9" y="494.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.03%)</title><rect x="797.9" y="467.0" width="0.4" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="800.9" y="478.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.03%)</title><rect x="797.9" y="451.0" width="0.4" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="800.9" y="462.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.03%)</title><rect x="797.9" y="435.0" width="0.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="800.9" y="446.0"></text>
</g>
<g>
<title>ext4_do_update_inode (2 samples, 0.03%)</title><rect x="797.9" y="419.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="800.9" y="430.0"></text>
</g>
<g>
<title>ext4_inode_csum_set (2 samples, 0.03%)</title><rect x="797.9" y="403.0" width="0.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="800.9" y="414.0"></text>
</g>
<g>
<title>ext4_inode_csum.isra.0 (2 samples, 0.03%)</title><rect x="797.9" y="387.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="800.9" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.replicas (49 samples, 0.76%)</title><rect x="799.4" y="819.0" width="9.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="802.4" y="830.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.next (8 samples, 0.12%)</title><rect x="800.1" y="803.0" width="1.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="803.1" y="814.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (8 samples, 0.12%)</title><rect x="800.1" y="787.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.1" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (8 samples, 0.12%)</title><rect x="800.1" y="771.0" width="1.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="803.1" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (4 samples, 0.06%)</title><rect x="800.7" y="755.0" width="0.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="803.7" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (4 samples, 0.06%)</title><rect x="800.7" y="739.0" width="0.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="803.7" y="750.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (7 samples, 0.11%)</title><rect x="801.6" y="803.0" width="1.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="804.6" y="814.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (7 samples, 0.11%)</title><rect x="801.6" y="787.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="804.6" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (4 samples, 0.06%)</title><rect x="801.8" y="771.0" width="0.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="804.8" y="782.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (3 samples, 0.05%)</title><rect x="802.0" y="755.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="805.0" y="766.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (2 samples, 0.03%)</title><rect x="802.5" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="805.5" y="782.0"></text>
</g>
<g>
<title>java/util/ArrayList.contains (2 samples, 0.03%)</title><rect x="803.1" y="803.0" width="0.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="806.1" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOf (2 samples, 0.03%)</title><rect x="803.1" y="787.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="806.1" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOfRange (2 samples, 0.03%)</title><rect x="803.1" y="771.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="806.1" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.getFirstOne (24 samples, 0.37%)</title><rect x="804.0" y="803.0" width="4.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="807.0" y="814.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.hashBytes (20 samples, 0.31%)</title><rect x="804.2" y="787.0" width="3.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="807.2" y="798.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractHashFunction.newHasher (6 samples, 0.09%)</title><rect x="804.2" y="771.0" width="1.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="807.2" y="782.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction.newHasher (6 samples, 0.09%)</title><rect x="804.2" y="755.0" width="1.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="807.2" y="766.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.&lt;init&gt; (6 samples, 0.09%)</title><rect x="804.2" y="739.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="807.2" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (6 samples, 0.09%)</title><rect x="804.2" y="723.0" width="1.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.2" y="734.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.&lt;init&gt; (6 samples, 0.09%)</title><rect x="804.2" y="707.0" width="1.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="807.2" y="718.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (6 samples, 0.09%)</title><rect x="804.2" y="691.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="807.2" y="702.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (5 samples, 0.08%)</title><rect x="804.4" y="675.0" width="0.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="807.4" y="686.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.06%)</title><rect x="804.5" y="659.0" width="0.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="807.5" y="670.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.05%)</title><rect x="804.7" y="643.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="807.7" y="654.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.hash (12 samples, 0.19%)</title><rect x="805.3" y="771.0" width="2.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="808.3" y="782.0"></text>
</g>
<g>
<title>com/google/common/hash/Murmur3_128HashFunction$Murmur3_128Hasher.processRemaining (3 samples, 0.05%)</title><rect x="806.7" y="755.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.7" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (3 samples, 0.05%)</title><rect x="806.7" y="739.0" width="0.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="809.7" y="750.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytes (2 samples, 0.03%)</title><rect x="807.5" y="771.0" width="0.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="810.5" y="782.0"></text>
</g>
<g>
<title>com/google/common/hash/AbstractStreamingHasher.putBytesInternal (2 samples, 0.03%)</title><rect x="807.5" y="755.0" width="0.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="810.5" y="766.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.put (2 samples, 0.03%)</title><rect x="807.5" y="739.0" width="0.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="810.5" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap.ceilingEntry (3 samples, 0.05%)</title><rect x="807.8" y="787.0" width="0.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="810.8" y="798.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (2 samples, 0.03%)</title><rect x="808.0" y="771.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="811.0" y="782.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/ReplicaWorker.getResponses (455 samples, 7.07%)</title><rect x="808.4" y="819.0" width="83.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="811.4" y="830.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.03%)</title><rect x="808.9" y="803.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="811.9" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (2 samples, 0.03%)</title><rect x="808.9" y="787.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="811.9" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.contains (2 samples, 0.03%)</title><rect x="809.3" y="803.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="812.3" y="814.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOf (2 samples, 0.03%)</title><rect x="809.3" y="787.0" width="0.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="812.3" y="798.0"></text>
</g>
<g>
<title>java/util/ArrayList.indexOfRange (2 samples, 0.03%)</title><rect x="809.3" y="771.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="812.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.submit (95 samples, 1.48%)</title><rect x="809.7" y="803.0" width="17.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="812.7" y="814.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.newTaskFor (3 samples, 0.05%)</title><rect x="810.0" y="787.0" width="0.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="813.0" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/AbstractExecutorService.newTaskFor (3 samples, 0.05%)</title><rect x="810.0" y="771.0" width="0.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="813.0" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/FutureTask.&lt;init&gt; (2 samples, 0.03%)</title><rect x="810.2" y="755.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="813.2" y="766.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (2 samples, 0.03%)</title><rect x="810.2" y="739.0" width="0.4" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="813.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (90 samples, 1.40%)</title><rect x="810.6" y="787.0" width="16.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="813.6" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (90 samples, 1.40%)</title><rect x="810.6" y="771.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (90 samples, 1.40%)</title><rect x="810.6" y="755.0" width="16.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="813.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (5 samples, 0.08%)</title><rect x="810.6" y="739.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="813.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (5 samples, 0.08%)</title><rect x="810.6" y="723.0" width="0.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="813.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (5 samples, 0.08%)</title><rect x="810.6" y="707.0" width="0.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="813.6" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="811.5" y="739.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.5" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="811.5" y="723.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.5" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="811.5" y="707.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="814.5" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="811.5" y="691.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="814.5" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="811.5" y="675.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="814.5" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="811.5" y="659.0" width="0.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="814.5" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (83 samples, 1.29%)</title><rect x="811.9" y="739.0" width="15.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="814.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (83 samples, 1.29%)</title><rect x="811.9" y="723.0" width="15.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="814.9" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (83 samples, 1.29%)</title><rect x="811.9" y="707.0" width="15.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="814.9" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (83 samples, 1.29%)</title><rect x="811.9" y="691.0" width="15.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="814.9" y="702.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (69 samples, 1.07%)</title><rect x="814.4" y="675.0" width="12.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="817.4" y="686.0"></text>
</g>
<g>
<title>Unsafe_Unpark (7 samples, 0.11%)</title><rect x="814.6" y="659.0" width="1.3" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="817.6" y="670.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (3 samples, 0.05%)</title><rect x="815.0" y="643.0" width="0.5" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="818.0" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (61 samples, 0.95%)</title><rect x="815.9" y="659.0" width="11.2" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="818.9" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (51 samples, 0.79%)</title><rect x="817.7" y="643.0" width="9.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="820.7" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (51 samples, 0.79%)</title><rect x="817.7" y="627.0" width="9.4" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="820.7" y="638.0"></text>
</g>
<g>
<title>__x64_sys_futex (46 samples, 0.71%)</title><rect x="818.7" y="611.0" width="8.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="821.7" y="622.0"></text>
</g>
<g>
<title>do_futex (45 samples, 0.70%)</title><rect x="818.8" y="595.0" width="8.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="821.8" y="606.0"></text>
</g>
<g>
<title>futex_wake (44 samples, 0.68%)</title><rect x="819.0" y="579.0" width="8.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="822.0" y="590.0"></text>
</g>
<g>
<title>mark_wake_futex (6 samples, 0.09%)</title><rect x="819.2" y="563.0" width="1.1" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="822.2" y="574.0"></text>
</g>
<g>
<title>wake_up_q (36 samples, 0.56%)</title><rect x="820.5" y="563.0" width="6.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="823.5" y="574.0"></text>
</g>
<g>
<title>try_to_wake_up (36 samples, 0.56%)</title><rect x="820.5" y="547.0" width="6.6" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="823.5" y="558.0"></text>
</g>
<g>
<title>__lock_text_start (36 samples, 0.56%)</title><rect x="820.5" y="531.0" width="6.6" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="823.5" y="542.0"></text>
</g>
<g>
<title>java/util/concurrent/ExecutorCompletionService.take (353 samples, 5.48%)</title><rect x="827.1" y="803.0" width="64.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="830.1" y="814.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.take (347 samples, 5.39%)</title><rect x="828.2" y="787.0" width="63.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="831.2" y="798.0">java/ut..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (253 samples, 3.93%)</title><rect x="828.2" y="771.0" width="46.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="831.2" y="782.0">java..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (4 samples, 0.06%)</title><rect x="828.7" y="755.0" width="0.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="831.7" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.06%)</title><rect x="828.7" y="739.0" width="0.8" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="831.7" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (4 samples, 0.06%)</title><rect x="828.7" y="723.0" width="0.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="831.7" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (4 samples, 0.06%)</title><rect x="828.7" y="707.0" width="0.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="831.7" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (4 samples, 0.06%)</title><rect x="828.7" y="691.0" width="0.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="831.7" y="702.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (3 samples, 0.05%)</title><rect x="828.9" y="675.0" width="0.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="831.9" y="686.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (6 samples, 0.09%)</title><rect x="829.5" y="755.0" width="1.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="832.5" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.fullyRelease (23 samples, 0.36%)</title><rect x="830.6" y="755.0" width="4.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="833.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (23 samples, 0.36%)</title><rect x="830.6" y="739.0" width="4.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="833.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (19 samples, 0.30%)</title><rect x="831.3" y="723.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="834.3" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (19 samples, 0.30%)</title><rect x="831.3" y="707.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="834.3" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (17 samples, 0.26%)</title><rect x="831.7" y="691.0" width="3.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="834.7" y="702.0"></text>
</g>
<g>
<title>__pthread_cond_signal (16 samples, 0.25%)</title><rect x="831.9" y="675.0" width="2.9" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="834.9" y="686.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (12 samples, 0.19%)</title><rect x="832.6" y="659.0" width="2.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="835.6" y="670.0"></text>
</g>
<g>
<title>do_syscall_64 (12 samples, 0.19%)</title><rect x="832.6" y="643.0" width="2.2" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="835.6" y="654.0"></text>
</g>
<g>
<title>__x64_sys_futex (11 samples, 0.17%)</title><rect x="832.8" y="627.0" width="2.0" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="835.8" y="638.0"></text>
</g>
<g>
<title>do_futex (11 samples, 0.17%)</title><rect x="832.8" y="611.0" width="2.0" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="835.8" y="622.0"></text>
</g>
<g>
<title>futex_wake (11 samples, 0.17%)</title><rect x="832.8" y="595.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="835.8" y="606.0"></text>
</g>
<g>
<title>wake_up_q (10 samples, 0.16%)</title><rect x="833.0" y="579.0" width="1.8" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="836.0" y="590.0"></text>
</g>
<g>
<title>try_to_wake_up (10 samples, 0.16%)</title><rect x="833.0" y="563.0" width="1.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="836.0" y="574.0"></text>
</g>
<g>
<title>__lock_text_start (10 samples, 0.16%)</title><rect x="833.0" y="547.0" width="1.8" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="836.0" y="558.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (216 samples, 3.36%)</title><rect x="834.8" y="755.0" width="39.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="837.8" y="766.0">jav..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (215 samples, 3.34%)</title><rect x="835.0" y="739.0" width="39.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="838.0" y="750.0">jdk..</text>
</g>
<g>
<title>Unsafe_Park (75 samples, 1.16%)</title><rect x="836.1" y="723.0" width="13.7" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="839.1" y="734.0"></text>
</g>
<g>
<title>JavaThreadParkedState::JavaThreadParkedState(JavaThread*, bool) (3 samples, 0.05%)</title><rect x="836.8" y="707.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="839.8" y="718.0"></text>
</g>
<g>
<title>Parker::park(bool, long) (10 samples, 0.16%)</title><rect x="837.5" y="707.0" width="1.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="840.5" y="718.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="839.6" y="707.0" width="0.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="842.6" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (47 samples, 0.73%)</title><rect x="840.5" y="707.0" width="8.6" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="843.5" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (23 samples, 0.36%)</title><rect x="844.9" y="691.0" width="4.2" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="847.9" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (22 samples, 0.34%)</title><rect x="845.1" y="675.0" width="4.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="848.1" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (9 samples, 0.14%)</title><rect x="847.4" y="659.0" width="1.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="850.4" y="670.0"></text>
</g>
<g>
<title>do_futex (8 samples, 0.12%)</title><rect x="847.6" y="643.0" width="1.5" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="850.6" y="654.0"></text>
</g>
<g>
<title>futex_wake (6 samples, 0.09%)</title><rect x="847.8" y="627.0" width="1.1" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="850.8" y="638.0"></text>
</g>
<g>
<title>get_futex_key (4 samples, 0.06%)</title><rect x="848.2" y="611.0" width="0.7" height="15" fill="#f89400" rx="2" ry="2"/>
<text x="851.2" y="622.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (4 samples, 0.06%)</title><rect x="848.2" y="595.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="851.2" y="606.0"></text>
</g>
<g>
<title>os::is_interrupted(Thread*, bool) (3 samples, 0.05%)</title><rect x="849.3" y="707.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="852.3" y="718.0"></text>
</g>
<g>
<title>[unknown] (132 samples, 2.05%)</title><rect x="849.8" y="723.0" width="24.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="852.8" y="734.0">[..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.03%)</title><rect x="849.8" y="707.0" width="0.4" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="852.8" y="718.0"></text>
</g>
<g>
<title>__GI___pthread_mutex_trylock (2 samples, 0.03%)</title><rect x="850.2" y="707.0" width="0.4" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="853.2" y="718.0"></text>
</g>
<g>
<title>__pthread_cond_wait (114 samples, 1.77%)</title><rect x="850.7" y="707.0" width="20.9" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="853.7" y="718.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (25 samples, 0.39%)</title><rect x="867.0" y="691.0" width="4.6" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="870.0" y="702.0"></text>
</g>
<g>
<title>do_syscall_64 (25 samples, 0.39%)</title><rect x="867.0" y="675.0" width="4.6" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="870.0" y="686.0"></text>
</g>
<g>
<title>__x64_sys_futex (18 samples, 0.28%)</title><rect x="868.3" y="659.0" width="3.3" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="871.3" y="670.0"></text>
</g>
<g>
<title>do_futex (16 samples, 0.25%)</title><rect x="868.5" y="643.0" width="2.9" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="871.5" y="654.0"></text>
</g>
<g>
<title>futex_wait (15 samples, 0.23%)</title><rect x="868.5" y="627.0" width="2.8" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="871.5" y="638.0"></text>
</g>
<g>
<title>futex_wait_queue_me (4 samples, 0.06%)</title><rect x="869.1" y="611.0" width="0.7" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="872.1" y="622.0"></text>
</g>
<g>
<title>schedule (4 samples, 0.06%)</title><rect x="869.1" y="595.0" width="0.7" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="872.1" y="606.0"></text>
</g>
<g>
<title>__sched_text_start (3 samples, 0.05%)</title><rect x="869.2" y="579.0" width="0.6" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="872.2" y="590.0"></text>
</g>
<g>
<title>futex_wait_setup (7 samples, 0.11%)</title><rect x="869.8" y="611.0" width="1.3" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="872.8" y="622.0"></text>
</g>
<g>
<title>get_futex_key (2 samples, 0.03%)</title><rect x="870.0" y="595.0" width="0.3" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="873.0" y="606.0"></text>
</g>
<g>
<title>get_futex_value_locked (4 samples, 0.06%)</title><rect x="870.3" y="595.0" width="0.8" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="873.3" y="606.0"></text>
</g>
<g>
<title>__pthread_disable_asynccancel (8 samples, 0.12%)</title><rect x="871.6" y="707.0" width="1.5" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="874.6" y="718.0"></text>
</g>
<g>
<title>__pthread_mutex_cond_lock (3 samples, 0.05%)</title><rect x="873.3" y="707.0" width="0.5" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="876.3" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (2 samples, 0.03%)</title><rect x="874.6" y="771.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="877.6" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (2 samples, 0.03%)</title><rect x="874.6" y="755.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.6" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (2 samples, 0.03%)</title><rect x="874.6" y="739.0" width="0.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="877.6" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.enq (2 samples, 0.03%)</title><rect x="874.6" y="723.0" width="0.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="877.6" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (13 samples, 0.20%)</title><rect x="874.9" y="771.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="877.9" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (13 samples, 0.20%)</title><rect x="874.9" y="755.0" width="2.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="877.9" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (13 samples, 0.20%)</title><rect x="874.9" y="739.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="877.9" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (7 samples, 0.11%)</title><rect x="876.0" y="723.0" width="1.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="879.0" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (7 samples, 0.11%)</title><rect x="876.0" y="707.0" width="1.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="879.0" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (6 samples, 0.09%)</title><rect x="876.2" y="691.0" width="1.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="879.2" y="702.0"></text>
</g>
<g>
<title>[unknown] (5 samples, 0.08%)</title><rect x="876.4" y="675.0" width="0.9" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="879.4" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_wait (4 samples, 0.06%)</title><rect x="876.4" y="659.0" width="0.7" height="15" fill="#ed6a6a" rx="2" ry="2"/>
<text x="879.4" y="670.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.03%)</title><rect x="876.8" y="643.0" width="0.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="879.8" y="654.0"></text>
</g>
<g>
<title>do_syscall_64 (2 samples, 0.03%)</title><rect x="876.8" y="627.0" width="0.3" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="879.8" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (79 samples, 1.23%)</title><rect x="877.3" y="771.0" width="14.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="880.3" y="782.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (79 samples, 1.23%)</title><rect x="877.3" y="755.0" width="14.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="880.3" y="766.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (79 samples, 1.23%)</title><rect x="877.3" y="739.0" width="14.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="880.3" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (79 samples, 1.23%)</title><rect x="877.3" y="723.0" width="14.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="880.3" y="734.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (69 samples, 1.07%)</title><rect x="879.1" y="707.0" width="12.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="882.1" y="718.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="879.1" y="691.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="882.1" y="702.0"></text>
</g>
<g>
<title>Unsafe_Unpark (9 samples, 0.14%)</title><rect x="879.5" y="691.0" width="1.7" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="882.5" y="702.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (2 samples, 0.03%)</title><rect x="880.2" y="675.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="883.2" y="686.0"></text>
</g>
<g>
<title>pthread_mutex_lock (2 samples, 0.03%)</title><rect x="880.8" y="675.0" width="0.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="883.8" y="686.0"></text>
</g>
<g>
<title>__pthread_cond_signal (58 samples, 0.90%)</title><rect x="881.2" y="691.0" width="10.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="884.2" y="702.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (51 samples, 0.79%)</title><rect x="882.4" y="675.0" width="9.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="885.4" y="686.0"></text>
</g>
<g>
<title>do_syscall_64 (51 samples, 0.79%)</title><rect x="882.4" y="659.0" width="9.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="885.4" y="670.0"></text>
</g>
<g>
<title>__x64_sys_futex (48 samples, 0.75%)</title><rect x="883.0" y="643.0" width="8.8" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="886.0" y="654.0"></text>
</g>
<g>
<title>do_futex (48 samples, 0.75%)</title><rect x="883.0" y="627.0" width="8.8" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="886.0" y="638.0"></text>
</g>
<g>
<title>futex_wake (48 samples, 0.75%)</title><rect x="883.0" y="611.0" width="8.8" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="886.0" y="622.0"></text>
</g>
<g>
<title>wake_up_q (45 samples, 0.70%)</title><rect x="883.5" y="595.0" width="8.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="886.5" y="606.0"></text>
</g>
<g>
<title>try_to_wake_up (44 samples, 0.68%)</title><rect x="883.7" y="579.0" width="8.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="886.7" y="590.0"></text>
</g>
<g>
<title>__lock_text_start (43 samples, 0.67%)</title><rect x="883.7" y="563.0" width="7.9" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="886.7" y="574.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (1,391 samples, 21.61%)</title><rect x="892.0" y="931.0" width="254.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="895.0" y="942.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="893.4" y="915.0" width="0.4" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="896.4" y="926.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="893.4" y="899.0" width="0.4" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="896.4" y="910.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (2 samples, 0.03%)</title><rect x="893.4" y="883.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="896.4" y="894.0"></text>
</g>
<g>
<title>gettimeofday (2 samples, 0.03%)</title><rect x="894.0" y="915.0" width="0.4" height="15" fill="#e15a5a" rx="2" ry="2"/>
<text x="897.0" y="926.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (345 samples, 5.36%)</title><rect x="894.7" y="915.0" width="63.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="897.7" y="926.0">one/nio..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (338 samples, 5.25%)</title><rect x="896.0" y="899.0" width="62.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="899.0" y="910.0">one/ni..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (15 samples, 0.23%)</title><rect x="897.3" y="883.0" width="2.7" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="900.3" y="894.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (5 samples, 0.08%)</title><rect x="900.0" y="883.0" width="1.0" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="903.0" y="894.0"></text>
</g>
<g>
<title>clock_gettime (14 samples, 0.22%)</title><rect x="901.0" y="883.0" width="2.5" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="904.0" y="894.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.03%)</title><rect x="903.2" y="867.0" width="0.3" height="15" fill="#e25b5b" rx="2" ry="2"/>
<text x="906.2" y="878.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.03%)</title><rect x="903.2" y="851.0" width="0.3" height="15" fill="#f67676" rx="2" ry="2"/>
<text x="906.2" y="862.0"></text>
</g>
<g>
<title>epoll_wait (297 samples, 4.61%)</title><rect x="903.5" y="883.0" width="54.5" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="906.5" y="894.0">epoll..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (211 samples, 3.28%)</title><rect x="919.3" y="867.0" width="38.7" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="922.3" y="878.0">ent..</text>
</g>
<g>
<title>do_syscall_64 (209 samples, 3.25%)</title><rect x="919.7" y="851.0" width="38.3" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="922.7" y="862.0">do_..</text>
</g>
<g>
<title>__x64_sys_epoll_wait (196 samples, 3.04%)</title><rect x="922.0" y="835.0" width="36.0" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="925.0" y="846.0">__x..</text>
</g>
<g>
<title>do_epoll_wait (195 samples, 3.03%)</title><rect x="922.0" y="819.0" width="35.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="925.0" y="830.0">do_..</text>
</g>
<g>
<title>__fdget (8 samples, 0.12%)</title><rect x="923.1" y="803.0" width="1.5" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="926.1" y="814.0"></text>
</g>
<g>
<title>__fget_light (8 samples, 0.12%)</title><rect x="923.1" y="787.0" width="1.5" height="15" fill="#f38f00" rx="2" ry="2"/>
<text x="926.1" y="798.0"></text>
</g>
<g>
<title>__fget (8 samples, 0.12%)</title><rect x="923.1" y="771.0" width="1.5" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="926.1" y="782.0"></text>
</g>
<g>
<title>__fget_light (5 samples, 0.08%)</title><rect x="924.6" y="803.0" width="0.9" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="927.6" y="814.0"></text>
</g>
<g>
<title>ep_poll (167 samples, 2.59%)</title><rect x="925.5" y="803.0" width="30.6" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="928.5" y="814.0">ep..</text>
</g>
<g>
<title>ep_scan_ready_list.constprop.0 (129 samples, 2.00%)</title><rect x="927.9" y="787.0" width="23.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="930.9" y="798.0">e..</text>
</g>
<g>
<title>ep_send_events_proc (111 samples, 1.72%)</title><rect x="930.8" y="771.0" width="20.4" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="933.8" y="782.0"></text>
</g>
<g>
<title>ep_item_poll.isra.0 (77 samples, 1.20%)</title><rect x="935.8" y="755.0" width="14.1" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="938.8" y="766.0"></text>
</g>
<g>
<title>sock_poll (65 samples, 1.01%)</title><rect x="937.4" y="739.0" width="11.9" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="940.4" y="750.0"></text>
</g>
<g>
<title>tcp_poll (14 samples, 0.22%)</title><rect x="943.3" y="723.0" width="2.6" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="946.3" y="734.0"></text>
</g>
<g>
<title>tcp_stream_memory_free (19 samples, 0.30%)</title><rect x="945.9" y="723.0" width="3.4" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="948.9" y="734.0"></text>
</g>
<g>
<title>tcp_poll (3 samples, 0.05%)</title><rect x="949.3" y="739.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="952.3" y="750.0"></text>
</g>
<g>
<title>sock_poll (7 samples, 0.11%)</title><rect x="949.9" y="755.0" width="1.3" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="952.9" y="766.0"></text>
</g>
<g>
<title>mutex_lock (2 samples, 0.03%)</title><rect x="951.2" y="771.0" width="0.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="954.2" y="782.0"></text>
</g>
<g>
<title>mutex_unlock (10 samples, 0.16%)</title><rect x="951.5" y="787.0" width="1.9" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="954.5" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range (12 samples, 0.19%)</title><rect x="953.4" y="787.0" width="2.2" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="956.4" y="798.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (11 samples, 0.17%)</title><rect x="953.6" y="771.0" width="2.0" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="956.6" y="782.0"></text>
</g>
<g>
<title>schedule (11 samples, 0.17%)</title><rect x="953.6" y="755.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="956.6" y="766.0"></text>
</g>
<g>
<title>__sched_text_start (8 samples, 0.12%)</title><rect x="954.1" y="739.0" width="1.5" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="957.1" y="750.0"></text>
</g>
<g>
<title>finish_task_switch (6 samples, 0.09%)</title><rect x="954.5" y="723.0" width="1.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="957.5" y="734.0"></text>
</g>
<g>
<title>schedule_hrtimeout_range_clock (3 samples, 0.05%)</title><rect x="955.6" y="787.0" width="0.5" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="958.6" y="798.0"></text>
</g>
<g>
<title>fput_many (9 samples, 0.14%)</title><rect x="956.1" y="803.0" width="1.7" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="959.1" y="814.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (1,028 samples, 15.97%)</title><rect x="958.0" y="915.0" width="188.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="961.0" y="926.0">one/nio/net/Session.proc..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1,019 samples, 15.83%)</title><rect x="959.4" y="899.0" width="186.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="962.4" y="910.0">one/nio/http/HttpSession..</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (788 samples, 12.24%)</title><rect x="959.4" y="883.0" width="144.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="962.4" y="894.0">one/nio/http/HttpS..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (11 samples, 0.17%)</title><rect x="962.0" y="867.0" width="2.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="965.0" y="878.0"></text>
</g>
<g>
<title>itable stub (11 samples, 0.17%)</title><rect x="964.0" y="867.0" width="2.0" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="967.0" y="878.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (4 samples, 0.06%)</title><rect x="966.2" y="867.0" width="0.7" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="969.2" y="878.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (632 samples, 9.82%)</title><rect x="966.9" y="867.0" width="115.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="969.9" y="878.0">one/nio/http/H..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (632 samples, 9.82%)</title><rect x="966.9" y="851.0" width="115.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="969.9" y="862.0">one/nio/http/H..</text>
</g>
<g>
<title>RequestHandler1_entity.handleRequest (613 samples, 9.52%)</title><rect x="967.5" y="835.0" width="112.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="970.5" y="846.0">RequestHandler..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (38 samples, 0.59%)</title><rect x="967.7" y="819.0" width="6.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="970.7" y="830.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (14 samples, 0.22%)</title><rect x="969.0" y="803.0" width="2.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.0" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (14 samples, 0.22%)</title><rect x="969.0" y="787.0" width="2.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="972.0" y="798.0"></text>
</g>
<g>
<title>java/lang/String.substring (7 samples, 0.11%)</title><rect x="971.5" y="803.0" width="1.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="974.5" y="814.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7 samples, 0.11%)</title><rect x="971.5" y="787.0" width="1.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="974.5" y="798.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2 samples, 0.03%)</title><rect x="972.1" y="771.0" width="0.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="975.1" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="972.1" y="755.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="975.1" y="766.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="972.1" y="739.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="975.1" y="750.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="972.1" y="723.0" width="0.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="975.1" y="734.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="972.1" y="707.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.1" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="972.1" y="691.0" width="0.3" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="975.1" y="702.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.03%)</title><rect x="972.4" y="771.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="975.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (9 samples, 0.14%)</title><rect x="973.0" y="803.0" width="1.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="976.0" y="814.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="974.1" y="787.0" width="0.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="977.1" y="798.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 0.05%)</title><rect x="974.1" y="771.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.1" y="782.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 0.05%)</title><rect x="974.1" y="755.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="977.1" y="766.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.entity (574 samples, 8.92%)</title><rect x="974.6" y="819.0" width="105.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="977.6" y="830.0">ru/mail/polis..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.runExecutorService (435 samples, 6.76%)</title><rect x="975.7" y="803.0" width="79.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="978.7" y="814.0">ru/mail/p..</text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (3 samples, 0.05%)</title><rect x="976.7" y="787.0" width="0.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="979.7" y="798.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (427 samples, 6.63%)</title><rect x="977.2" y="787.0" width="78.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="980.2" y="798.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.offer (427 samples, 6.63%)</title><rect x="977.2" y="771.0" width="78.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.2" y="782.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/LinkedBlockingQueue.signalNotEmpty (427 samples, 6.63%)</title><rect x="977.2" y="755.0" width="78.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="980.2" y="766.0">java/util..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.signal (16 samples, 0.25%)</title><rect x="977.2" y="739.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="980.2" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.doSignal (16 samples, 0.25%)</title><rect x="977.2" y="723.0" width="2.9" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="980.2" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.transferForSignal (16 samples, 0.25%)</title><rect x="977.2" y="707.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="980.2" y="718.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (4 samples, 0.06%)</title><rect x="979.4" y="691.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="982.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (2 samples, 0.03%)</title><rect x="980.1" y="739.0" width="0.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="983.1" y="750.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (2 samples, 0.03%)</title><rect x="980.1" y="723.0" width="0.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="983.1" y="734.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireQueued (2 samples, 0.03%)</title><rect x="980.1" y="707.0" width="0.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="983.1" y="718.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.parkAndCheckInterrupt (2 samples, 0.03%)</title><rect x="980.1" y="691.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="983.1" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.park (2 samples, 0.03%)</title><rect x="980.1" y="675.0" width="0.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="983.1" y="686.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.park (2 samples, 0.03%)</title><rect x="980.1" y="659.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="983.1" y="670.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.unlock (409 samples, 6.35%)</title><rect x="980.5" y="739.0" width="75.0" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="983.5" y="750.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.release (409 samples, 6.35%)</title><rect x="980.5" y="723.0" width="75.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="983.5" y="734.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.unparkSuccessor (409 samples, 6.35%)</title><rect x="980.5" y="707.0" width="75.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="983.5" y="718.0">java/uti..</text>
</g>
<g>
<title>java/util/concurrent/locks/LockSupport.unpark (409 samples, 6.35%)</title><rect x="980.5" y="691.0" width="75.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="983.5" y="702.0">java/uti..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.unpark (384 samples, 5.96%)</title><rect x="985.1" y="675.0" width="70.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="988.1" y="686.0">jdk/inte..</text>
</g>
<g>
<title>Parker::unpark() (5 samples, 0.08%)</title><rect x="985.5" y="659.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="988.5" y="670.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (3 samples, 0.05%)</title><rect x="986.6" y="659.0" width="0.5" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="989.6" y="670.0"></text>
</g>
<g>
<title>Unsafe_Unpark (52 samples, 0.81%)</title><rect x="987.1" y="659.0" width="9.5" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="990.1" y="670.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (5 samples, 0.08%)</title><rect x="988.4" y="643.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="991.4" y="654.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="989.3" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="992.3" y="654.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.235] (2 samples, 0.03%)</title><rect x="989.7" y="643.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="992.7" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::ThreadsListHandle(Thread*) (4 samples, 0.06%)</title><rect x="990.0" y="643.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="993.0" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::cv_internal_thread_to_JavaThread(_jobject*, JavaThread**, oopDesc**) (12 samples, 0.19%)</title><rect x="990.8" y="643.0" width="2.2" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="993.8" y="654.0"></text>
</g>
<g>
<title>ThreadsListHandle::~ThreadsListHandle() (2 samples, 0.03%)</title><rect x="993.0" y="643.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="996.0" y="654.0"></text>
</g>
<g>
<title>__pthread_mutex_unlock (5 samples, 0.08%)</title><rect x="993.3" y="643.0" width="0.9" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="996.3" y="654.0"></text>
</g>
<g>
<title>oopDesc::address_field(int) const (4 samples, 0.06%)</title><rect x="994.4" y="643.0" width="0.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="997.4" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock (5 samples, 0.08%)</title><rect x="995.2" y="643.0" width="0.9" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="998.2" y="654.0"></text>
</g>
<g>
<title>pthread_mutex_lock@plt (3 samples, 0.05%)</title><rect x="996.1" y="643.0" width="0.5" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="999.1" y="654.0"></text>
</g>
<g>
<title>[unknown] (2 samples, 0.03%)</title><rect x="996.6" y="659.0" width="0.4" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="999.6" y="670.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/ld-2.31.so (2 samples, 0.03%)</title><rect x="996.6" y="643.0" width="0.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="999.6" y="654.0"></text>
</g>
<g>
<title>__pthread_cond_signal (307 samples, 4.77%)</title><rect x="997.0" y="659.0" width="56.3" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1000.0" y="670.0">__pthr..</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (262 samples, 4.07%)</title><rect x="1005.2" y="643.0" width="48.1" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1008.2" y="654.0">entr..</text>
</g>
<g>
<title>__x64_sys_futex (2 samples, 0.03%)</title><rect x="1005.2" y="627.0" width="0.4" height="15" fill="#fa9600" rx="2" ry="2"/>
<text x="1008.2" y="638.0"></text>
</g>
<g>
<title>do_syscall_64 (260 samples, 4.04%)</title><rect x="1005.6" y="627.0" width="47.7" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1008.6" y="638.0">do_s..</text>
</g>
<g>
<title>__x64_sys_futex (242 samples, 3.76%)</title><rect x="1008.9" y="611.0" width="44.4" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1011.9" y="622.0">__x6..</text>
</g>
<g>
<title>do_futex (237 samples, 3.68%)</title><rect x="1009.6" y="595.0" width="43.5" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1012.6" y="606.0">do_f..</text>
</g>
<g>
<title>_raw_spin_lock (4 samples, 0.06%)</title><rect x="1009.6" y="579.0" width="0.8" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1012.6" y="590.0"></text>
</g>
<g>
<title>futex_wake (227 samples, 3.53%)</title><rect x="1010.4" y="579.0" width="41.6" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1013.4" y="590.0">fut..</text>
</g>
<g>
<title>get_futex_key (6 samples, 0.09%)</title><rect x="1012.6" y="563.0" width="1.1" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1015.6" y="574.0"></text>
</g>
<g>
<title>get_futex_key_refs.isra.0 (2 samples, 0.03%)</title><rect x="1013.3" y="547.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1016.3" y="558.0"></text>
</g>
<g>
<title>mark_wake_futex (13 samples, 0.20%)</title><rect x="1013.7" y="563.0" width="2.4" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1016.7" y="574.0"></text>
</g>
<g>
<title>__unqueue_futex (2 samples, 0.03%)</title><rect x="1015.5" y="547.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1018.5" y="558.0"></text>
</g>
<g>
<title>wake_q_add_safe (2 samples, 0.03%)</title><rect x="1016.1" y="563.0" width="0.3" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1019.1" y="574.0"></text>
</g>
<g>
<title>wake_up_q (194 samples, 3.01%)</title><rect x="1016.4" y="563.0" width="35.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1019.4" y="574.0">wak..</text>
</g>
<g>
<title>try_to_wake_up (192 samples, 2.98%)</title><rect x="1016.8" y="547.0" width="35.2" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1019.8" y="558.0">try..</text>
</g>
<g>
<title>__lock_text_start (192 samples, 2.98%)</title><rect x="1016.8" y="531.0" width="35.2" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1019.8" y="542.0">__l..</text>
</g>
<g>
<title>hash_futex (5 samples, 0.08%)</title><rect x="1052.2" y="579.0" width="0.9" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1055.2" y="590.0"></text>
</g>
<g>
<title>__tls_get_addr (7 samples, 0.11%)</title><rect x="1053.3" y="659.0" width="1.3" height="15" fill="#ea6666" rx="2" ry="2"/>
<text x="1056.3" y="670.0"></text>
</g>
<g>
<title>__tls_get_addr@plt (2 samples, 0.03%)</title><rect x="1054.6" y="659.0" width="0.3" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1057.6" y="670.0"></text>
</g>
<g>
<title>java_lang_Thread::park_event(oopDesc*) (3 samples, 0.05%)</title><rect x="1054.9" y="659.0" width="0.6" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1057.9" y="670.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewTopology.all (133 samples, 2.07%)</title><rect x="1055.5" y="803.0" width="24.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1058.5" y="814.0">r..</text>
</g>
<g>
<title>java/util/Set.copyOf (133 samples, 2.07%)</title><rect x="1055.5" y="787.0" width="24.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1058.5" y="798.0">j..</text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (23 samples, 0.36%)</title><rect x="1055.8" y="771.0" width="4.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1058.8" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1057.9" y="755.0" width="0.3" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1060.9" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$KeyIterator.next (10 samples, 0.16%)</title><rect x="1058.2" y="755.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1061.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap$HashIterator.nextNode (10 samples, 0.16%)</title><rect x="1058.2" y="739.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1061.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.&lt;init&gt; (78 samples, 1.21%)</title><rect x="1060.0" y="771.0" width="14.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1063.0" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.addAll (77 samples, 1.20%)</title><rect x="1060.2" y="755.0" width="14.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1063.2" y="766.0"></text>
</g>
<g>
<title>java/util/HashMap.put (5 samples, 0.08%)</title><rect x="1060.2" y="739.0" width="0.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1063.2" y="750.0"></text>
</g>
<g>
<title>java/util/HashSet.add (64 samples, 0.99%)</title><rect x="1061.1" y="739.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1064.1" y="750.0"></text>
</g>
<g>
<title>java/util/HashMap.put (58 samples, 0.90%)</title><rect x="1062.2" y="723.0" width="10.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1065.2" y="734.0"></text>
</g>
<g>
<title>java/util/HashMap.putVal (58 samples, 0.90%)</title><rect x="1062.2" y="707.0" width="10.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1065.2" y="718.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.06%)</title><rect x="1064.4" y="691.0" width="0.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1067.4" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.afterNodeInsertion (4 samples, 0.06%)</title><rect x="1065.2" y="691.0" width="0.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1068.2" y="702.0"></text>
</g>
<g>
<title>java/util/HashMap.newNode (18 samples, 0.28%)</title><rect x="1065.9" y="691.0" width="3.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1068.9" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.05%)</title><rect x="1068.7" y="675.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1071.7" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1068.8" y="659.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1071.8" y="670.0"></text>
</g>
<g>
<title>java/util/HashMap.resize (14 samples, 0.22%)</title><rect x="1069.2" y="691.0" width="2.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1072.2" y="702.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (8 samples, 0.12%)</title><rect x="1070.1" y="675.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1073.1" y="686.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (7 samples, 0.11%)</title><rect x="1070.1" y="659.0" width="1.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.1" y="670.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (7 samples, 0.11%)</title><rect x="1070.1" y="643.0" width="1.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1073.1" y="654.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (7 samples, 0.11%)</title><rect x="1070.1" y="627.0" width="1.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1073.1" y="638.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (5 samples, 0.08%)</title><rect x="1070.3" y="611.0" width="0.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1073.3" y="622.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (2 samples, 0.03%)</title><rect x="1070.5" y="595.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1073.5" y="606.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (2 samples, 0.03%)</title><rect x="1070.5" y="579.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1073.5" y="590.0"></text>
</g>
<g>
<title>Monitor::lock() (2 samples, 0.03%)</title><rect x="1070.5" y="563.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.5" y="574.0"></text>
</g>
<g>
<title>ThreadLocalAllocBuffer::clear_before_allocation() (2 samples, 0.03%)</title><rect x="1070.9" y="595.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1073.9" y="606.0"></text>
</g>
<g>
<title>vtable stub (6 samples, 0.09%)</title><rect x="1071.8" y="691.0" width="1.1" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1074.8" y="702.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeyIterator.next (3 samples, 0.05%)</title><rect x="1072.9" y="739.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1075.9" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$PrivateEntryIterator.nextEntry (3 samples, 0.05%)</title><rect x="1072.9" y="723.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="1075.9" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (3 samples, 0.05%)</title><rect x="1072.9" y="707.0" width="0.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1075.9" y="718.0"></text>
</g>
<g>
<title>java/util/TreeSet.iterator (5 samples, 0.08%)</title><rect x="1073.4" y="739.0" width="0.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1076.4" y="750.0"></text>
</g>
<g>
<title>java/util/TreeMap$KeySet.iterator (5 samples, 0.08%)</title><rect x="1073.4" y="723.0" width="0.9" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1076.4" y="734.0"></text>
</g>
<g>
<title>java/util/TreeMap.keyIterator (5 samples, 0.08%)</title><rect x="1073.4" y="707.0" width="0.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1076.4" y="718.0"></text>
</g>
<g>
<title>java/util/TreeMap.getFirstEntry (5 samples, 0.08%)</title><rect x="1073.4" y="691.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1076.4" y="702.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (3 samples, 0.05%)</title><rect x="1073.8" y="675.0" width="0.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1076.8" y="686.0"></text>
</g>
<g>
<title>java/util/Set.of (30 samples, 0.47%)</title><rect x="1074.3" y="771.0" width="5.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1077.3" y="782.0"></text>
</g>
<g>
<title>java/util/AbstractCollection.toArray (6 samples, 0.09%)</title><rect x="1075.4" y="755.0" width="1.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1078.4" y="766.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.&lt;init&gt; (18 samples, 0.28%)</title><rect x="1076.5" y="755.0" width="3.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1079.5" y="766.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1076.5" y="739.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1079.5" y="750.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_objArray(int, int, Thread*) (2 samples, 0.03%)</title><rect x="1076.5" y="723.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1079.5" y="734.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1076.5" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1079.5" y="718.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1076.5" y="691.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1079.5" y="702.0"></text>
</g>
<g>
<title>java/util/ImmutableCollections$SetN.probe (16 samples, 0.25%)</title><rect x="1076.9" y="739.0" width="2.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1079.9" y="750.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (4 samples, 0.06%)</title><rect x="1078.9" y="723.0" width="0.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1081.9" y="734.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (4 samples, 0.06%)</title><rect x="1078.9" y="707.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1081.9" y="718.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (15 samples, 0.23%)</title><rect x="1079.8" y="835.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1082.8" y="846.0"></text>
</g>
<g>
<title>java/util/HashMap.get (15 samples, 0.23%)</title><rect x="1079.8" y="819.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1082.8" y="830.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (3 samples, 0.05%)</title><rect x="1079.8" y="803.0" width="0.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1082.8" y="814.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (12 samples, 0.19%)</title><rect x="1080.4" y="803.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1083.4" y="814.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (12 samples, 0.19%)</title><rect x="1080.4" y="787.0" width="2.2" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1083.4" y="798.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (12 samples, 0.19%)</title><rect x="1080.4" y="771.0" width="2.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1083.4" y="782.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (32 samples, 0.50%)</title><rect x="1082.8" y="867.0" width="5.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1085.8" y="878.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.03%)</title><rect x="1083.1" y="851.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1086.1" y="862.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.03%)</title><rect x="1083.1" y="835.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1086.1" y="846.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.03%)</title><rect x="1083.1" y="819.0" width="0.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1086.1" y="830.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1083.1" y="803.0" width="0.4" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1086.1" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1083.1" y="787.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1086.1" y="798.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (10 samples, 0.16%)</title><rect x="1083.5" y="851.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1086.5" y="862.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.14%)</title><rect x="1083.7" y="835.0" width="1.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1086.7" y="846.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (9 samples, 0.14%)</title><rect x="1083.7" y="819.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1086.7" y="830.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (9 samples, 0.14%)</title><rect x="1083.7" y="803.0" width="1.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1086.7" y="814.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (5 samples, 0.08%)</title><rect x="1084.4" y="787.0" width="0.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1087.4" y="798.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (15 samples, 0.23%)</title><rect x="1085.3" y="851.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1088.3" y="862.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14 samples, 0.22%)</title><rect x="1085.5" y="835.0" width="2.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1088.5" y="846.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (2 samples, 0.03%)</title><rect x="1087.4" y="819.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1090.4" y="830.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1087.4" y="803.0" width="0.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1090.4" y="814.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (2 samples, 0.03%)</title><rect x="1087.4" y="787.0" width="0.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1090.4" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.03%)</title><rect x="1087.4" y="771.0" width="0.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1090.4" y="782.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.05%)</title><rect x="1088.1" y="851.0" width="0.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1091.1" y="862.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (18 samples, 0.28%)</title><rect x="1088.8" y="867.0" width="3.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1091.8" y="878.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (8 samples, 0.12%)</title><rect x="1089.0" y="851.0" width="1.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1092.0" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (8 samples, 0.12%)</title><rect x="1089.0" y="835.0" width="1.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1092.0" y="846.0"></text>
</g>
<g>
<title>java/lang/String.substring (9 samples, 0.14%)</title><rect x="1090.5" y="851.0" width="1.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1093.5" y="862.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (9 samples, 0.14%)</title><rect x="1090.5" y="835.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1093.5" y="846.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (64 samples, 0.99%)</title><rect x="1092.1" y="867.0" width="11.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1095.1" y="878.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (29 samples, 0.45%)</title><rect x="1098.5" y="851.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1101.5" y="862.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_C(Klass*, int, JavaThread*) (3 samples, 0.05%)</title><rect x="1102.0" y="835.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1105.0" y="846.0"></text>
</g>
<g>
<title>TypeArrayKlass::allocate_common(int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1102.0" y="819.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.0" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::array_allocate(Klass*, int, int, bool, Thread*) (3 samples, 0.05%)</title><rect x="1102.0" y="803.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1105.0" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="1102.0" y="787.0" width="0.6" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1105.0" y="798.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.03%)</title><rect x="1102.0" y="771.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1105.0" y="782.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (4 samples, 0.06%)</title><rect x="1102.6" y="835.0" width="0.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1105.6" y="846.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.05%)</title><rect x="1102.8" y="819.0" width="0.5" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1105.8" y="830.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.05%)</title><rect x="1102.8" y="803.0" width="0.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1105.8" y="814.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.05%)</title><rect x="1102.8" y="787.0" width="0.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1105.8" y="798.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1103.5" y="835.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1106.5" y="846.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (2 samples, 0.03%)</title><rect x="1103.5" y="819.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1106.5" y="830.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (2 samples, 0.03%)</title><rect x="1103.5" y="803.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="1106.5" y="814.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (3 samples, 0.05%)</title><rect x="1103.9" y="883.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1106.9" y="894.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (228 samples, 3.54%)</title><rect x="1104.4" y="883.0" width="41.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1107.4" y="894.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (225 samples, 3.49%)</title><rect x="1105.0" y="867.0" width="41.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1108.0" y="878.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (31 samples, 0.48%)</title><rect x="1106.4" y="851.0" width="5.7" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1109.4" y="862.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.03%)</title><rect x="1106.6" y="835.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1109.6" y="846.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (2 samples, 0.03%)</title><rect x="1107.0" y="835.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1110.0" y="846.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (23 samples, 0.36%)</title><rect x="1107.7" y="835.0" width="4.2" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="1110.7" y="846.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (2 samples, 0.03%)</title><rect x="1108.3" y="819.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1111.3" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.05%)</title><rect x="1108.6" y="819.0" width="0.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1111.6" y="830.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (2 samples, 0.03%)</title><rect x="1109.2" y="819.0" width="0.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1112.2" y="830.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (2 samples, 0.03%)</title><rect x="1109.5" y="819.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1112.5" y="830.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (11 samples, 0.17%)</title><rect x="1109.9" y="819.0" width="2.0" height="15" fill="#f87878" rx="2" ry="2"/>
<text x="1112.9" y="830.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (3 samples, 0.05%)</title><rect x="1111.4" y="803.0" width="0.5" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1114.4" y="814.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.03%)</title><rect x="1112.1" y="851.0" width="0.4" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="1115.1" y="862.0"></text>
</g>
<g>
<title>recv (183 samples, 2.84%)</title><rect x="1112.7" y="851.0" width="33.5" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="1115.7" y="862.0">recv</text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (130 samples, 2.02%)</title><rect x="1122.4" y="835.0" width="23.8" height="15" fill="#ed8900" rx="2" ry="2"/>
<text x="1125.4" y="846.0">e..</text>
</g>
<g>
<title>__x64_sys_recvfrom (3 samples, 0.05%)</title><rect x="1122.4" y="819.0" width="0.5" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1125.4" y="830.0"></text>
</g>
<g>
<title>do_syscall_64 (127 samples, 1.97%)</title><rect x="1122.9" y="819.0" width="23.3" height="15" fill="#ee8a00" rx="2" ry="2"/>
<text x="1125.9" y="830.0">d..</text>
</g>
<g>
<title>__x64_sys_recvfrom (112 samples, 1.74%)</title><rect x="1125.7" y="803.0" width="20.5" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1128.7" y="814.0"></text>
</g>
<g>
<title>__sys_recvfrom (105 samples, 1.63%)</title><rect x="1125.7" y="787.0" width="19.2" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1128.7" y="798.0"></text>
</g>
<g>
<title>fput_many (3 samples, 0.05%)</title><rect x="1126.2" y="771.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1129.2" y="782.0"></text>
</g>
<g>
<title>sock_recvmsg (86 samples, 1.34%)</title><rect x="1126.8" y="771.0" width="15.7" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1129.8" y="782.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (3 samples, 0.05%)</title><rect x="1126.9" y="755.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1129.9" y="766.0"></text>
</g>
<g>
<title>inet6_recvmsg (71 samples, 1.10%)</title><rect x="1127.5" y="755.0" width="13.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1130.5" y="766.0"></text>
</g>
<g>
<title>tcp_recvmsg (71 samples, 1.10%)</title><rect x="1127.5" y="739.0" width="13.0" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1130.5" y="750.0"></text>
</g>
<g>
<title>__kfree_skb (12 samples, 0.19%)</title><rect x="1129.5" y="723.0" width="2.2" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1132.5" y="734.0"></text>
</g>
<g>
<title>skb_release_all (11 samples, 0.17%)</title><rect x="1129.7" y="707.0" width="2.0" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1132.7" y="718.0"></text>
</g>
<g>
<title>skb_release_data (3 samples, 0.05%)</title><rect x="1129.9" y="691.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1132.9" y="702.0"></text>
</g>
<g>
<title>skb_release_head_state (4 samples, 0.06%)</title><rect x="1130.4" y="691.0" width="0.8" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1133.4" y="702.0"></text>
</g>
<g>
<title>dst_release (4 samples, 0.06%)</title><rect x="1130.4" y="675.0" width="0.8" height="15" fill="#e58100" rx="2" ry="2"/>
<text x="1133.4" y="686.0"></text>
</g>
<g>
<title>sock_rfree (3 samples, 0.05%)</title><rect x="1131.2" y="691.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1134.2" y="702.0"></text>
</g>
<g>
<title>__tcp_select_window (2 samples, 0.03%)</title><rect x="1131.7" y="723.0" width="0.4" height="15" fill="#fd9900" rx="2" ry="2"/>
<text x="1134.7" y="734.0"></text>
</g>
<g>
<title>_raw_spin_lock_bh (3 samples, 0.05%)</title><rect x="1132.3" y="723.0" width="0.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1135.3" y="734.0"></text>
</g>
<g>
<title>skb_copy_datagram_iter (34 samples, 0.53%)</title><rect x="1133.2" y="723.0" width="6.2" height="15" fill="#f08c00" rx="2" ry="2"/>
<text x="1136.2" y="734.0"></text>
</g>
<g>
<title>__skb_datagram_iter (33 samples, 0.51%)</title><rect x="1133.2" y="707.0" width="6.0" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1136.2" y="718.0"></text>
</g>
<g>
<title>simple_copy_to_iter (20 samples, 0.31%)</title><rect x="1135.6" y="691.0" width="3.6" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1138.6" y="702.0"></text>
</g>
<g>
<title>__check_object_size (5 samples, 0.08%)</title><rect x="1135.6" y="675.0" width="0.9" height="15" fill="#f28e00" rx="2" ry="2"/>
<text x="1138.6" y="686.0"></text>
</g>
<g>
<title>__virt_addr_valid (2 samples, 0.03%)</title><rect x="1136.1" y="659.0" width="0.4" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1139.1" y="670.0"></text>
</g>
<g>
<title>_copy_to_iter (12 samples, 0.19%)</title><rect x="1136.5" y="675.0" width="2.2" height="15" fill="#e37f00" rx="2" ry="2"/>
<text x="1139.5" y="686.0"></text>
</g>
<g>
<title>copy_user_enhanced_fast_string (11 samples, 0.17%)</title><rect x="1136.7" y="659.0" width="2.0" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1139.7" y="670.0"></text>
</g>
<g>
<title>copyout (2 samples, 0.03%)</title><rect x="1138.9" y="675.0" width="0.3" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1141.9" y="686.0"></text>
</g>
<g>
<title>tcp_cleanup_rbuf (2 samples, 0.03%)</title><rect x="1139.4" y="723.0" width="0.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="1142.4" y="734.0"></text>
</g>
<g>
<title>tcp_rcv_space_adjust (3 samples, 0.05%)</title><rect x="1140.0" y="723.0" width="0.5" height="15" fill="#e48000" rx="2" ry="2"/>
<text x="1143.0" y="734.0"></text>
</g>
<g>
<title>tcp_mstamp_refresh (2 samples, 0.03%)</title><rect x="1140.1" y="707.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1143.1" y="718.0"></text>
</g>
<g>
<title>security_socket_recvmsg (11 samples, 0.17%)</title><rect x="1140.5" y="755.0" width="2.0" height="15" fill="#fb9700" rx="2" ry="2"/>
<text x="1143.5" y="766.0"></text>
</g>
<g>
<title>apparmor_socket_recvmsg (8 samples, 0.12%)</title><rect x="1141.1" y="739.0" width="1.4" height="15" fill="#fc9800" rx="2" ry="2"/>
<text x="1144.1" y="750.0"></text>
</g>
<g>
<title>aa_sk_perm (7 samples, 0.11%)</title><rect x="1141.2" y="723.0" width="1.3" height="15" fill="#f59100" rx="2" ry="2"/>
<text x="1144.2" y="734.0"></text>
</g>
<g>
<title>sockfd_lookup_light (13 samples, 0.20%)</title><rect x="1142.5" y="771.0" width="2.4" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1145.5" y="782.0"></text>
</g>
<g>
<title>__fdget (9 samples, 0.14%)</title><rect x="1142.7" y="755.0" width="1.7" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1145.7" y="766.0"></text>
</g>
<g>
<title>__fget_light (9 samples, 0.14%)</title><rect x="1142.7" y="739.0" width="1.7" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1145.7" y="750.0"></text>
</g>
<g>
<title>__fget (9 samples, 0.14%)</title><rect x="1142.7" y="723.0" width="1.7" height="15" fill="#f99500" rx="2" ry="2"/>
<text x="1145.7" y="734.0"></text>
</g>
<g>
<title>__fget_light (3 samples, 0.05%)</title><rect x="1144.4" y="755.0" width="0.5" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="1147.4" y="766.0"></text>
</g>
<g>
<title>import_single_range (7 samples, 0.11%)</title><rect x="1144.9" y="787.0" width="1.3" height="15" fill="#f69200" rx="2" ry="2"/>
<text x="1147.9" y="798.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 0.05%)</title><rect x="1146.4" y="915.0" width="0.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1149.4" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (10 samples, 0.16%)</title><rect x="1146.9" y="931.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1149.9" y="942.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (10 samples, 0.16%)</title><rect x="1146.9" y="915.0" width="1.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1149.9" y="926.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (10 samples, 0.16%)</title><rect x="1146.9" y="899.0" width="1.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1149.9" y="910.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (9 samples, 0.14%)</title><rect x="1147.1" y="883.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1150.1" y="894.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (9 samples, 0.14%)</title><rect x="1147.1" y="867.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1150.1" y="878.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (3 samples, 0.05%)</title><rect x="1147.5" y="851.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="1150.5" y="862.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (2 samples, 0.03%)</title><rect x="1147.5" y="835.0" width="0.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1150.5" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (4 samples, 0.06%)</title><rect x="1148.0" y="851.0" width="0.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1151.0" y="862.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (4 samples, 0.06%)</title><rect x="1148.0" y="835.0" width="0.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1151.0" y="846.0"></text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (4 samples, 0.06%)</title><rect x="1148.0" y="819.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1151.0" y="830.0"></text>
</g>
<g>
<title>__libc_write (4 samples, 0.06%)</title><rect x="1148.0" y="803.0" width="0.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="1151.0" y="814.0"></text>
</g>
<g>
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.05%)</title><rect x="1148.2" y="787.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1151.2" y="798.0"></text>
</g>
<g>
<title>do_syscall_64 (3 samples, 0.05%)</title><rect x="1148.2" y="771.0" width="0.6" height="15" fill="#fe9a00" rx="2" ry="2"/>
<text x="1151.2" y="782.0"></text>
</g>
<g>
<title>__x64_sys_write (3 samples, 0.05%)</title><rect x="1148.2" y="755.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1151.2" y="766.0"></text>
</g>
<g>
<title>ksys_write (3 samples, 0.05%)</title><rect x="1148.2" y="739.0" width="0.6" height="15" fill="#e68200" rx="2" ry="2"/>
<text x="1151.2" y="750.0"></text>
</g>
<g>
<title>vfs_write (3 samples, 0.05%)</title><rect x="1148.2" y="723.0" width="0.6" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="1151.2" y="734.0"></text>
</g>
<g>
<title>__vfs_write (3 samples, 0.05%)</title><rect x="1148.2" y="707.0" width="0.6" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1151.2" y="718.0"></text>
</g>
<g>
<title>new_sync_write (3 samples, 0.05%)</title><rect x="1148.2" y="691.0" width="0.6" height="15" fill="#e98500" rx="2" ry="2"/>
<text x="1151.2" y="702.0"></text>
</g>
<g>
<title>ext4_file_write_iter (3 samples, 0.05%)</title><rect x="1148.2" y="675.0" width="0.6" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1151.2" y="686.0"></text>
</g>
<g>
<title>__generic_file_write_iter (3 samples, 0.05%)</title><rect x="1148.2" y="659.0" width="0.6" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.2" y="670.0"></text>
</g>
<g>
<title>generic_perform_write (3 samples, 0.05%)</title><rect x="1148.2" y="643.0" width="0.6" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="1151.2" y="654.0"></text>
</g>
<g>
<title>ext4_da_write_end (2 samples, 0.03%)</title><rect x="1148.4" y="627.0" width="0.4" height="15" fill="#e88400" rx="2" ry="2"/>
<text x="1151.4" y="638.0"></text>
</g>
<g>
<title>generic_write_end (2 samples, 0.03%)</title><rect x="1148.4" y="611.0" width="0.4" height="15" fill="#f49000" rx="2" ry="2"/>
<text x="1151.4" y="622.0"></text>
</g>
<g>
<title>__mark_inode_dirty (2 samples, 0.03%)</title><rect x="1148.4" y="595.0" width="0.4" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1151.4" y="606.0"></text>
</g>
<g>
<title>ext4_dirty_inode (2 samples, 0.03%)</title><rect x="1148.4" y="579.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.4" y="590.0"></text>
</g>
<g>
<title>ext4_mark_inode_dirty (2 samples, 0.03%)</title><rect x="1148.4" y="563.0" width="0.4" height="15" fill="#e17d00" rx="2" ry="2"/>
<text x="1151.4" y="574.0"></text>
</g>
<g>
<title>ext4_mark_iloc_dirty (2 samples, 0.03%)</title><rect x="1148.4" y="547.0" width="0.4" height="15" fill="#f79300" rx="2" ry="2"/>
<text x="1151.4" y="558.0"></text>
</g>
<g>
<title>start_thread (225 samples, 3.49%)</title><rect x="1148.8" y="931.0" width="41.2" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="1151.8" y="942.0">sta..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (225 samples, 3.49%)</title><rect x="1148.8" y="915.0" width="41.2" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1151.8" y="926.0">thr..</text>
</g>
<g>
<title>Thread::call_run() (225 samples, 3.49%)</title><rect x="1148.8" y="899.0" width="41.2" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1151.8" y="910.0">Thr..</text>
</g>
<g>
<title>GangWorker::loop() (76 samples, 1.18%)</title><rect x="1148.8" y="883.0" width="13.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1151.8" y="894.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (74 samples, 1.15%)</title><rect x="1148.9" y="867.0" width="13.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1151.9" y="878.0"></text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (66 samples, 1.03%)</title><rect x="1148.9" y="851.0" width="12.1" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1151.9" y="862.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (15 samples, 0.23%)</title><rect x="1149.3" y="835.0" width="2.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1152.3" y="846.0"></text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (12 samples, 0.19%)</title><rect x="1149.9" y="819.0" width="2.2" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1152.9" y="830.0"></text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (6 samples, 0.09%)</title><rect x="1151.0" y="803.0" width="1.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1154.0" y="814.0"></text>
</g>
<g>
<title>SpinPause (48 samples, 0.75%)</title><rect x="1152.1" y="835.0" width="8.8" height="15" fill="#f06f6f" rx="2" ry="2"/>
<text x="1155.1" y="846.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (6 samples, 0.09%)</title><rect x="1161.4" y="851.0" width="1.1" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1164.4" y="862.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (5 samples, 0.08%)</title><rect x="1161.4" y="835.0" width="0.9" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1164.4" y="846.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (5 samples, 0.08%)</title><rect x="1161.4" y="819.0" width="0.9" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1164.4" y="830.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (5 samples, 0.08%)</title><rect x="1161.4" y="803.0" width="0.9" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1164.4" y="814.0"></text>
</g>
<g>
<title>frame::oops_do_internal(OopClosure*, CodeBlobClosure*, RegisterMap*, bool) (3 samples, 0.05%)</title><rect x="1161.4" y="787.0" width="0.6" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1164.4" y="798.0"></text>
</g>
<g>
<title>OopMapSet::oops_do(frame const*, RegisterMap const*, OopClosure*) (3 samples, 0.05%)</title><rect x="1161.4" y="771.0" width="0.6" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1164.4" y="782.0"></text>
</g>
<g>
<title>frame::sender(RegisterMap*) const (2 samples, 0.03%)</title><rect x="1162.0" y="787.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1165.0" y="798.0"></text>
</g>
<g>
<title>JavaThread::run() (145 samples, 2.25%)</title><rect x="1162.7" y="883.0" width="26.6" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="894.0">J..</text>
</g>
<g>
<title>CompileBroker::compiler_thread_loop() (143 samples, 2.22%)</title><rect x="1162.7" y="867.0" width="26.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1165.7" y="878.0">C..</text>
</g>
<g>
<title>CompileBroker::invoke_compiler_on_method(CompileTask*) (143 samples, 2.22%)</title><rect x="1162.7" y="851.0" width="26.2" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1165.7" y="862.0">C..</text>
</g>
<g>
<title>C2Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (135 samples, 2.10%)</title><rect x="1162.7" y="835.0" width="24.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1165.7" y="846.0">C..</text>
</g>
<g>
<title>Compile::Compile(ciEnv*, C2Compiler*, ciMethod*, int, bool, bool, bool, DirectiveSet*) (135 samples, 2.10%)</title><rect x="1162.7" y="819.0" width="24.7" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1165.7" y="830.0">C..</text>
</g>
<g>
<title>Compile::Code_Gen() (85 samples, 1.32%)</title><rect x="1162.7" y="803.0" width="15.6" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1165.7" y="814.0"></text>
</g>
<g>
<title>Compile::fill_buffer(CodeBuffer*, unsigned int*) (3 samples, 0.05%)</title><rect x="1162.9" y="787.0" width="0.5" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1165.9" y="798.0"></text>
</g>
<g>
<title>NonSafepointEmitter::emit_non_safepoint() (2 samples, 0.03%)</title><rect x="1163.1" y="771.0" width="0.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1166.1" y="782.0"></text>
</g>
<g>
<title>DebugInformationRecorder::describe_scope(int, methodHandle const&amp;, ciMethod*, int, bool, bool, bool, bool, DebugToken*, DebugToken*, DebugToken*) (2 samples, 0.03%)</title><rect x="1163.1" y="755.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.1" y="766.0"></text>
</g>
<g>
<title>Matcher::match() (5 samples, 0.08%)</title><rect x="1163.4" y="787.0" width="0.9" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1166.4" y="798.0"></text>
</g>
<g>
<title>Matcher::xform(Node*, int) (3 samples, 0.05%)</title><rect x="1163.8" y="771.0" width="0.5" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1166.8" y="782.0"></text>
</g>
<g>
<title>Arena::contains(void const*) const (2 samples, 0.03%)</title><rect x="1164.0" y="755.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1167.0" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::do_global_code_motion() (8 samples, 0.12%)</title><rect x="1164.5" y="787.0" width="1.5" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1167.5" y="798.0"></text>
</g>
<g>
<title>PhaseCFG::global_code_motion() (8 samples, 0.12%)</title><rect x="1164.5" y="771.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1167.5" y="782.0"></text>
</g>
<g>
<title>PhaseCFG::schedule_early(VectorSet&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1164.5" y="755.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1167.5" y="766.0"></text>
</g>
<g>
<title>PhaseCFG::replace_block_proj_ctrl(Node*) (2 samples, 0.03%)</title><rect x="1164.5" y="739.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1167.5" y="750.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (2 samples, 0.03%)</title><rect x="1165.1" y="755.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1168.1" y="766.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (2 samples, 0.03%)</title><rect x="1165.1" y="739.0" width="0.3" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1168.1" y="750.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (3 samples, 0.05%)</title><rect x="1165.4" y="755.0" width="0.6" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1168.4" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Register_Allocate() (67 samples, 1.04%)</title><rect x="1166.0" y="787.0" width="12.3" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1169.0" y="798.0"></text>
</g>
<g>
<title>PhaseAggressiveCoalesce::insert_copies(Matcher&amp;) (3 samples, 0.05%)</title><rect x="1166.2" y="771.0" width="0.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1169.2" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::Select() (5 samples, 0.08%)</title><rect x="1166.7" y="771.0" width="0.9" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1169.7" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::re_insert(unsigned int) (2 samples, 0.03%)</title><rect x="1167.1" y="755.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1170.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Simplify() (4 samples, 0.06%)</title><rect x="1167.6" y="771.0" width="0.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.6" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::remove_node(unsigned int) (2 samples, 0.03%)</title><rect x="1168.0" y="755.0" width="0.4" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1171.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::Split(unsigned int, ResourceArea*) (5 samples, 0.08%)</title><rect x="1168.4" y="771.0" width="0.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1171.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::build_ifg_physical(ResourceArea*) (18 samples, 0.28%)</title><rect x="1169.3" y="771.0" width="3.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1172.3" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::add_input_to_liveout(Block*, Node*, IndexSet*, double, PhaseChaitin::Pressure&amp;, PhaseChaitin::Pressure&amp;) (5 samples, 0.08%)</title><rect x="1170.0" y="755.0" width="0.9" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1173.0" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::interfere_with_live(unsigned int, IndexSet*) (6 samples, 0.09%)</title><rect x="1171.1" y="755.0" width="1.1" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1174.1" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::remove_bound_register_from_interfering_live_ranges(LRG&amp;, IndexSet*, unsigned int&amp;) (2 samples, 0.03%)</title><rect x="1172.2" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1175.2" y="766.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) (4 samples, 0.06%)</title><rect x="1173.1" y="771.0" width="0.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1176.1" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::gather_lrg_masks(bool) [clone .constprop.87] (2 samples, 0.03%)</title><rect x="1173.9" y="771.0" width="0.3" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1176.9" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::post_allocate_copy_removal() (6 samples, 0.09%)</title><rect x="1174.4" y="771.0" width="1.1" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1177.4" y="782.0"></text>
</g>
<g>
<title>PhaseChaitin::elide_copy(Node*, int, Block*, Node_List&amp;, Node_List&amp;, bool) (3 samples, 0.05%)</title><rect x="1174.8" y="755.0" width="0.5" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1177.8" y="766.0"></text>
</g>
<g>
<title>PhaseIFG::Compute_Effective_Degree() (2 samples, 0.03%)</title><rect x="1175.9" y="771.0" width="0.4" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1178.9" y="782.0"></text>
</g>
<g>
<title>PhaseIFG::init(unsigned int) (3 samples, 0.05%)</title><rect x="1176.4" y="771.0" width="0.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1179.4" y="782.0"></text>
</g>
<g>
<title>IndexSet::initialize(unsigned int) (3 samples, 0.05%)</title><rect x="1176.4" y="755.0" width="0.6" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1179.4" y="766.0"></text>
</g>
<g>
<title>PhaseLive::compute(unsigned int) (6 samples, 0.09%)</title><rect x="1177.0" y="771.0" width="1.1" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1180.0" y="782.0"></text>
</g>
<g>
<title>PhaseLive::add_liveout(Block*, IndexSet*, VectorSet&amp;) (4 samples, 0.06%)</title><rect x="1177.4" y="755.0" width="0.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1180.4" y="766.0"></text>
</g>
<g>
<title>IndexSetIterator::advance_and_next() (2 samples, 0.03%)</title><rect x="1177.7" y="739.0" width="0.4" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1180.7" y="750.0"></text>
</g>
<g>
<title>Compile::Optimize() (40 samples, 0.62%)</title><rect x="1178.3" y="803.0" width="7.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1181.3" y="814.0"></text>
</g>
<g>
<title>Compile::optimize_loops(int&amp;, PhaseIterGVN&amp;, LoopOptsMode) [clone .part.341] (15 samples, 0.23%)</title><rect x="1178.3" y="787.0" width="2.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1181.3" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (15 samples, 0.23%)</title><rect x="1178.3" y="771.0" width="2.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1181.3" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (2 samples, 0.03%)</title><rect x="1178.5" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1181.5" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_early(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1178.8" y="755.0" width="0.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1181.8" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (5 samples, 0.08%)</title><rect x="1179.2" y="755.0" width="0.9" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1182.2" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late_post(Node*) (3 samples, 0.05%)</title><rect x="1179.6" y="739.0" width="0.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1182.6" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks(VectorSet&amp;, Node_Stack&amp;, bool) (4 samples, 0.06%)</title><rect x="1180.1" y="755.0" width="0.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1183.1" y="766.0"></text>
</g>
<g>
<title>PhaseIdealLoop::split_if_with_blocks_pre(Node*) (3 samples, 0.05%)</title><rect x="1180.3" y="739.0" width="0.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1183.3" y="750.0"></text>
</g>
<g>
<title>PhaseIdealLoop::remix_address_expressions(Node*) (2 samples, 0.03%)</title><rect x="1180.3" y="723.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1183.3" y="734.0"></text>
</g>
<g>
<title>PhaseCCP::analyze() (2 samples, 0.03%)</title><rect x="1181.2" y="787.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1184.2" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_and_optimize(LoopOptsMode) (13 samples, 0.20%)</title><rect x="1181.8" y="787.0" width="2.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1184.8" y="798.0"></text>
</g>
<g>
<title>PhaseIdealLoop::Dominators() (4 samples, 0.06%)</title><rect x="1181.9" y="771.0" width="0.8" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1184.9" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_late(VectorSet&amp;, Node_List&amp;, Node_Stack&amp;) (2 samples, 0.03%)</title><rect x="1182.7" y="771.0" width="0.3" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1185.7" y="782.0"></text>
</g>
<g>
<title>PhaseIdealLoop::build_loop_tree() (2 samples, 0.03%)</title><rect x="1183.0" y="771.0" width="0.4" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1186.0" y="782.0"></text>
</g>
<g>
<title>PhaseIterGVN::optimize() (8 samples, 0.12%)</title><rect x="1184.1" y="787.0" width="1.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1187.1" y="798.0"></text>
</g>
<g>
<title>PhaseIterGVN::transform_old(Node*) (7 samples, 0.11%)</title><rect x="1184.3" y="771.0" width="1.3" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1187.3" y="782.0"></text>
</g>
<g>
<title>RegionNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1184.9" y="755.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1187.9" y="766.0"></text>
</g>
<g>
<title>StoreNode::Ideal(PhaseGVN*, bool) (2 samples, 0.03%)</title><rect x="1185.2" y="755.0" width="0.4" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.2" y="766.0"></text>
</g>
<g>
<title>InitializeNode::can_capture_store(StoreNode*, PhaseTransform*, bool) [clone .part.157] (2 samples, 0.03%)</title><rect x="1185.2" y="739.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.2" y="750.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1185.2" y="723.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.2" y="734.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1185.2" y="707.0" width="0.4" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1188.2" y="718.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1185.2" y="691.0" width="0.4" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1188.2" y="702.0"></text>
</g>
<g>
<title>InitializeNode::detect_init_independence(Node*, int&amp;) (2 samples, 0.03%)</title><rect x="1185.2" y="675.0" width="0.4" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1188.2" y="686.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (8 samples, 0.12%)</title><rect x="1185.8" y="803.0" width="1.5" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.8" y="814.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (8 samples, 0.12%)</title><rect x="1185.8" y="787.0" width="1.5" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1188.8" y="798.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (8 samples, 0.12%)</title><rect x="1185.8" y="771.0" width="1.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1188.8" y="782.0"></text>
</g>
<g>
<title>Parse::do_one_block() (7 samples, 0.11%)</title><rect x="1186.0" y="755.0" width="1.3" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1189.0" y="766.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (7 samples, 0.11%)</title><rect x="1186.0" y="739.0" width="1.3" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.0" y="750.0"></text>
</g>
<g>
<title>Parse::do_call() (7 samples, 0.11%)</title><rect x="1186.0" y="723.0" width="1.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.0" y="734.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (4 samples, 0.06%)</title><rect x="1186.0" y="707.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="718.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (4 samples, 0.06%)</title><rect x="1186.0" y="691.0" width="0.7" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1189.0" y="702.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (4 samples, 0.06%)</title><rect x="1186.0" y="675.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="686.0"></text>
</g>
<g>
<title>Parse::do_one_block() (4 samples, 0.06%)</title><rect x="1186.0" y="659.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1189.0" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (4 samples, 0.06%)</title><rect x="1186.0" y="643.0" width="0.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.0" y="654.0"></text>
</g>
<g>
<title>Parse::do_call() (4 samples, 0.06%)</title><rect x="1186.0" y="627.0" width="0.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.0" y="638.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1186.2" y="611.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="622.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1186.2" y="595.0" width="0.3" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1189.2" y="606.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1186.2" y="579.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="590.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1186.2" y="563.0" width="0.3" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1189.2" y="574.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1186.2" y="547.0" width="0.3" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1189.2" y="558.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1186.2" y="531.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="542.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1186.2" y="515.0" width="0.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1189.2" y="526.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1186.2" y="499.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="510.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1186.2" y="483.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="494.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1186.2" y="467.0" width="0.3" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.2" y="478.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1186.2" y="451.0" width="0.3" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.2" y="462.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1186.2" y="435.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="446.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1186.2" y="419.0" width="0.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.2" y="430.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1186.2" y="403.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="414.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1186.2" y="387.0" width="0.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.2" y="398.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1186.2" y="371.0" width="0.3" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.2" y="382.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1186.2" y="355.0" width="0.3" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.2" y="366.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1186.2" y="339.0" width="0.3" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.2" y="350.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1186.2" y="323.0" width="0.3" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1189.2" y="334.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1186.2" y="307.0" width="0.3" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.2" y="318.0"></text>
</g>
<g>
<title>PredictedCallGenerator::generate(JVMState*) (3 samples, 0.05%)</title><rect x="1186.7" y="707.0" width="0.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="718.0"></text>
</g>
<g>
<title>ParseGenerator::generate(JVMState*) (2 samples, 0.03%)</title><rect x="1186.7" y="691.0" width="0.4" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.7" y="702.0"></text>
</g>
<g>
<title>Parse::Parse(JVMState*, ciMethod*, float) (2 samples, 0.03%)</title><rect x="1186.7" y="675.0" width="0.4" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.7" y="686.0"></text>
</g>
<g>
<title>Parse::do_all_blocks() (2 samples, 0.03%)</title><rect x="1186.7" y="659.0" width="0.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1189.7" y="670.0"></text>
</g>
<g>
<title>Parse::do_one_block() (2 samples, 0.03%)</title><rect x="1186.7" y="643.0" width="0.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1189.7" y="654.0"></text>
</g>
<g>
<title>Parse::do_one_bytecode() (2 samples, 0.03%)</title><rect x="1186.7" y="627.0" width="0.4" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1189.7" y="638.0"></text>
</g>
<g>
<title>Parse::do_call() (2 samples, 0.03%)</title><rect x="1186.7" y="611.0" width="0.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1189.7" y="622.0"></text>
</g>
<g>
<title>Compiler::compile_method(ciEnv*, ciMethod*, int, DirectiveSet*) (8 samples, 0.12%)</title><rect x="1187.4" y="835.0" width="1.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1190.4" y="846.0"></text>
</g>
<g>
<title>Compilation::Compilation(AbstractCompiler*, ciEnv*, ciMethod*, int, BufferBlob*, DirectiveSet*) (8 samples, 0.12%)</title><rect x="1187.4" y="819.0" width="1.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.4" y="830.0"></text>
</g>
<g>
<title>Compilation::compile_method() (8 samples, 0.12%)</title><rect x="1187.4" y="803.0" width="1.5" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="814.0"></text>
</g>
<g>
<title>Compilation::compile_java_method() (7 samples, 0.11%)</title><rect x="1187.4" y="787.0" width="1.3" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1190.4" y="798.0"></text>
</g>
<g>
<title>Compilation::build_hir() [clone .part.93] (6 samples, 0.09%)</title><rect x="1187.4" y="771.0" width="1.1" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.4" y="782.0"></text>
</g>
<g>
<title>GlobalValueNumbering::GlobalValueNumbering(IR*) (2 samples, 0.03%)</title><rect x="1187.4" y="755.0" width="0.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1190.4" y="766.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(BlockClosure*) (2 samples, 0.03%)</title><rect x="1187.4" y="739.0" width="0.4" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.4" y="750.0"></text>
</g>
<g>
<title>BlockBegin::iterate_preorder(GrowableArray&lt;bool&gt;&amp;, BlockClosure*) (2 samples, 0.03%)</title><rect x="1187.4" y="723.0" width="0.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1190.4" y="734.0"></text>
</g>
<g>
<title>IR::IR(Compilation*, ciMethod*, int) (4 samples, 0.06%)</title><rect x="1187.8" y="755.0" width="0.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1190.8" y="766.0"></text>
</g>
<g>
<title>IRScope::IRScope(Compilation*, IRScope*, int, ciMethod*, int, bool) (4 samples, 0.06%)</title><rect x="1187.8" y="739.0" width="0.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1190.8" y="750.0"></text>
</g>
<g>
<title>GraphBuilder::GraphBuilder(Compilation*, IRScope*) (4 samples, 0.06%)</title><rect x="1187.8" y="723.0" width="0.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1190.8" y="734.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_all_blocks(bool) (3 samples, 0.05%)</title><rect x="1187.8" y="707.0" width="0.6" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1190.8" y="718.0"></text>
</g>
<g>
<title>GraphBuilder::iterate_bytecodes_for_block(int) (3 samples, 0.05%)</title><rect x="1187.8" y="691.0" width="0.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1190.8" y="702.0"></text>
</g>
<g>
<title>GraphBuilder::invoke(Bytecodes::Code) (3 samples, 0.05%)</title><rect x="1187.8" y="675.0" width="0.6" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1190.8" y="686.0"></text>
</g>
<g>
<title>ServiceThread::service_thread_entry(JavaThread*, Thread*) (2 samples, 0.03%)</title><rect x="1188.9" y="867.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="878.0"></text>
</g>
<g>
<title>JvmtiDeferredEvent::post() (2 samples, 0.03%)</title><rect x="1188.9" y="851.0" width="0.4" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1191.9" y="862.0"></text>
</g>
<g>
<title>JvmtiExport::post_compiled_method_load(nmethod*) (2 samples, 0.03%)</title><rect x="1188.9" y="835.0" width="0.4" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1191.9" y="846.0"></text>
</g>
<g>
<title>create_inline_record(nmethod*) (2 samples, 0.03%)</title><rect x="1188.9" y="819.0" width="0.4" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="1191.9" y="830.0"></text>
</g>
<g>
<title>VMThread::run() (4 samples, 0.06%)</title><rect x="1189.3" y="883.0" width="0.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1192.3" y="894.0"></text>
</g>
<g>
<title>VMThread::loop() (4 samples, 0.06%)</title><rect x="1189.3" y="867.0" width="0.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1192.3" y="878.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (4 samples, 0.06%)</title><rect x="1189.3" y="851.0" width="0.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1192.3" y="862.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (4 samples, 0.06%)</title><rect x="1189.3" y="835.0" width="0.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1192.3" y="846.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (3 samples, 0.05%)</title><rect x="1189.5" y="819.0" width="0.5" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1192.5" y="830.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (3 samples, 0.05%)</title><rect x="1189.5" y="803.0" width="0.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1192.5" y="814.0"></text>
</g>
</g>
</svg>
