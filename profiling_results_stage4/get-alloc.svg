<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="534" onload="init(evt)" viewBox="0 0 1200 534" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="517"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="517"> </text>
<g id="frames">
<g>
<title>all (189,239 samples, 100.00%)</title><rect x="10.0" y="483.0" width="1180.0" height="15" fill="#ea6767" rx="2" ry="2"/>
<text x="13.0" y="494.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (107,310 samples, 56.71%)</title><rect x="10.0" y="467.0" width="669.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="478.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (107,310 samples, 56.71%)</title><rect x="10.0" y="451.0" width="669.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="462.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (107,310 samples, 56.71%)</title><rect x="10.0" y="435.0" width="669.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="446.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (474 samples, 0.25%)</title><rect x="10.0" y="419.0" width="3.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (474 samples, 0.25%)</title><rect x="10.0" y="403.0" width="3.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (472 samples, 0.25%)</title><rect x="10.0" y="387.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (472 samples, 0.25%)</title><rect x="10.0" y="371.0" width="2.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (472 samples, 0.25%)</title><rect x="10.0" y="355.0" width="2.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$65/1589279360.run (106,836 samples, 56.46%)</title><rect x="13.0" y="419.0" width="666.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="16.0" y="430.0">ru/mail/polis/service/boriskin/NewService$$Lambda$65/1589279360.run</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$1 (106,836 samples, 56.46%)</title><rect x="13.0" y="403.0" width="666.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="16.0" y="414.0">ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$1</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (66,085 samples, 34.92%)</title><rect x="13.0" y="387.0" width="412.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="16.0" y="398.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.doGet (66,085 samples, 34.92%)</title><rect x="13.0" y="371.0" width="412.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="16.0" y="382.0">ru/mail/polis/service/boriskin/NewService.doGet</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (858 samples, 0.45%)</title><rect x="13.0" y="355.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="16.0" y="366.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (858 samples, 0.45%)</title><rect x="13.0" y="339.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="16.0" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (581 samples, 0.31%)</title><rect x="13.0" y="323.0" width="3.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="16.0" y="334.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (581 samples, 0.31%)</title><rect x="13.0" y="307.0" width="3.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="16.0" y="318.0"></text>
</g>
<g>
<title>byte[] (581 samples, 0.31%)</title><rect x="13.0" y="291.0" width="3.6" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="16.0" y="302.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (277 samples, 0.15%)</title><rect x="16.6" y="323.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="19.6" y="334.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (277 samples, 0.15%)</title><rect x="16.6" y="307.0" width="1.7" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="19.6" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.ok (770 samples, 0.41%)</title><rect x="18.3" y="355.0" width="4.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="21.3" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (135 samples, 0.07%)</title><rect x="18.3" y="339.0" width="0.8" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="21.3" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (635 samples, 0.34%)</title><rect x="19.1" y="339.0" width="4.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="22.1" y="350.0"></text>
</g>
<g>
<title>byte[] (252 samples, 0.13%)</title><rect x="19.1" y="323.0" width="1.6" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="22.1" y="334.0"></text>
</g>
<g>
<title>java.lang.String[] (187 samples, 0.10%)</title><rect x="20.7" y="323.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="23.7" y="334.0"></text>
</g>
<g>
<title>java.lang.String (196 samples, 0.10%)</title><rect x="21.9" y="323.0" width="1.2" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="24.9" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (63,907 samples, 33.77%)</title><rect x="23.1" y="355.0" width="398.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="26.1" y="366.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3,898 samples, 2.06%)</title><rect x="23.1" y="339.0" width="24.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="26.1" y="350.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3,898 samples, 2.06%)</title><rect x="23.1" y="323.0" width="24.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="334.0">c..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3,898 samples, 2.06%)</title><rect x="23.1" y="307.0" width="24.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="318.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3,898 samples, 2.06%)</title><rect x="23.1" y="291.0" width="24.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.1" y="302.0">c..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3,898 samples, 2.06%)</title><rect x="23.1" y="275.0" width="24.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.1" y="286.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,182 samples, 1.68%)</title><rect x="23.1" y="259.0" width="19.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (306 samples, 0.16%)</title><rect x="23.1" y="243.0" width="1.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="26.1" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (306 samples, 0.16%)</title><rect x="23.1" y="227.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.1" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (306 samples, 0.16%)</title><rect x="23.1" y="211.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (306 samples, 0.16%)</title><rect x="23.1" y="195.0" width="1.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="26.1" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (306 samples, 0.16%)</title><rect x="23.1" y="179.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (306 samples, 0.16%)</title><rect x="23.1" y="163.0" width="1.9" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="26.1" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (306 samples, 0.16%)</title><rect x="23.1" y="147.0" width="1.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="26.1" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (306 samples, 0.16%)</title><rect x="23.1" y="131.0" width="1.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="26.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (306 samples, 0.16%)</title><rect x="23.1" y="115.0" width="1.9" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="26.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (306 samples, 0.16%)</title><rect x="23.1" y="99.0" width="1.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="26.1" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (306 samples, 0.16%)</title><rect x="23.1" y="83.0" width="1.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="26.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (306 samples, 0.16%)</title><rect x="23.1" y="67.0" width="1.9" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="26.1" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,876 samples, 1.52%)</title><rect x="25.0" y="243.0" width="17.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="28.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,876 samples, 1.52%)</title><rect x="25.0" y="227.0" width="17.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,876 samples, 1.52%)</title><rect x="25.0" y="211.0" width="17.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="28.0" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,876 samples, 1.52%)</title><rect x="25.0" y="195.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.0" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,876 samples, 1.52%)</title><rect x="25.0" y="179.0" width="17.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="28.0" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,876 samples, 1.52%)</title><rect x="25.0" y="163.0" width="17.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="28.0" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,528 samples, 1.34%)</title><rect x="25.0" y="147.0" width="15.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="28.0" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (125 samples, 0.07%)</title><rect x="25.0" y="131.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="28.0" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (63 samples, 0.03%)</title><rect x="25.0" y="115.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="28.0" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$70/264199105.apply (63 samples, 0.03%)</title><rect x="25.0" y="99.0" width="0.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="28.0" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (63 samples, 0.03%)</title><rect x="25.0" y="83.0" width="0.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="28.0" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (63 samples, 0.03%)</title><rect x="25.0" y="67.0" width="0.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="28.0" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (62 samples, 0.03%)</title><rect x="25.4" y="115.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="28.4" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (62 samples, 0.03%)</title><rect x="25.4" y="99.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="28.4" y="110.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (62 samples, 0.03%)</title><rect x="25.4" y="83.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="28.4" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (2,403 samples, 1.27%)</title><rect x="25.8" y="131.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (2,403 samples, 1.27%)</title><rect x="25.8" y="115.0" width="15.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="28.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (2,403 samples, 1.27%)</title><rect x="25.8" y="99.0" width="15.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.8" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,465 samples, 0.77%)</title><rect x="25.8" y="83.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="28.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (944 samples, 0.50%)</title><rect x="25.8" y="67.0" width="5.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="28.8" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (521 samples, 0.28%)</title><rect x="31.7" y="67.0" width="3.2" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="34.7" y="78.0"></text>
</g>
<g>
<title>byte[] (521 samples, 0.28%)</title><rect x="31.7" y="51.0" width="3.2" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="34.7" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (125 samples, 0.07%)</title><rect x="34.9" y="83.0" width="0.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="37.9" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (94 samples, 0.05%)</title><rect x="35.7" y="83.0" width="0.6" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="38.7" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (719 samples, 0.38%)</title><rect x="36.3" y="83.0" width="4.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="39.3" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (719 samples, 0.38%)</title><rect x="36.3" y="67.0" width="4.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="39.3" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (463 samples, 0.24%)</title><rect x="36.3" y="51.0" width="2.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="39.3" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (256 samples, 0.14%)</title><rect x="39.2" y="51.0" width="1.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="42.2" y="62.0"></text>
</g>
<g>
<title>byte[] (256 samples, 0.14%)</title><rect x="39.2" y="35.0" width="1.6" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="42.2" y="46.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (348 samples, 0.18%)</title><rect x="40.8" y="147.0" width="2.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="43.8" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (348 samples, 0.18%)</title><rect x="40.8" y="131.0" width="2.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="43.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (348 samples, 0.18%)</title><rect x="40.8" y="115.0" width="2.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="43.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (348 samples, 0.18%)</title><rect x="40.8" y="99.0" width="2.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="43.8" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (348 samples, 0.18%)</title><rect x="40.8" y="83.0" width="2.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="43.8" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (348 samples, 0.18%)</title><rect x="40.8" y="67.0" width="2.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="43.8" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (348 samples, 0.18%)</title><rect x="40.8" y="51.0" width="2.1" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="43.8" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$72/77468105.apply (716 samples, 0.38%)</title><rect x="42.9" y="259.0" width="4.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="45.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (716 samples, 0.38%)</title><rect x="42.9" y="243.0" width="4.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="45.9" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (716 samples, 0.38%)</title><rect x="42.9" y="227.0" width="4.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="45.9" y="238.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (716 samples, 0.38%)</title><rect x="42.9" y="211.0" width="4.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="45.9" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (939 samples, 0.50%)</title><rect x="47.4" y="339.0" width="5.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.4" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (939 samples, 0.50%)</title><rect x="47.4" y="323.0" width="5.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="50.4" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$82/51636278.apply (939 samples, 0.50%)</title><rect x="47.4" y="307.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.lambda$iterator$2 (939 samples, 0.50%)</title><rect x="47.4" y="291.0" width="5.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.of (192 samples, 0.10%)</title><rect x="47.4" y="275.0" width="1.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.4" y="286.0"></text>
</g>
<g>
<title>ru.mail.polis.Record (192 samples, 0.10%)</title><rect x="47.4" y="259.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="50.4" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (397 samples, 0.21%)</title><rect x="48.6" y="275.0" width="2.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="51.6" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (397 samples, 0.21%)</title><rect x="48.6" y="259.0" width="2.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="51.6" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (397 samples, 0.21%)</title><rect x="48.6" y="243.0" width="2.5" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="51.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Value.getData (350 samples, 0.18%)</title><rect x="51.1" y="275.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.1" y="286.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (350 samples, 0.18%)</title><rect x="51.1" y="259.0" width="2.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="54.1" y="270.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (350 samples, 0.18%)</title><rect x="51.1" y="243.0" width="2.2" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="54.1" y="254.0"></text>
</g>
<g>
<title>java.util.NoSuchElementException (70 samples, 0.04%)</title><rect x="53.3" y="339.0" width="0.4" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="56.3" y="350.0"></text>
</g>
<g>
<title>java/util/NoSuchElementException.&lt;init&gt; (1,004 samples, 0.53%)</title><rect x="53.7" y="339.0" width="6.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="56.7" y="350.0"></text>
</g>
<g>
<title>java/lang/RuntimeException.&lt;init&gt; (1,004 samples, 0.53%)</title><rect x="53.7" y="323.0" width="6.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="56.7" y="334.0"></text>
</g>
<g>
<title>java/lang/Exception.&lt;init&gt; (1,004 samples, 0.53%)</title><rect x="53.7" y="307.0" width="6.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="56.7" y="318.0"></text>
</g>
<g>
<title>java/lang/Throwable.&lt;init&gt; (1,004 samples, 0.53%)</title><rect x="53.7" y="291.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.7" y="302.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1,004 samples, 0.53%)</title><rect x="53.7" y="275.0" width="6.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="56.7" y="286.0"></text>
</g>
<g>
<title>java/lang/Throwable.fillInStackTrace (1,004 samples, 0.53%)</title><rect x="53.7" y="259.0" width="6.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="56.7" y="270.0"></text>
</g>
<g>
<title>int[] (205 samples, 0.11%)</title><rect x="53.7" y="243.0" width="1.3" height="15" fill="#6bd9d9" rx="2" ry="2"/>
<text x="56.7" y="254.0"></text>
</g>
<g>
<title>java.lang.Object[] (246 samples, 0.13%)</title><rect x="55.0" y="243.0" width="1.5" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="58.0" y="254.0"></text>
</g>
<g>
<title>long[] (435 samples, 0.23%)</title><rect x="56.5" y="243.0" width="2.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="59.5" y="254.0"></text>
</g>
<g>
<title>short[] (118 samples, 0.06%)</title><rect x="59.2" y="243.0" width="0.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="62.2" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getKey (376 samples, 0.20%)</title><rect x="60.0" y="339.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="63.0" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (376 samples, 0.20%)</title><rect x="60.0" y="323.0" width="2.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="63.0" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (376 samples, 0.20%)</title><rect x="60.0" y="307.0" width="2.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="63.0" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (376 samples, 0.20%)</title><rect x="60.0" y="291.0" width="2.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="63.0" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/Record.getValue (277 samples, 0.15%)</title><rect x="62.3" y="339.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="65.3" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.asReadOnlyBuffer (277 samples, 0.15%)</title><rect x="62.3" y="323.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="65.3" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.duplicate (277 samples, 0.15%)</title><rect x="62.3" y="307.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="65.3" y="318.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (277 samples, 0.15%)</title><rect x="62.3" y="291.0" width="1.7" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="65.3" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterator (57,343 samples, 30.30%)</title><rect x="64.0" y="339.0" width="357.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="67.0" y="350.0">ru/mail/polis/dao/boriskin/NewDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (183 samples, 0.10%)</title><rect x="64.0" y="323.0" width="1.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="67.0" y="334.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (183 samples, 0.10%)</title><rect x="64.0" y="307.0" width="1.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="67.0" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells (57,160 samples, 30.21%)</title><rect x="65.2" y="323.0" width="356.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="68.2" y="334.0">ru/mail/polis/dao/boriskin/NewDAO.iterateThrough..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (262 samples, 0.14%)</title><rect x="65.2" y="307.0" width="1.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="68.2" y="318.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$5 (262 samples, 0.14%)</title><rect x="65.2" y="291.0" width="1.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="68.2" y="302.0"></text>
</g>
<g>
<title>java.util.ArrayList (1,003 samples, 0.53%)</title><rect x="66.8" y="307.0" width="6.3" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="69.8" y="318.0"></text>
</g>
<g>
<title>java/util/ArrayList.&lt;init&gt; (275 samples, 0.15%)</title><rect x="73.1" y="307.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="76.1" y="318.0"></text>
</g>
<g>
<title>java.lang.Object[] (275 samples, 0.15%)</title><rect x="73.1" y="291.0" width="1.7" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="76.1" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (438 samples, 0.23%)</title><rect x="74.8" y="307.0" width="2.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="77.8" y="318.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection$1 (174 samples, 0.09%)</title><rect x="74.8" y="291.0" width="1.1" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="77.8" y="302.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (264 samples, 0.14%)</title><rect x="75.9" y="291.0" width="1.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="78.9" y="302.0"></text>
</g>
<g>
<title>java/util/HashSet.iterator (264 samples, 0.14%)</title><rect x="75.9" y="275.0" width="1.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="78.9" y="286.0"></text>
</g>
<g>
<title>java/util/HashMap$KeySet.iterator (264 samples, 0.14%)</title><rect x="75.9" y="259.0" width="1.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="78.9" y="270.0"></text>
</g>
<g>
<title>java.util.HashMap$KeyIterator (264 samples, 0.14%)</title><rect x="75.9" y="243.0" width="1.6" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="78.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.iterator (887 samples, 0.47%)</title><rect x="77.5" y="307.0" width="5.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="80.5" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (169 samples, 0.09%)</title><rect x="77.5" y="291.0" width="1.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="80.5" y="302.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$6 (169 samples, 0.09%)</title><rect x="77.5" y="275.0" width="1.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="80.5" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$EntrySet.iterator (221 samples, 0.12%)</title><rect x="78.6" y="291.0" width="1.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="81.6" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap$SubMapEntryIterator (221 samples, 0.12%)</title><rect x="78.6" y="275.0" width="1.3" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="81.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap.entrySet (106 samples, 0.06%)</title><rect x="79.9" y="291.0" width="0.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="82.9" y="302.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$EntrySet (106 samples, 0.06%)</title><rect x="79.9" y="275.0" width="0.7" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="82.9" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (391 samples, 0.21%)</title><rect x="80.6" y="291.0" width="2.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="83.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (391 samples, 0.21%)</title><rect x="80.6" y="275.0" width="2.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="83.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.tailMap (391 samples, 0.21%)</title><rect x="80.6" y="259.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="83.6" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$SubMap (391 samples, 0.21%)</title><rect x="80.6" y="243.0" width="2.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="83.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.returnIteratorOverMergedCollapsedFiltered (54,295 samples, 28.69%)</title><rect x="83.0" y="307.0" width="338.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="86.0" y="318.0">ru/mail/polis/dao/boriskin/NewDAO.returnIterat..</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (10,448 samples, 5.52%)</title><rect x="83.0" y="291.0" width="65.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="86.0" y="302.0">com/goo..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator (113 samples, 0.06%)</title><rect x="83.0" y="275.0" width="0.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="86.0" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (10,335 samples, 5.46%)</title><rect x="83.7" y="275.0" width="64.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="86.7" y="286.0">com/goo..</text>
</g>
<g>
<title>com.google.common.collect.Iterators$MergingIterator$1 (167 samples, 0.09%)</title><rect x="83.7" y="259.0" width="1.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="86.7" y="270.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.peekingIterator (567 samples, 0.30%)</title><rect x="84.8" y="259.0" width="3.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="87.8" y="270.0"></text>
</g>
<g>
<title>com.google.common.collect.Iterators$PeekingImpl (567 samples, 0.30%)</title><rect x="84.8" y="243.0" width="3.5" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="87.8" y="254.0"></text>
</g>
<g>
<title>java.util.PriorityQueue (267 samples, 0.14%)</title><rect x="88.3" y="259.0" width="1.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="91.3" y="270.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.&lt;init&gt; (172 samples, 0.09%)</title><rect x="90.0" y="259.0" width="1.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="93.0" y="270.0"></text>
</g>
<g>
<title>java.lang.Object[] (172 samples, 0.09%)</title><rect x="90.0" y="243.0" width="1.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="93.0" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (9,162 samples, 4.84%)</title><rect x="91.1" y="259.0" width="57.1" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="94.1" y="270.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (9,162 samples, 4.84%)</title><rect x="91.1" y="243.0" width="57.1" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="94.1" y="254.0">java/u..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (260 samples, 0.14%)</title><rect x="91.1" y="227.0" width="1.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="94.1" y="238.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (260 samples, 0.14%)</title><rect x="91.1" y="211.0" width="1.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="94.1" y="222.0"></text>
</g>
<g>
<title>java.lang.Object[] (260 samples, 0.14%)</title><rect x="91.1" y="195.0" width="1.6" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="94.1" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (8,902 samples, 4.70%)</title><rect x="92.7" y="227.0" width="55.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="95.7" y="238.0">java/..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (8,902 samples, 4.70%)</title><rect x="92.7" y="211.0" width="55.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.7" y="222.0">java/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,902 samples, 4.70%)</title><rect x="92.7" y="195.0" width="55.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="95.7" y="206.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (8,902 samples, 4.70%)</title><rect x="92.7" y="179.0" width="55.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.7" y="190.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (8,202 samples, 4.33%)</title><rect x="92.7" y="163.0" width="51.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="95.7" y="174.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (306 samples, 0.16%)</title><rect x="92.7" y="147.0" width="1.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="95.7" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (158 samples, 0.08%)</title><rect x="92.7" y="131.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.7" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$70/264199105.apply (158 samples, 0.08%)</title><rect x="92.7" y="115.0" width="1.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="95.7" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (158 samples, 0.08%)</title><rect x="92.7" y="99.0" width="1.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="95.7" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (158 samples, 0.08%)</title><rect x="92.7" y="83.0" width="1.0" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="95.7" y="94.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (148 samples, 0.08%)</title><rect x="93.7" y="131.0" width="0.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="96.7" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (148 samples, 0.08%)</title><rect x="93.7" y="115.0" width="0.9" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="96.7" y="126.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (148 samples, 0.08%)</title><rect x="93.7" y="99.0" width="0.9" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="96.7" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (7,896 samples, 4.17%)</title><rect x="94.6" y="147.0" width="49.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="97.6" y="158.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (7,896 samples, 4.17%)</title><rect x="94.6" y="131.0" width="49.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="97.6" y="142.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (7,896 samples, 4.17%)</title><rect x="94.6" y="115.0" width="49.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="97.6" y="126.0">ru/ma..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (4,729 samples, 2.50%)</title><rect x="94.6" y="99.0" width="29.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="97.6" y="110.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (3,152 samples, 1.67%)</title><rect x="94.6" y="83.0" width="19.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="97.6" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1,577 samples, 0.83%)</title><rect x="114.2" y="83.0" width="9.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="117.2" y="94.0"></text>
</g>
<g>
<title>byte[] (1,577 samples, 0.83%)</title><rect x="114.2" y="67.0" width="9.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="117.2" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (396 samples, 0.21%)</title><rect x="124.1" y="99.0" width="2.4" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="127.1" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (404 samples, 0.21%)</title><rect x="126.5" y="99.0" width="2.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="129.5" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (2,367 samples, 1.25%)</title><rect x="129.1" y="99.0" width="14.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="132.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (2,367 samples, 1.25%)</title><rect x="129.1" y="83.0" width="14.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="132.1" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,593 samples, 0.84%)</title><rect x="129.1" y="67.0" width="9.9" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="132.1" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (774 samples, 0.41%)</title><rect x="139.0" y="67.0" width="4.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="142.0" y="78.0"></text>
</g>
<g>
<title>byte[] (774 samples, 0.41%)</title><rect x="139.0" y="51.0" width="4.8" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="142.0" y="62.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (700 samples, 0.37%)</title><rect x="143.8" y="163.0" width="4.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="146.8" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (700 samples, 0.37%)</title><rect x="143.8" y="147.0" width="4.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="146.8" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (700 samples, 0.37%)</title><rect x="143.8" y="131.0" width="4.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="146.8" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (700 samples, 0.37%)</title><rect x="143.8" y="115.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="146.8" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (700 samples, 0.37%)</title><rect x="143.8" y="99.0" width="4.4" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="146.8" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (700 samples, 0.37%)</title><rect x="143.8" y="83.0" width="4.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="146.8" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (700 samples, 0.37%)</title><rect x="143.8" y="67.0" width="4.4" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="146.8" y="78.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection.iterator (663 samples, 0.35%)</title><rect x="148.2" y="291.0" width="4.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="151.2" y="302.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection$1 (199 samples, 0.11%)</title><rect x="148.2" y="275.0" width="1.2" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="151.2" y="286.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableCollection$1.&lt;init&gt; (464 samples, 0.25%)</title><rect x="149.4" y="275.0" width="2.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="152.4" y="286.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2.iterator (464 samples, 0.25%)</title><rect x="149.4" y="259.0" width="2.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="152.4" y="270.0"></text>
</g>
<g>
<title>java.util.AbstractMap$2$1 (188 samples, 0.10%)</title><rect x="149.4" y="243.0" width="1.2" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="152.4" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractMap$2$1.&lt;init&gt; (276 samples, 0.15%)</title><rect x="150.6" y="243.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="153.6" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$DescendingSubMap$DescendingEntrySetView.iterator (276 samples, 0.15%)</title><rect x="150.6" y="227.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.6" y="238.0"></text>
</g>
<g>
<title>java.util.TreeMap$NavigableSubMap$DescendingSubMapEntryIterator (276 samples, 0.15%)</title><rect x="150.6" y="211.0" width="1.7" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="153.6" y="222.0"></text>
</g>
<g>
<title>java/util/Collections$UnmodifiableMap.values (120 samples, 0.06%)</title><rect x="152.3" y="291.0" width="0.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="155.3" y="302.0"></text>
</g>
<g>
<title>java/util/Collections.unmodifiableCollection (120 samples, 0.06%)</title><rect x="152.3" y="275.0" width="0.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="155.3" y="286.0"></text>
</g>
<g>
<title>java.util.Collections$UnmodifiableCollection (120 samples, 0.06%)</title><rect x="152.3" y="259.0" width="0.8" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="155.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (3,415 samples, 1.80%)</title><rect x="153.1" y="291.0" width="21.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="156.1" y="302.0">r..</text>
</g>
<g>
<title>ru.mail.polis.dao.Iters$CollapseEqualsIterator (183 samples, 0.10%)</title><rect x="153.1" y="275.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="156.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (3,232 samples, 1.71%)</title><rect x="154.2" y="275.0" width="20.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.2" y="286.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3,232 samples, 1.71%)</title><rect x="154.2" y="259.0" width="20.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.2" y="270.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (325 samples, 0.17%)</title><rect x="154.2" y="243.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (325 samples, 0.17%)</title><rect x="154.2" y="227.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (325 samples, 0.17%)</title><rect x="154.2" y="211.0" width="2.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="157.2" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (325 samples, 0.17%)</title><rect x="154.2" y="195.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (325 samples, 0.17%)</title><rect x="154.2" y="179.0" width="2.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="157.2" y="190.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (325 samples, 0.17%)</title><rect x="154.2" y="163.0" width="2.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="157.2" y="174.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (325 samples, 0.17%)</title><rect x="154.2" y="147.0" width="2.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="157.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (325 samples, 0.17%)</title><rect x="154.2" y="131.0" width="2.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="157.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (325 samples, 0.17%)</title><rect x="154.2" y="115.0" width="2.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="157.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (325 samples, 0.17%)</title><rect x="154.2" y="99.0" width="2.0" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="157.2" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (325 samples, 0.17%)</title><rect x="154.2" y="83.0" width="2.0" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="157.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (325 samples, 0.17%)</title><rect x="154.2" y="67.0" width="2.0" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="157.2" y="78.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (2,907 samples, 1.54%)</title><rect x="156.2" y="243.0" width="18.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="159.2" y="254.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (2,907 samples, 1.54%)</title><rect x="156.2" y="227.0" width="18.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="159.2" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (2,907 samples, 1.54%)</title><rect x="156.2" y="211.0" width="18.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.2" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (2,907 samples, 1.54%)</title><rect x="156.2" y="195.0" width="18.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="159.2" y="206.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,907 samples, 1.54%)</title><rect x="156.2" y="179.0" width="18.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="159.2" y="190.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (2,907 samples, 1.54%)</title><rect x="156.2" y="163.0" width="18.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="159.2" y="174.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2,539 samples, 1.34%)</title><rect x="156.2" y="147.0" width="15.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="159.2" y="158.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (150 samples, 0.08%)</title><rect x="156.2" y="131.0" width="1.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.2" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (65 samples, 0.03%)</title><rect x="156.2" y="115.0" width="0.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="159.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$70/264199105.apply (65 samples, 0.03%)</title><rect x="156.2" y="99.0" width="0.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="159.2" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (65 samples, 0.03%)</title><rect x="156.2" y="83.0" width="0.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="159.2" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (65 samples, 0.03%)</title><rect x="156.2" y="67.0" width="0.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="159.2" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (85 samples, 0.04%)</title><rect x="156.6" y="115.0" width="0.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="159.6" y="126.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (85 samples, 0.04%)</title><rect x="156.6" y="99.0" width="0.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="159.6" y="110.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (85 samples, 0.04%)</title><rect x="156.6" y="83.0" width="0.6" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="159.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (2,389 samples, 1.26%)</title><rect x="157.2" y="131.0" width="14.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="160.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (2,389 samples, 1.26%)</title><rect x="157.2" y="115.0" width="14.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="160.2" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (2,389 samples, 1.26%)</title><rect x="157.2" y="99.0" width="14.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="160.2" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (1,464 samples, 0.77%)</title><rect x="157.2" y="83.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="160.2" y="94.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (927 samples, 0.49%)</title><rect x="157.2" y="67.0" width="5.8" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="160.2" y="78.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (537 samples, 0.28%)</title><rect x="163.0" y="67.0" width="3.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="166.0" y="78.0"></text>
</g>
<g>
<title>byte[] (537 samples, 0.28%)</title><rect x="163.0" y="51.0" width="3.3" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="166.0" y="62.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (105 samples, 0.06%)</title><rect x="166.3" y="83.0" width="0.7" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="169.3" y="94.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (113 samples, 0.06%)</title><rect x="167.0" y="83.0" width="0.7" height="15" fill="#52c0c0" rx="2" ry="2"/>
<text x="170.0" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (707 samples, 0.37%)</title><rect x="167.7" y="83.0" width="4.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="170.7" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (707 samples, 0.37%)</title><rect x="167.7" y="67.0" width="4.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="170.7" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (487 samples, 0.26%)</title><rect x="167.7" y="51.0" width="3.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="170.7" y="62.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (220 samples, 0.12%)</title><rect x="170.7" y="51.0" width="1.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="173.7" y="62.0"></text>
</g>
<g>
<title>byte[] (220 samples, 0.12%)</title><rect x="170.7" y="35.0" width="1.4" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="173.7" y="46.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (368 samples, 0.19%)</title><rect x="172.1" y="147.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="175.1" y="158.0"></text>
</g>
<g>
<title>java/util/Comparators$NaturalOrderComparator.compare (368 samples, 0.19%)</title><rect x="172.1" y="131.0" width="2.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="175.1" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (368 samples, 0.19%)</title><rect x="172.1" y="115.0" width="2.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="175.1" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.compareTo (368 samples, 0.19%)</title><rect x="172.1" y="99.0" width="2.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="175.1" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (368 samples, 0.19%)</title><rect x="172.1" y="83.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="175.1" y="94.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (368 samples, 0.19%)</title><rect x="172.1" y="67.0" width="2.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="175.1" y="78.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (368 samples, 0.19%)</title><rect x="172.1" y="51.0" width="2.3" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="175.1" y="62.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.iterator (39,649 samples, 20.95%)</title><rect x="174.4" y="291.0" width="247.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="177.4" y="302.0">ru/mail/polis/dao/boriskin/Sorted..</text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.SortedStringTable$1 (378 samples, 0.20%)</title><rect x="174.4" y="275.0" width="2.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="177.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt; (39,271 samples, 20.75%)</title><rect x="176.7" y="275.0" width="244.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="286.0">ru/mail/polis/dao/boriskin/Sorte..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findNext (39,271 samples, 20.75%)</title><rect x="176.7" y="259.0" width="244.9" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="179.7" y="270.0">ru/mail/polis/dao/boriskin/Sorte..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findK (39,271 samples, 20.75%)</title><rect x="176.7" y="243.0" width="244.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="179.7" y="254.0">ru/mail/polis/dao/boriskin/Sorte..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (26,252 samples, 13.87%)</title><rect x="176.7" y="227.0" width="163.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="179.7" y="238.0">java/nio/ByteBuffer.a..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (17,655 samples, 9.33%)</title><rect x="176.7" y="211.0" width="110.1" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="179.7" y="222.0">java.nio.Heap..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (8,597 samples, 4.54%)</title><rect x="286.8" y="211.0" width="53.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="289.8" y="222.0">java/..</text>
</g>
<g>
<title>byte[] (8,597 samples, 4.54%)</title><rect x="286.8" y="195.0" width="53.6" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="289.8" y="206.0">byte[]</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findOffset (13,019 samples, 6.88%)</title><rect x="340.4" y="227.0" width="81.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="343.4" y="238.0">ru/mail/p..</text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (13,019 samples, 6.88%)</title><rect x="340.4" y="211.0" width="81.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="343.4" y="222.0">java/nio/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (8,786 samples, 4.64%)</title><rect x="340.4" y="195.0" width="54.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="343.4" y="206.0">java...</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (4,233 samples, 2.24%)</title><rect x="395.2" y="195.0" width="26.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="398.2" y="206.0">j..</text>
</g>
<g>
<title>byte[] (4,233 samples, 2.24%)</title><rect x="395.2" y="179.0" width="26.4" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="398.2" y="190.0">b..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (388 samples, 0.21%)</title><rect x="421.6" y="355.0" width="2.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="424.6" y="366.0"></text>
</g>
<g>
<title>one.nio.http.Response (44 samples, 0.02%)</title><rect x="421.6" y="339.0" width="0.3" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="424.6" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (199 samples, 0.11%)</title><rect x="421.9" y="339.0" width="1.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="424.9" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (199 samples, 0.11%)</title><rect x="421.9" y="323.0" width="1.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="424.9" y="334.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (142 samples, 0.08%)</title><rect x="421.9" y="307.0" width="0.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="424.9" y="318.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (142 samples, 0.08%)</title><rect x="421.9" y="291.0" width="0.9" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="424.9" y="302.0"></text>
</g>
<g>
<title>byte[] (142 samples, 0.08%)</title><rect x="421.9" y="275.0" width="0.9" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="424.9" y="286.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (57 samples, 0.03%)</title><rect x="422.8" y="307.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="425.8" y="318.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (57 samples, 0.03%)</title><rect x="422.8" y="291.0" width="0.3" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="425.8" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (145 samples, 0.08%)</title><rect x="423.1" y="339.0" width="0.9" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="426.1" y="350.0"></text>
</g>
<g>
<title>byte[] (70 samples, 0.04%)</title><rect x="423.1" y="323.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="426.1" y="334.0"></text>
</g>
<g>
<title>java.lang.String[] (42 samples, 0.02%)</title><rect x="423.6" y="323.0" width="0.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="426.6" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.toByteArray (162 samples, 0.09%)</title><rect x="424.0" y="355.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="427.0" y="366.0"></text>
</g>
<g>
<title>byte[] (162 samples, 0.09%)</title><rect x="424.0" y="339.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="427.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.proxy (40,751 samples, 21.53%)</title><rect x="425.0" y="387.0" width="254.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.0" y="398.0">ru/mail/polis/service/boriskin/New..</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (336 samples, 0.18%)</title><rect x="425.0" y="371.0" width="2.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="428.0" y="382.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/689401025.invoke (336 samples, 0.18%)</title><rect x="425.0" y="355.0" width="2.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="428.0" y="366.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (336 samples, 0.18%)</title><rect x="425.0" y="339.0" width="2.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="428.0" y="350.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (297 samples, 0.16%)</title><rect x="425.3" y="323.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="428.3" y="334.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (297 samples, 0.16%)</title><rect x="425.3" y="307.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="428.3" y="318.0"></text>
</g>
<g>
<title>byte[] (297 samples, 0.16%)</title><rect x="425.3" y="291.0" width="1.8" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="428.3" y="302.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (40,181 samples, 21.23%)</title><rect x="427.1" y="371.0" width="250.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="430.1" y="382.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (40,181 samples, 21.23%)</title><rect x="427.1" y="355.0" width="250.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="430.1" y="366.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (55 samples, 0.03%)</title><rect x="427.1" y="339.0" width="0.4" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="430.1" y="350.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (38,625 samples, 20.41%)</title><rect x="427.5" y="339.0" width="240.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="430.5" y="350.0">one/nio/http/HttpClient$Response..</text>
</g>
<g>
<title>byte[] (8,728 samples, 4.61%)</title><rect x="427.5" y="323.0" width="54.4" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="430.5" y="334.0">byte[]</text>
</g>
<g>
<title>byte[] (29,897 samples, 15.80%)</title><rect x="481.9" y="323.0" width="186.4" height="15" fill="#f18d00" rx="2" ry="2"/>
<text x="484.9" y="334.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (1,214 samples, 0.64%)</title><rect x="668.3" y="339.0" width="7.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="671.3" y="350.0"></text>
</g>
<g>
<title>byte[] (42 samples, 0.02%)</title><rect x="668.3" y="323.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="671.3" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (85 samples, 0.04%)</title><rect x="668.6" y="323.0" width="0.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="671.6" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (85 samples, 0.04%)</title><rect x="668.6" y="307.0" width="0.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="671.6" y="318.0"></text>
</g>
<g>
<title>java.lang.String (42 samples, 0.02%)</title><rect x="668.6" y="291.0" width="0.2" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="671.6" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (43 samples, 0.02%)</title><rect x="668.8" y="291.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="671.8" y="302.0"></text>
</g>
<g>
<title>byte[] (43 samples, 0.02%)</title><rect x="668.8" y="275.0" width="0.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="671.8" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (949 samples, 0.50%)</title><rect x="669.3" y="323.0" width="6.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="672.3" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (949 samples, 0.50%)</title><rect x="669.3" y="307.0" width="6.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="672.3" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (949 samples, 0.50%)</title><rect x="669.3" y="291.0" width="6.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="672.3" y="302.0"></text>
</g>
<g>
<title>char[] (647 samples, 0.34%)</title><rect x="669.3" y="275.0" width="4.1" height="15" fill="#62d0d0" rx="2" ry="2"/>
<text x="672.3" y="286.0"></text>
</g>
<g>
<title>java.lang.String (138 samples, 0.07%)</title><rect x="673.4" y="275.0" width="0.8" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="676.4" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (164 samples, 0.09%)</title><rect x="674.2" y="275.0" width="1.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="677.2" y="286.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (164 samples, 0.09%)</title><rect x="674.2" y="259.0" width="1.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="677.2" y="270.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (164 samples, 0.09%)</title><rect x="674.2" y="243.0" width="1.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="677.2" y="254.0"></text>
</g>
<g>
<title>byte[] (164 samples, 0.09%)</title><rect x="674.2" y="227.0" width="1.1" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="677.2" y="238.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (47 samples, 0.02%)</title><rect x="675.3" y="323.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="678.3" y="334.0"></text>
</g>
<g>
<title>java.lang.String[] (47 samples, 0.02%)</title><rect x="675.3" y="307.0" width="0.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="678.3" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (53 samples, 0.03%)</title><rect x="675.6" y="323.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="678.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (53 samples, 0.03%)</title><rect x="675.6" y="307.0" width="0.3" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="678.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (53 samples, 0.03%)</title><rect x="675.6" y="291.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="678.6" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (174 samples, 0.09%)</title><rect x="675.9" y="339.0" width="1.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="678.9" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (174 samples, 0.09%)</title><rect x="675.9" y="323.0" width="1.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="678.9" y="334.0"></text>
</g>
<g>
<title>byte[] (174 samples, 0.09%)</title><rect x="675.9" y="307.0" width="1.1" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="678.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (73 samples, 0.04%)</title><rect x="677.0" y="339.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="680.0" y="350.0"></text>
</g>
<g>
<title>java/lang/String.substring (73 samples, 0.04%)</title><rect x="677.0" y="323.0" width="0.4" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="680.0" y="334.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (73 samples, 0.04%)</title><rect x="677.0" y="307.0" width="0.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="680.0" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (44 samples, 0.02%)</title><rect x="677.1" y="291.0" width="0.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="680.1" y="302.0"></text>
</g>
<g>
<title>byte[] (44 samples, 0.02%)</title><rect x="677.1" y="275.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="680.1" y="286.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (234 samples, 0.12%)</title><rect x="677.7" y="371.0" width="1.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="680.7" y="382.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (234 samples, 0.12%)</title><rect x="677.7" y="355.0" width="1.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="680.7" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (172 samples, 0.09%)</title><rect x="677.7" y="339.0" width="1.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="680.7" y="350.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (172 samples, 0.09%)</title><rect x="677.7" y="323.0" width="1.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="680.7" y="334.0"></text>
</g>
<g>
<title>byte[] (172 samples, 0.09%)</title><rect x="677.7" y="307.0" width="1.0" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="680.7" y="318.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (62 samples, 0.03%)</title><rect x="678.7" y="339.0" width="0.4" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="681.7" y="350.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (62 samples, 0.03%)</title><rect x="678.7" y="323.0" width="0.4" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="681.7" y="334.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (81,929 samples, 43.29%)</title><rect x="679.1" y="467.0" width="510.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="682.1" y="478.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (2,438 samples, 1.29%)</title><rect x="679.1" y="451.0" width="15.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="682.1" y="462.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (2,438 samples, 1.29%)</title><rect x="679.1" y="435.0" width="15.2" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="682.1" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (79,491 samples, 42.01%)</title><rect x="694.3" y="451.0" width="495.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="697.3" y="462.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (79,491 samples, 42.01%)</title><rect x="694.3" y="435.0" width="495.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="697.3" y="446.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (79,491 samples, 42.01%)</title><rect x="694.3" y="419.0" width="495.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="697.3" y="430.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (25,020 samples, 13.22%)</title><rect x="694.3" y="403.0" width="156.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="697.3" y="414.0">one/nio/http/HttpSes..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (25,020 samples, 13.22%)</title><rect x="694.3" y="387.0" width="156.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="697.3" y="398.0">one/nio/http/HttpSer..</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (17,415 samples, 9.20%)</title><rect x="694.3" y="371.0" width="108.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="697.3" y="382.0">RequestHandle..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (4,426 samples, 2.34%)</title><rect x="694.3" y="355.0" width="27.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="697.3" y="366.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (4,426 samples, 2.34%)</title><rect x="694.3" y="339.0" width="27.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="697.3" y="350.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (4,426 samples, 2.34%)</title><rect x="694.3" y="323.0" width="27.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="697.3" y="334.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (4,426 samples, 2.34%)</title><rect x="694.3" y="307.0" width="27.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="697.3" y="318.0">j..</text>
</g>
<g>
<title>java.lang.String (2,049 samples, 1.08%)</title><rect x="694.3" y="291.0" width="12.8" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="697.3" y="302.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (2,377 samples, 1.26%)</title><rect x="707.1" y="291.0" width="14.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="710.1" y="302.0"></text>
</g>
<g>
<title>byte[] (2,377 samples, 1.26%)</title><rect x="707.1" y="275.0" width="14.8" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="710.1" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.get (12,989 samples, 6.86%)</title><rect x="721.9" y="355.0" width="81.0" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="724.9" y="366.0">ru/mail/p..</text>
</g>
<g>
<title>java/lang/String.getBytes (2,312 samples, 1.22%)</title><rect x="721.9" y="339.0" width="14.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="724.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (2,312 samples, 1.22%)</title><rect x="721.9" y="323.0" width="14.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="724.9" y="334.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (2,312 samples, 1.22%)</title><rect x="721.9" y="307.0" width="14.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="724.9" y="318.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (2,312 samples, 1.22%)</title><rect x="721.9" y="291.0" width="14.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="724.9" y="302.0"></text>
</g>
<g>
<title>byte[] (2,312 samples, 1.22%)</title><rect x="721.9" y="275.0" width="14.4" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="724.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,826 samples, 2.55%)</title><rect x="736.3" y="339.0" width="30.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="739.3" y="350.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,826 samples, 2.55%)</title><rect x="736.3" y="323.0" width="30.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="739.3" y="334.0">ja..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,826 samples, 2.55%)</title><rect x="736.3" y="307.0" width="30.1" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="739.3" y="318.0">ja..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.runExecutorService (5,851 samples, 3.09%)</title><rect x="766.4" y="339.0" width="36.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.4" y="350.0">ru/..</text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/521157800.linkToTargetMethod (5,803 samples, 3.07%)</title><rect x="766.4" y="323.0" width="36.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="769.4" y="334.0">jav..</text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (5,803 samples, 3.07%)</title><rect x="766.4" y="307.0" width="36.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="769.4" y="318.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$65/1589279360.get$Lambda (5,803 samples, 3.07%)</title><rect x="766.4" y="291.0" width="36.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.4" y="302.0">ru/..</text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.NewService$$Lambda$65 (5,803 samples, 3.07%)</title><rect x="766.4" y="275.0" width="36.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="769.4" y="286.0">ru...</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.execute (48 samples, 0.03%)</title><rect x="802.6" y="323.0" width="0.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="805.6" y="334.0"></text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.offer (48 samples, 0.03%)</title><rect x="802.6" y="307.0" width="0.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="805.6" y="318.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lock (48 samples, 0.03%)</title><rect x="802.6" y="291.0" width="0.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="805.6" y="302.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquire (48 samples, 0.03%)</title><rect x="802.6" y="275.0" width="0.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="805.6" y="286.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (48 samples, 0.03%)</title><rect x="802.6" y="259.0" width="0.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="805.6" y="270.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (48 samples, 0.03%)</title><rect x="802.6" y="243.0" width="0.3" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="805.6" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (7,605 samples, 4.02%)</title><rect x="802.9" y="371.0" width="47.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="805.9" y="382.0">one/..</text>
</g>
<g>
<title>java/lang/String.substring (7,605 samples, 4.02%)</title><rect x="802.9" y="355.0" width="47.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="805.9" y="366.0">java..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (7,605 samples, 4.02%)</title><rect x="802.9" y="339.0" width="47.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="805.9" y="350.0">java..</text>
</g>
<g>
<title>java.lang.String (4,084 samples, 2.16%)</title><rect x="802.9" y="323.0" width="25.5" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="805.9" y="334.0">j..</text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (3,521 samples, 1.86%)</title><rect x="828.4" y="323.0" width="21.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="831.4" y="334.0">j..</text>
</g>
<g>
<title>byte[] (3,521 samples, 1.86%)</title><rect x="828.4" y="307.0" width="21.9" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="831.4" y="318.0">b..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (28,158 samples, 14.88%)</title><rect x="850.3" y="403.0" width="175.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="853.3" y="414.0">one/nio/http/HttpSessio..</text>
</g>
<g>
<title>one.nio.http.Request (5,536 samples, 2.93%)</title><rect x="850.3" y="387.0" width="34.6" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="853.3" y="398.0">on..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (8,036 samples, 4.25%)</title><rect x="884.9" y="387.0" width="50.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="887.9" y="398.0">one/n..</text>
</g>
<g>
<title>java.lang.String[] (7,184 samples, 3.80%)</title><rect x="884.9" y="371.0" width="44.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="887.9" y="382.0">java..</text>
</g>
<g>
<title>java.lang.String[] (852 samples, 0.45%)</title><rect x="929.7" y="371.0" width="5.3" height="15" fill="#e27e00" rx="2" ry="2"/>
<text x="932.7" y="382.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,586 samples, 7.71%)</title><rect x="935.0" y="387.0" width="90.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="938.0" y="398.0">one/nio/ut..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (14,586 samples, 7.71%)</title><rect x="935.0" y="371.0" width="90.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="938.0" y="382.0">one/nio/ut..</text>
</g>
<g>
<title>char[] (7,971 samples, 4.21%)</title><rect x="935.0" y="355.0" width="49.7" height="15" fill="#64d2d2" rx="2" ry="2"/>
<text x="938.0" y="366.0">char[]</text>
</g>
<g>
<title>char[] (262 samples, 0.14%)</title><rect x="984.7" y="355.0" width="1.6" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="987.7" y="366.0"></text>
</g>
<g>
<title>java.lang.String (1,730 samples, 0.91%)</title><rect x="986.3" y="355.0" width="10.8" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="989.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,623 samples, 2.44%)</title><rect x="997.1" y="355.0" width="28.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1000.1" y="366.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,623 samples, 2.44%)</title><rect x="997.1" y="339.0" width="28.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1000.1" y="350.0">ja..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,623 samples, 2.44%)</title><rect x="997.1" y="323.0" width="28.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1000.1" y="334.0">ja..</text>
</g>
<g>
<title>byte[] (4,623 samples, 2.44%)</title><rect x="997.1" y="307.0" width="28.8" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="1000.1" y="318.0">by..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (26,313 samples, 13.90%)</title><rect x="1025.9" y="403.0" width="164.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1028.9" y="414.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>one/nio/util/Utf8.read (26,313 samples, 13.90%)</title><rect x="1025.9" y="387.0" width="164.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="1028.9" y="398.0">one/nio/util/Utf8.read</text>
</g>
<g>
<title>char[] (8,770 samples, 4.63%)</title><rect x="1025.9" y="371.0" width="54.7" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="1028.9" y="382.0">char[]</text>
</g>
<g>
<title>char[] (2,202 samples, 1.16%)</title><rect x="1080.6" y="371.0" width="13.7" height="15" fill="#ef8b00" rx="2" ry="2"/>
<text x="1083.6" y="382.0"></text>
</g>
<g>
<title>java.lang.String (4,454 samples, 2.35%)</title><rect x="1094.3" y="371.0" width="27.8" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="1097.3" y="382.0">j..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10,887 samples, 5.75%)</title><rect x="1122.1" y="371.0" width="67.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1125.1" y="382.0">java/la..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (10,887 samples, 5.75%)</title><rect x="1122.1" y="355.0" width="67.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1125.1" y="366.0">java/la..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (10,887 samples, 5.75%)</title><rect x="1122.1" y="339.0" width="67.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.1" y="350.0">java/la..</text>
</g>
<g>
<title>byte[] (10,652 samples, 5.63%)</title><rect x="1122.1" y="323.0" width="66.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1125.1" y="334.0">byte[]</text>
</g>
<g>
<title>byte[] (235 samples, 0.12%)</title><rect x="1188.5" y="323.0" width="1.5" height="15" fill="#eb8700" rx="2" ry="2"/>
<text x="1191.5" y="334.0"></text>
</g>
</g>
</svg>
