<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="342" onload="init(evt)" viewBox="0 0 1200 342" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="325"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="325"> </text>
<g id="frames">
<g>
<title>all (104,773 samples, 100.00%)</title><rect x="10.0" y="291.0" width="1180.0" height="15" fill="#eb6767" rx="2" ry="2"/>
<text x="13.0" y="302.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (68,429 samples, 65.31%)</title><rect x="10.0" y="275.0" width="770.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="286.0">java/lang/Thread.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (68,429 samples, 65.31%)</title><rect x="10.0" y="259.0" width="770.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="270.0">java/util/concurrent/ThreadPoolExecutor$Worker.run</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (68,429 samples, 65.31%)</title><rect x="10.0" y="243.0" width="770.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="254.0">java/util/concurrent/ThreadPoolExecutor.runWorker</text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.getTask (3,348 samples, 3.20%)</title><rect x="10.0" y="227.0" width="37.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="238.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/ArrayBlockingQueue.take (3,348 samples, 3.20%)</title><rect x="10.0" y="211.0" width="37.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="13.0" y="222.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.await (3,287 samples, 3.14%)</title><rect x="10.0" y="195.0" width="37.0" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="206.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter (3,287 samples, 3.14%)</title><rect x="10.0" y="179.0" width="37.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="190.0">jav..</text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (3,287 samples, 3.14%)</title><rect x="10.0" y="163.0" width="37.0" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="13.0" y="174.0">jav..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantLock.lockInterruptibly (61 samples, 0.06%)</title><rect x="47.0" y="195.0" width="0.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.0" y="206.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireInterruptibly (61 samples, 0.06%)</title><rect x="47.0" y="179.0" width="0.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="50.0" y="190.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.doAcquireInterruptibly (61 samples, 0.06%)</title><rect x="47.0" y="163.0" width="0.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="50.0" y="174.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.addWaiter (61 samples, 0.06%)</title><rect x="47.0" y="147.0" width="0.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="50.0" y="158.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.AbstractQueuedSynchronizer$Node (61 samples, 0.06%)</title><rect x="47.0" y="131.0" width="0.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="50.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$66/300860225.run (65,081 samples, 62.12%)</title><rect x="47.7" y="227.0" width="733.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.7" y="238.0">ru/mail/polis/service/boriskin/NewService$$Lambda$66/300860225.run</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$1 (65,081 samples, 62.12%)</title><rect x="47.7" y="211.0" width="733.0" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="50.7" y="222.0">ru/mail/polis/service/boriskin/NewService.lambda$runExecutorService$1</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (31,444 samples, 30.01%)</title><rect x="47.7" y="195.0" width="354.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="50.7" y="206.0">ru/mail/polis/service/boriskin/NewService.operat..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,555 samples, 4.35%)</title><rect x="47.7" y="179.0" width="51.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="50.7" y="190.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (4,555 samples, 4.35%)</title><rect x="47.7" y="163.0" width="51.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="50.7" y="174.0">java/..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (4,555 samples, 4.35%)</title><rect x="47.7" y="147.0" width="51.3" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="50.7" y="158.0">java...</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.doUpsert (26,889 samples, 25.66%)</title><rect x="99.0" y="179.0" width="302.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="102.0" y="190.0">ru/mail/polis/service/boriskin/NewService..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (8,712 samples, 8.32%)</title><rect x="99.0" y="163.0" width="98.1" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="102.0" y="174.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$ReadLock.lock (85 samples, 0.08%)</title><rect x="99.0" y="147.0" width="1.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="102.0" y="158.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/AbstractQueuedSynchronizer.acquireShared (85 samples, 0.08%)</title><rect x="99.0" y="131.0" width="1.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="102.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync.tryAcquireShared (85 samples, 0.08%)</title><rect x="99.0" y="115.0" width="1.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="102.0" y="126.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (80 samples, 0.08%)</title><rect x="99.0" y="99.0" width="0.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="102.0" y="110.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.setInitialValue (80 samples, 0.08%)</title><rect x="99.0" y="83.0" width="0.9" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.0" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.set (42 samples, 0.04%)</title><rect x="99.0" y="67.0" width="0.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="102.0" y="78.0"></text>
</g>
<g>
<title>java.lang.ThreadLocal$ThreadLocalMap$Entry (42 samples, 0.04%)</title><rect x="99.0" y="51.0" width="0.5" height="15" fill="#5bc9c9" rx="2" ry="2"/>
<text x="102.0" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (38 samples, 0.04%)</title><rect x="99.5" y="67.0" width="0.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="102.5" y="78.0"></text>
</g>
<g>
<title>java/util/concurrent/locks/ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter.initialValue (38 samples, 0.04%)</title><rect x="99.5" y="51.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="102.5" y="62.0"></text>
</g>
<g>
<title>java.util.concurrent.locks.ReentrantReadWriteLock$Sync$HoldCounter (38 samples, 0.04%)</title><rect x="99.5" y="35.0" width="0.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="102.5" y="46.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (7,830 samples, 7.47%)</title><rect x="100.0" y="147.0" width="88.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="103.0" y="158.0">ru/mail/po..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (6,303 samples, 6.02%)</title><rect x="100.0" y="131.0" width="71.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="103.0" y="142.0">java/nio..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (6,303 samples, 6.02%)</title><rect x="100.0" y="115.0" width="71.0" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="103.0" y="126.0">java.nio..</text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.put (39 samples, 0.04%)</title><rect x="171.0" y="131.0" width="0.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="174.0" y="142.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap.doPut (39 samples, 0.04%)</title><rect x="171.0" y="115.0" width="0.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="174.0" y="126.0"></text>
</g>
<g>
<title>java.util.concurrent.ConcurrentSkipListMap$Node (23 samples, 0.02%)</title><rect x="171.1" y="99.0" width="0.3" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="174.1" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.Value (1,488 samples, 1.42%)</title><rect x="171.4" y="131.0" width="16.8" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="174.4" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (797 samples, 0.76%)</title><rect x="188.2" y="147.0" width="8.9" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="191.2" y="158.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (789 samples, 0.75%)</title><rect x="188.3" y="131.0" width="8.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.3" y="142.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (79 samples, 0.08%)</title><rect x="188.3" y="115.0" width="0.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="191.3" y="126.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (38 samples, 0.04%)</title><rect x="188.3" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.3" y="110.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$73/88818415.apply (38 samples, 0.04%)</title><rect x="188.3" y="83.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="191.3" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (38 samples, 0.04%)</title><rect x="188.3" y="67.0" width="0.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="191.3" y="78.0"></text>
</g>
<g>
<title>ru.mail.polis.dao.boriskin.TableCell (38 samples, 0.04%)</title><rect x="188.3" y="51.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="191.3" y="62.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (41 samples, 0.04%)</title><rect x="188.7" y="99.0" width="0.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="191.7" y="110.0"></text>
</g>
<g>
<title>java/util/concurrent/ConcurrentSkipListMap$SubMap$SubMapEntryIterator.next (41 samples, 0.04%)</title><rect x="188.7" y="83.0" width="0.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="191.7" y="94.0"></text>
</g>
<g>
<title>java.util.AbstractMap$SimpleImmutableEntry (41 samples, 0.04%)</title><rect x="188.7" y="67.0" width="0.4" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="191.7" y="78.0"></text>
</g>
<g>
<title>java/lang/Integer.valueOf (41 samples, 0.04%)</title><rect x="189.1" y="115.0" width="0.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="192.1" y="126.0"></text>
</g>
<g>
<title>java.lang.Integer (41 samples, 0.04%)</title><rect x="189.1" y="99.0" width="0.5" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="192.1" y="110.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.allocate (394 samples, 0.38%)</title><rect x="189.6" y="115.0" width="4.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="192.6" y="126.0"></text>
</g>
<g>
<title>java.nio.HeapByteBuffer (193 samples, 0.18%)</title><rect x="189.6" y="99.0" width="2.2" height="15" fill="#57c5c5" rx="2" ry="2"/>
<text x="192.6" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (201 samples, 0.19%)</title><rect x="191.8" y="99.0" width="2.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="194.8" y="110.0"></text>
</g>
<g>
<title>byte[] (201 samples, 0.19%)</title><rect x="191.8" y="83.0" width="2.2" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="194.8" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (127 samples, 0.12%)</title><rect x="194.2" y="115.0" width="1.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="197.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (127 samples, 0.12%)</title><rect x="194.2" y="99.0" width="1.4" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="197.2" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (127 samples, 0.12%)</title><rect x="194.2" y="83.0" width="1.4" height="15" fill="#66d4d4" rx="2" ry="2"/>
<text x="197.2" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Value.getData (133 samples, 0.13%)</title><rect x="195.6" y="115.0" width="1.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="198.6" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (133 samples, 0.13%)</title><rect x="195.6" y="99.0" width="1.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="198.6" y="110.0"></text>
</g>
<g>
<title>java.nio.HeapByteBufferR (133 samples, 0.13%)</title><rect x="195.6" y="83.0" width="1.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="198.6" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (18,177 samples, 17.35%)</title><rect x="197.1" y="163.0" width="204.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.1" y="174.0">ru/mail/polis/service/boris..</text>
</g>
<g>
<title>one.nio.http.Response (1,814 samples, 1.73%)</title><rect x="197.1" y="147.0" width="20.5" height="15" fill="#54c2c2" rx="2" ry="2"/>
<text x="200.1" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (9,041 samples, 8.63%)</title><rect x="217.6" y="147.0" width="101.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="220.6" y="158.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (9,041 samples, 8.63%)</title><rect x="217.6" y="131.0" width="101.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="220.6" y="142.0">one/nio/http..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6,353 samples, 6.06%)</title><rect x="217.6" y="115.0" width="71.5" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="220.6" y="126.0">one/nio/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (6,353 samples, 6.06%)</title><rect x="217.6" y="99.0" width="71.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="220.6" y="110.0">one/nio/..</text>
</g>
<g>
<title>byte[] (4,110 samples, 3.92%)</title><rect x="217.6" y="83.0" width="46.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="220.6" y="94.0">byte[]</text>
</g>
<g>
<title>byte[] (2,243 samples, 2.14%)</title><rect x="263.9" y="83.0" width="25.2" height="15" fill="#ec8800" rx="2" ry="2"/>
<text x="266.9" y="94.0">b..</text>
</g>
<g>
<title>one/nio/net/Session.write (2,688 samples, 2.57%)</title><rect x="289.1" y="115.0" width="30.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="292.1" y="126.0">on..</text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (2,688 samples, 2.57%)</title><rect x="289.1" y="99.0" width="30.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="292.1" y="110.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (7,322 samples, 6.99%)</title><rect x="319.4" y="147.0" width="82.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="322.4" y="158.0">one/nio/h..</text>
</g>
<g>
<title>byte[] (3,032 samples, 2.89%)</title><rect x="319.4" y="131.0" width="34.1" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="322.4" y="142.0">by..</text>
</g>
<g>
<title>java.lang.String[] (2,454 samples, 2.34%)</title><rect x="353.5" y="131.0" width="27.7" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="356.5" y="142.0">j..</text>
</g>
<g>
<title>java.lang.String (1,836 samples, 1.75%)</title><rect x="381.2" y="131.0" width="20.7" height="15" fill="#5ccaca" rx="2" ry="2"/>
<text x="384.2" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.proxy (33,637 samples, 32.10%)</title><rect x="401.9" y="195.0" width="378.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.9" y="206.0">ru/mail/polis/service/boriskin/NewService.proxy</text>
</g>
<g>
<title>java/lang/invoke/Invokers$Holder.linkToTargetMethod (235 samples, 0.22%)</title><rect x="401.9" y="179.0" width="2.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="404.9" y="190.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/689401025.invoke (235 samples, 0.22%)</title><rect x="401.9" y="163.0" width="2.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="404.9" y="174.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (235 samples, 0.22%)</title><rect x="401.9" y="147.0" width="2.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="404.9" y="158.0"></text>
</g>
<g>
<title>java/lang/StringConcatHelper.newString (23 samples, 0.02%)</title><rect x="401.9" y="131.0" width="0.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="404.9" y="142.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.02%)</title><rect x="401.9" y="115.0" width="0.2" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="404.9" y="126.0"></text>
</g>
<g>
<title>java/lang/invoke/StringConcatFactory$MethodHandleInlineCopyStrategy.newArray (212 samples, 0.20%)</title><rect x="402.1" y="131.0" width="2.4" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="405.1" y="142.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.allocateUninitializedArray (212 samples, 0.20%)</title><rect x="402.1" y="115.0" width="2.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="405.1" y="126.0"></text>
</g>
<g>
<title>byte[] (212 samples, 0.20%)</title><rect x="402.1" y="99.0" width="2.4" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="405.1" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (33,215 samples, 31.70%)</title><rect x="404.5" y="179.0" width="374.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="407.5" y="190.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one/nio/http/HttpClient.invoke (33,215 samples, 31.70%)</title><rect x="404.5" y="163.0" width="374.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="407.5" y="174.0">one/nio/http/HttpClient.invoke</text>
</g>
<g>
<title>one.nio.http.HttpClient$ResponseReader (50 samples, 0.05%)</title><rect x="404.5" y="147.0" width="0.6" height="15" fill="#67d5d5" rx="2" ry="2"/>
<text x="407.5" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.&lt;init&gt; (31,986 samples, 30.53%)</title><rect x="405.1" y="147.0" width="360.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="408.1" y="158.0">one/nio/http/HttpClient$ResponseReader.&lt;init&gt;</text>
</g>
<g>
<title>byte[] (10,108 samples, 9.65%)</title><rect x="405.1" y="131.0" width="113.8" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="408.1" y="142.0">byte[]</text>
</g>
<g>
<title>byte[] (21,878 samples, 20.88%)</title><rect x="518.9" y="131.0" width="246.4" height="15" fill="#ea8600" rx="2" ry="2"/>
<text x="521.9" y="142.0">byte[]</text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readResponse (887 samples, 0.85%)</title><rect x="765.3" y="147.0" width="10.0" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.3" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (53 samples, 0.05%)</title><rect x="765.5" y="131.0" width="0.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="768.5" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (53 samples, 0.05%)</title><rect x="765.5" y="115.0" width="0.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="768.5" y="126.0"></text>
</g>
<g>
<title>java.lang.String (26 samples, 0.02%)</title><rect x="765.5" y="99.0" width="0.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="768.5" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (27 samples, 0.03%)</title><rect x="765.8" y="99.0" width="0.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="768.8" y="110.0"></text>
</g>
<g>
<title>byte[] (27 samples, 0.03%)</title><rect x="765.8" y="83.0" width="0.3" height="15" fill="#6ad8d8" rx="2" ry="2"/>
<text x="768.8" y="94.0"></text>
</g>
<g>
<title>one/nio/http/HttpClient$ResponseReader.readLine (703 samples, 0.67%)</title><rect x="766.3" y="131.0" width="7.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="769.3" y="142.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (703 samples, 0.67%)</title><rect x="766.3" y="115.0" width="7.9" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="769.3" y="126.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (703 samples, 0.67%)</title><rect x="766.3" y="99.0" width="7.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="769.3" y="110.0"></text>
</g>
<g>
<title>char[] (494 samples, 0.47%)</title><rect x="766.3" y="83.0" width="5.6" height="15" fill="#63d1d1" rx="2" ry="2"/>
<text x="769.3" y="94.0"></text>
</g>
<g>
<title>java.lang.String (88 samples, 0.08%)</title><rect x="771.9" y="83.0" width="1.0" height="15" fill="#65d3d3" rx="2" ry="2"/>
<text x="774.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (121 samples, 0.12%)</title><rect x="772.9" y="83.0" width="1.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="775.9" y="94.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (121 samples, 0.12%)</title><rect x="772.9" y="67.0" width="1.3" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="775.9" y="78.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (121 samples, 0.12%)</title><rect x="772.9" y="51.0" width="1.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="775.9" y="62.0"></text>
</g>
<g>
<title>byte[] (121 samples, 0.12%)</title><rect x="772.9" y="35.0" width="1.3" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="775.9" y="46.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (45 samples, 0.04%)</title><rect x="774.2" y="131.0" width="0.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="777.2" y="142.0"></text>
</g>
<g>
<title>java.lang.String[] (45 samples, 0.04%)</title><rect x="774.2" y="115.0" width="0.6" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="777.2" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (48 samples, 0.05%)</title><rect x="774.8" y="131.0" width="0.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="777.8" y="142.0"></text>
</g>
<g>
<title>java/lang/String.substring (48 samples, 0.05%)</title><rect x="774.8" y="115.0" width="0.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="777.8" y="126.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (48 samples, 0.05%)</title><rect x="774.8" y="99.0" width="0.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="777.8" y="110.0"></text>
</g>
<g>
<title>java.lang.String (29 samples, 0.03%)</title><rect x="774.8" y="83.0" width="0.3" height="15" fill="#58c6c6" rx="2" ry="2"/>
<text x="777.8" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.toBytes (203 samples, 0.19%)</title><rect x="775.3" y="147.0" width="2.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="778.3" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (203 samples, 0.19%)</title><rect x="775.3" y="131.0" width="2.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="778.3" y="142.0"></text>
</g>
<g>
<title>byte[] (203 samples, 0.19%)</title><rect x="775.3" y="115.0" width="2.3" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="778.3" y="126.0"></text>
</g>
<g>
<title>one/nio/http/Response.getHeader (53 samples, 0.05%)</title><rect x="777.6" y="147.0" width="0.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="780.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.substring (53 samples, 0.05%)</title><rect x="777.6" y="131.0" width="0.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="780.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (53 samples, 0.05%)</title><rect x="777.6" y="115.0" width="0.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="780.6" y="126.0"></text>
</g>
<g>
<title>java.lang.String (23 samples, 0.02%)</title><rect x="777.6" y="99.0" width="0.2" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="780.6" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (30 samples, 0.03%)</title><rect x="777.8" y="99.0" width="0.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="780.8" y="110.0"></text>
</g>
<g>
<title>byte[] (30 samples, 0.03%)</title><rect x="777.8" y="83.0" width="0.4" height="15" fill="#55c3c3" rx="2" ry="2"/>
<text x="780.8" y="94.0"></text>
</g>
<g>
<title>one/nio/pool/Pool.returnObject (36 samples, 0.03%)</title><rect x="778.2" y="147.0" width="0.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="781.2" y="158.0"></text>
</g>
<g>
<title>java/util/LinkedList.addFirst (36 samples, 0.03%)</title><rect x="778.2" y="131.0" width="0.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="781.2" y="142.0"></text>
</g>
<g>
<title>java/util/LinkedList.linkFirst (36 samples, 0.03%)</title><rect x="778.2" y="115.0" width="0.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="781.2" y="126.0"></text>
</g>
<g>
<title>java.util.LinkedList$Node (36 samples, 0.03%)</title><rect x="778.2" y="99.0" width="0.4" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="781.2" y="110.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (187 samples, 0.18%)</title><rect x="778.6" y="179.0" width="2.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="781.6" y="190.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (187 samples, 0.18%)</title><rect x="778.6" y="163.0" width="2.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="781.6" y="174.0"></text>
</g>
<g>
<title>one/nio/http/Response.toBytes (140 samples, 0.13%)</title><rect x="778.6" y="147.0" width="1.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="781.6" y="158.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.&lt;init&gt; (140 samples, 0.13%)</title><rect x="778.6" y="131.0" width="1.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="781.6" y="142.0"></text>
</g>
<g>
<title>byte[] (140 samples, 0.13%)</title><rect x="778.6" y="115.0" width="1.6" height="15" fill="#69d7d7" rx="2" ry="2"/>
<text x="781.6" y="126.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (47 samples, 0.04%)</title><rect x="780.2" y="147.0" width="0.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="783.2" y="158.0"></text>
</g>
<g>
<title>one.nio.net.Session$ArrayQueueItem (47 samples, 0.04%)</title><rect x="780.2" y="131.0" width="0.5" height="15" fill="#5dcbcb" rx="2" ry="2"/>
<text x="783.2" y="142.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (36,343 samples, 34.69%)</title><rect x="780.7" y="275.0" width="409.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="783.7" y="286.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (1,572 samples, 1.50%)</title><rect x="780.7" y="259.0" width="17.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="783.7" y="270.0"></text>
</g>
<g>
<title>one.nio.net.NativeSelector$2 (1,572 samples, 1.50%)</title><rect x="780.7" y="243.0" width="17.7" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="783.7" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (34,771 samples, 33.19%)</title><rect x="798.4" y="259.0" width="391.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="270.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (34,771 samples, 33.19%)</title><rect x="798.4" y="243.0" width="391.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="801.4" y="254.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (34,771 samples, 33.19%)</title><rect x="798.4" y="227.0" width="391.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="801.4" y="238.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (8,572 samples, 8.18%)</title><rect x="798.4" y="211.0" width="96.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="801.4" y="222.0">one/nio/htt..</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (8,572 samples, 8.18%)</title><rect x="798.4" y="195.0" width="96.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="801.4" y="206.0">one/nio/htt..</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (6,510 samples, 6.21%)</title><rect x="798.4" y="179.0" width="73.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="190.0">RequestH..</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2,013 samples, 1.92%)</title><rect x="798.4" y="163.0" width="22.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="801.4" y="174.0">o..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2,013 samples, 1.92%)</title><rect x="798.4" y="147.0" width="22.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="801.4" y="158.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (2,013 samples, 1.92%)</title><rect x="798.4" y="131.0" width="22.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="801.4" y="142.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,013 samples, 1.92%)</title><rect x="798.4" y="115.0" width="22.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="801.4" y="126.0">j..</text>
</g>
<g>
<title>java.lang.String (1,039 samples, 0.99%)</title><rect x="798.4" y="99.0" width="11.7" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="801.4" y="110.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (974 samples, 0.93%)</title><rect x="810.1" y="99.0" width="11.0" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="813.1" y="110.0"></text>
</g>
<g>
<title>byte[] (974 samples, 0.93%)</title><rect x="810.1" y="83.0" width="11.0" height="15" fill="#5fcdcd" rx="2" ry="2"/>
<text x="813.1" y="94.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.put (4,497 samples, 4.29%)</title><rect x="821.1" y="163.0" width="50.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.1" y="174.0">ru/ma..</text>
</g>
<g>
<title>java/lang/String.getBytes (989 samples, 0.94%)</title><rect x="821.1" y="147.0" width="11.1" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="824.1" y="158.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (989 samples, 0.94%)</title><rect x="821.1" y="131.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.1" y="142.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (989 samples, 0.94%)</title><rect x="821.1" y="115.0" width="11.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="824.1" y="126.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (989 samples, 0.94%)</title><rect x="821.1" y="99.0" width="11.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="824.1" y="110.0"></text>
</g>
<g>
<title>byte[] (989 samples, 0.94%)</title><rect x="821.1" y="83.0" width="11.1" height="15" fill="#50bebe" rx="2" ry="2"/>
<text x="824.1" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,893 samples, 1.81%)</title><rect x="832.2" y="147.0" width="21.3" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="835.2" y="158.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1,893 samples, 1.81%)</title><rect x="832.2" y="131.0" width="21.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="835.2" y="142.0">j..</text>
</g>
<g>
<title>java.nio.HeapByteBuffer (1,893 samples, 1.81%)</title><rect x="832.2" y="115.0" width="21.3" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="835.2" y="126.0">j..</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.runExecutorService (1,615 samples, 1.54%)</title><rect x="853.5" y="147.0" width="18.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.5" y="158.0"></text>
</g>
<g>
<title>java/lang/invoke/LambdaForm$MH/897554165.linkToTargetMethod (1,596 samples, 1.52%)</title><rect x="853.5" y="131.0" width="18.0" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="856.5" y="142.0"></text>
</g>
<g>
<title>java/lang/invoke/DirectMethodHandle$Holder.invokeStatic (1,596 samples, 1.52%)</title><rect x="853.5" y="115.0" width="18.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="856.5" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService$$Lambda$66/300860225.get$Lambda (1,596 samples, 1.52%)</title><rect x="853.5" y="99.0" width="18.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="856.5" y="110.0"></text>
</g>
<g>
<title>ru.mail.polis.service.boriskin.NewService$$Lambda$66 (1,596 samples, 1.52%)</title><rect x="853.5" y="83.0" width="18.0" height="15" fill="#56c4c4" rx="2" ry="2"/>
<text x="856.5" y="94.0"></text>
</g>
<g>
<title>one/nio/http/Request.getPath (2,062 samples, 1.97%)</title><rect x="871.7" y="179.0" width="23.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="874.7" y="190.0">o..</text>
</g>
<g>
<title>java/lang/String.substring (2,062 samples, 1.97%)</title><rect x="871.7" y="163.0" width="23.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="874.7" y="174.0">j..</text>
</g>
<g>
<title>java/lang/StringLatin1.newString (2,062 samples, 1.97%)</title><rect x="871.7" y="147.0" width="23.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="874.7" y="158.0">j..</text>
</g>
<g>
<title>java.lang.String (880 samples, 0.84%)</title><rect x="871.7" y="131.0" width="9.9" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="874.7" y="142.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (1,182 samples, 1.13%)</title><rect x="881.6" y="131.0" width="13.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="884.6" y="142.0"></text>
</g>
<g>
<title>byte[] (1,182 samples, 1.13%)</title><rect x="881.6" y="115.0" width="13.3" height="15" fill="#68d6d6" rx="2" ry="2"/>
<text x="884.6" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (9,975 samples, 9.52%)</title><rect x="894.9" y="211.0" width="112.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="897.9" y="222.0">one/nio/http/H..</text>
</g>
<g>
<title>one.nio.http.Request (1,555 samples, 1.48%)</title><rect x="894.9" y="195.0" width="17.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="897.9" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3,305 samples, 3.15%)</title><rect x="912.4" y="195.0" width="37.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="915.4" y="206.0">one..</text>
</g>
<g>
<title>java.lang.String[] (3,302 samples, 3.15%)</title><rect x="912.4" y="179.0" width="37.2" height="15" fill="#59c7c7" rx="2" ry="2"/>
<text x="915.4" y="190.0">jav..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,115 samples, 4.88%)</title><rect x="949.7" y="195.0" width="57.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="952.7" y="206.0">one/ni..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (5,115 samples, 4.88%)</title><rect x="949.7" y="179.0" width="57.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="952.7" y="190.0">one/ni..</text>
</g>
<g>
<title>char[] (2,835 samples, 2.71%)</title><rect x="949.7" y="163.0" width="31.9" height="15" fill="#51bfbf" rx="2" ry="2"/>
<text x="952.7" y="174.0">ch..</text>
</g>
<g>
<title>java.lang.String (778 samples, 0.74%)</title><rect x="981.6" y="163.0" width="8.8" height="15" fill="#6ddbdb" rx="2" ry="2"/>
<text x="984.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,499 samples, 1.43%)</title><rect x="990.4" y="163.0" width="16.9" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="993.4" y="174.0"></text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (1,499 samples, 1.43%)</title><rect x="990.4" y="147.0" width="16.9" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="993.4" y="158.0"></text>
</g>
<g>
<title>java/lang/StringUTF16.compress (1,499 samples, 1.43%)</title><rect x="990.4" y="131.0" width="16.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="993.4" y="142.0"></text>
</g>
<g>
<title>byte[] (1,499 samples, 1.43%)</title><rect x="990.4" y="115.0" width="16.9" height="15" fill="#5ac8c8" rx="2" ry="2"/>
<text x="993.4" y="126.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1,277 samples, 1.22%)</title><rect x="1007.3" y="211.0" width="14.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1010.3" y="222.0"></text>
</g>
<g>
<title>byte[] (1,277 samples, 1.22%)</title><rect x="1007.3" y="195.0" width="14.4" height="15" fill="#60cece" rx="2" ry="2"/>
<text x="1010.3" y="206.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1,744 samples, 1.66%)</title><rect x="1021.7" y="211.0" width="19.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.7" y="222.0"></text>
</g>
<g>
<title>java/lang/String.substring (1,744 samples, 1.66%)</title><rect x="1021.7" y="195.0" width="19.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1024.7" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1,744 samples, 1.66%)</title><rect x="1021.7" y="179.0" width="19.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1024.7" y="190.0"></text>
</g>
<g>
<title>java.lang.String (849 samples, 0.81%)</title><rect x="1021.7" y="163.0" width="9.5" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1024.7" y="174.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOfRange (895 samples, 0.85%)</title><rect x="1031.2" y="163.0" width="10.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="1034.2" y="174.0"></text>
</g>
<g>
<title>byte[] (895 samples, 0.85%)</title><rect x="1031.2" y="147.0" width="10.1" height="15" fill="#53c1c1" rx="2" ry="2"/>
<text x="1034.2" y="158.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,203 samples, 12.60%)</title><rect x="1041.3" y="211.0" width="148.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1044.3" y="222.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>one/nio/util/Utf8.read (13,203 samples, 12.60%)</title><rect x="1041.3" y="195.0" width="148.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1044.3" y="206.0">one/nio/util/Utf8.r..</text>
</g>
<g>
<title>char[] (6,081 samples, 5.80%)</title><rect x="1041.3" y="179.0" width="68.5" height="15" fill="#5ecccc" rx="2" ry="2"/>
<text x="1044.3" y="190.0">char[]</text>
</g>
<g>
<title>char[] (52 samples, 0.05%)</title><rect x="1109.8" y="179.0" width="0.6" height="15" fill="#e78300" rx="2" ry="2"/>
<text x="1112.8" y="190.0"></text>
</g>
<g>
<title>java.lang.String (2,515 samples, 2.40%)</title><rect x="1110.4" y="179.0" width="28.3" height="15" fill="#6cdada" rx="2" ry="2"/>
<text x="1113.4" y="190.0">ja..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,555 samples, 4.35%)</title><rect x="1138.7" y="179.0" width="51.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.7" y="190.0">java/..</text>
</g>
<g>
<title>java/lang/String.&lt;init&gt; (4,555 samples, 4.35%)</title><rect x="1138.7" y="163.0" width="51.3" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1141.7" y="174.0">java/..</text>
</g>
<g>
<title>java/lang/StringUTF16.compress (4,555 samples, 4.35%)</title><rect x="1138.7" y="147.0" width="51.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="1141.7" y="158.0">java/..</text>
</g>
<g>
<title>byte[] (4,555 samples, 4.35%)</title><rect x="1138.7" y="131.0" width="51.3" height="15" fill="#61cfcf" rx="2" ry="2"/>
<text x="1141.7" y="142.0">byte[]</text>
</g>
</g>
</svg>
