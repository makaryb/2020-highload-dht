<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="486" onload="init(evt)" viewBox="0 0 1200 486" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="469"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="469"> </text>
<g id="frames">
<g>
<title>all (259 samples, 100.00%)</title><rect x="10.0" y="435.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="446.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (2 samples, 0.77%)</title><rect x="10.0" y="419.0" width="9.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2 samples, 0.77%)</title><rect x="10.0" y="403.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2 samples, 0.77%)</title><rect x="10.0" y="387.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="398.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2 samples, 0.77%)</title><rect x="10.0" y="371.0" width="9.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="382.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.77%)</title><rect x="10.0" y="355.0" width="9.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="366.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$87/680485418.run (2 samples, 0.77%)</title><rect x="10.0" y="339.0" width="9.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="350.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2 samples, 0.77%)</title><rect x="10.0" y="323.0" width="9.1" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="334.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2 samples, 0.77%)</title><rect x="10.0" y="307.0" width="9.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2 samples, 0.77%)</title><rect x="10.0" y="291.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2 samples, 0.77%)</title><rect x="10.0" y="275.0" width="9.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.39%)</title><rect x="10.0" y="259.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1 samples, 0.39%)</title><rect x="10.0" y="243.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="254.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1 samples, 0.39%)</title><rect x="10.0" y="227.0" width="4.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="238.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1 samples, 0.39%)</title><rect x="10.0" y="211.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="222.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastRef.unmarshalValue (1 samples, 0.39%)</title><rect x="10.0" y="195.0" width="4.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="206.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.39%)</title><rect x="10.0" y="179.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="190.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject (1 samples, 0.39%)</title><rect x="10.0" y="163.0" width="4.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="13.0" y="174.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readObject0 (1 samples, 0.39%)</title><rect x="10.0" y="147.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="158.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readOrdinaryObject (1 samples, 0.39%)</title><rect x="10.0" y="131.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="142.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readClassDesc (1 samples, 0.39%)</title><rect x="10.0" y="115.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="13.0" y="126.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readNonProxyDesc (1 samples, 0.39%)</title><rect x="10.0" y="99.0" width="4.6" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="13.0" y="110.0"></text>
</g>
<g>
<title>java/io/ObjectStreamClass.initNonProxy (1 samples, 0.39%)</title><rect x="10.0" y="83.0" width="4.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="13.0" y="94.0"></text>
</g>
<g>
<title>java/lang/Class.isArray (1 samples, 0.39%)</title><rect x="10.0" y="67.0" width="4.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="13.0" y="78.0"></text>
</g>
<g>
<title>JVM_IsArrayClass (1 samples, 0.39%)</title><rect x="10.0" y="51.0" width="4.6" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="13.0" y="62.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.39%)</title><rect x="10.0" y="35.0" width="4.6" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="13.0" y="46.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.getInputStream (1 samples, 0.39%)</title><rect x="14.6" y="259.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.6" y="270.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionInputStream.&lt;init&gt; (1 samples, 0.39%)</title><rect x="14.6" y="243.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="17.6" y="254.0"></text>
</g>
<g>
<title>sun/rmi/server/MarshalInputStream.&lt;init&gt; (1 samples, 0.39%)</title><rect x="14.6" y="227.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="17.6" y="238.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.&lt;init&gt; (1 samples, 0.39%)</title><rect x="14.6" y="211.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="17.6" y="222.0"></text>
</g>
<g>
<title>java/io/ObjectInputStream.readStreamHeader (1 samples, 0.39%)</title><rect x="14.6" y="195.0" width="4.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="17.6" y="206.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (209 samples, 80.69%)</title><rect x="19.1" y="419.0" width="952.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="22.1" y="430.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (1 samples, 0.39%)</title><rect x="19.1" y="403.0" width="4.6" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="22.1" y="414.0"></text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (23 samples, 8.88%)</title><rect x="23.7" y="403.0" width="104.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="26.7" y="414.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (22 samples, 8.49%)</title><rect x="28.2" y="387.0" width="100.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="31.2" y="398.0">one/nio/net/..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.39%)</title><rect x="37.3" y="371.0" width="4.6" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="40.3" y="382.0"></text>
</g>
<g>
<title>epoll_wait (19 samples, 7.34%)</title><rect x="41.9" y="371.0" width="86.6" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="44.9" y="382.0">epoll_wait</text>
</g>
<g>
<title>one/nio/net/Session.process (184 samples, 71.04%)</title><rect x="128.5" y="403.0" width="838.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="131.5" y="414.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (184 samples, 71.04%)</title><rect x="128.5" y="387.0" width="838.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="131.5" y="398.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (174 samples, 67.18%)</title><rect x="128.5" y="371.0" width="792.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="131.5" y="382.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (159 samples, 61.39%)</title><rect x="151.2" y="355.0" width="724.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="154.2" y="366.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (159 samples, 61.39%)</title><rect x="151.2" y="339.0" width="724.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="154.2" y="350.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (159 samples, 61.39%)</title><rect x="151.2" y="323.0" width="724.4" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="154.2" y="334.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (21 samples, 8.11%)</title><rect x="151.2" y="307.0" width="95.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="154.2" y="318.0">one/nio/htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (1 samples, 0.39%)</title><rect x="155.8" y="291.0" width="4.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="158.8" y="302.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.39%)</title><rect x="155.8" y="275.0" width="4.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="158.8" y="286.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.39%)</title><rect x="155.8" y="259.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="158.8" y="270.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.39%)</title><rect x="155.8" y="243.0" width="4.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="158.8" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.39%)</title><rect x="155.8" y="227.0" width="4.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="158.8" y="238.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="155.8" y="211.0" width="4.5" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="158.8" y="222.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (18 samples, 6.95%)</title><rect x="160.3" y="291.0" width="82.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="163.3" y="302.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (7 samples, 2.70%)</title><rect x="160.3" y="275.0" width="31.9" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="163.3" y="286.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 1.16%)</title><rect x="178.6" y="259.0" width="13.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="181.6" y="270.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 1.16%)</title><rect x="178.6" y="243.0" width="13.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="181.6" y="254.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 1.16%)</title><rect x="178.6" y="227.0" width="13.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="181.6" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 4.25%)</title><rect x="192.2" y="275.0" width="50.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="195.2" y="286.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (11 samples, 4.25%)</title><rect x="192.2" y="259.0" width="50.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="195.2" y="270.0">one/n..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (1 samples, 0.39%)</title><rect x="196.8" y="243.0" width="4.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="199.8" y="254.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (9 samples, 3.47%)</title><rect x="201.4" y="243.0" width="41.0" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="204.4" y="254.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (9 samples, 3.47%)</title><rect x="201.4" y="227.0" width="41.0" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="204.4" y="238.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.77%)</title><rect x="201.4" y="211.0" width="9.1" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="204.4" y="222.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.39%)</title><rect x="205.9" y="195.0" width="4.6" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="208.9" y="206.0"></text>
</g>
<g>
<title>__send (7 samples, 2.70%)</title><rect x="210.5" y="211.0" width="31.9" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="213.5" y="222.0">__..</text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.39%)</title><rect x="242.4" y="291.0" width="4.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="245.4" y="302.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (2 samples, 0.77%)</title><rect x="246.9" y="307.0" width="9.1" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="249.9" y="318.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (2 samples, 0.77%)</title><rect x="246.9" y="291.0" width="9.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="249.9" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.put (136 samples, 52.51%)</title><rect x="256.0" y="307.0" width="619.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="259.0" y="318.0">ru/mail/polis/service/boriskin/NewService.put</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (136 samples, 52.51%)</title><rect x="256.0" y="291.0" width="619.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="259.0" y="302.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (136 samples, 52.51%)</title><rect x="256.0" y="275.0" width="619.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.0" y="286.0">ru/mail/polis/dao/boriskin/NewDAO.upsert</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (22 samples, 8.49%)</title><rect x="256.0" y="259.0" width="100.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="259.0" y="270.0">ru/mail/poli..</text>
</g>
<g>
<title>java/util/TreeMap.put (19 samples, 7.34%)</title><rect x="256.0" y="243.0" width="86.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="259.0" y="254.0">java/util/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 5.02%)</title><rect x="278.8" y="227.0" width="59.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="281.8" y="238.0">java/n..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (13 samples, 5.02%)</title><rect x="278.8" y="211.0" width="59.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="281.8" y="222.0">java/n..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (11 samples, 4.25%)</title><rect x="278.8" y="195.0" width="50.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="281.8" y="206.0">java/..</text>
</g>
<g>
<title>vectorizedMismatch (5 samples, 1.93%)</title><rect x="306.1" y="179.0" width="22.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="309.1" y="190.0">v..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.77%)</title><rect x="328.9" y="195.0" width="9.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="331.9" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (1 samples, 0.39%)</title><rect x="338.0" y="227.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="341.0" y="238.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (2 samples, 0.77%)</title><rect x="342.6" y="243.0" width="9.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="345.6" y="254.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.39%)</title><rect x="351.7" y="243.0" width="4.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="354.7" y="254.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.39%)</title><rect x="351.7" y="227.0" width="4.6" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="354.7" y="238.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="351.7" y="211.0" width="4.6" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="354.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (114 samples, 44.02%)</title><rect x="356.3" y="259.0" width="519.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="359.3" y="270.0">ru/mail/polis/dao/boriskin/NewDAO.flush</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (114 samples, 44.02%)</title><rect x="356.3" y="243.0" width="519.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="359.3" y="254.0">ru/mail/polis/dao/boriskin/SortedStringTable.writeData</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.39%)</title><rect x="365.4" y="227.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.4" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.39%)</title><rect x="365.4" y="211.0" width="4.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="368.4" y="222.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.39%)</title><rect x="365.4" y="195.0" width="4.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="368.4" y="206.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.39%)</title><rect x="365.4" y="179.0" width="4.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="368.4" y="190.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.39%)</title><rect x="365.4" y="163.0" width="4.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="368.4" y="174.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.39%)</title><rect x="369.9" y="227.0" width="4.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="372.9" y="238.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (1 samples, 0.39%)</title><rect x="369.9" y="211.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="372.9" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.39%)</title><rect x="369.9" y="195.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="372.9" y="206.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (1 samples, 0.39%)</title><rect x="369.9" y="179.0" width="4.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="372.9" y="190.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.39%)</title><rect x="369.9" y="163.0" width="4.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="372.9" y="174.0"></text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (110 samples, 42.47%)</title><rect x="374.5" y="227.0" width="501.1" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="377.5" y="238.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (3 samples, 1.16%)</title><rect x="379.0" y="211.0" width="13.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="382.0" y="222.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (3 samples, 1.16%)</title><rect x="379.0" y="195.0" width="13.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="382.0" y="206.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (3 samples, 1.16%)</title><rect x="379.0" y="179.0" width="13.7" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="382.0" y="190.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (101 samples, 39.00%)</title><rect x="392.7" y="211.0" width="460.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="395.7" y="222.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 2.32%)</title><rect x="392.7" y="195.0" width="27.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="395.7" y="206.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 2.32%)</title><rect x="392.7" y="179.0" width="27.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="395.7" y="190.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (18 samples, 6.95%)</title><rect x="420.0" y="195.0" width="82.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="423.0" y="206.0">java/nio/..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.put (18 samples, 6.95%)</title><rect x="420.0" y="179.0" width="82.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="423.0" y="190.0">java/nio/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.put (18 samples, 6.95%)</title><rect x="420.0" y="163.0" width="82.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="423.0" y="174.0">java/nio/..</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (71 samples, 27.41%)</title><rect x="502.0" y="195.0" width="323.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="505.0" y="206.0">sun/nio/ch/IOUtil.writeFromNativeBuffer</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (71 samples, 27.41%)</title><rect x="502.0" y="179.0" width="323.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="505.0" y="190.0">sun/nio/ch/FileDispatcherImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (69 samples, 26.64%)</title><rect x="511.2" y="163.0" width="314.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="514.2" y="174.0">sun/nio/ch/FileDispatcherImpl.write0</text>
</g>
<g>
<title>Java_sun_nio_ch_FileDispatcherImpl_write0 (2 samples, 0.77%)</title><rect x="520.3" y="147.0" width="9.1" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="523.3" y="158.0"></text>
</g>
<g>
<title>__libc_write (63 samples, 24.32%)</title><rect x="529.4" y="147.0" width="287.0" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="532.4" y="158.0">__libc_write</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.77%)</title><rect x="816.4" y="147.0" width="9.1" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="819.4" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (6 samples, 2.32%)</title><rect x="825.5" y="195.0" width="27.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="828.5" y="206.0">s..</text>
</g>
<g>
<title>java/lang/ThreadLocal.get (6 samples, 2.32%)</title><rect x="825.5" y="179.0" width="27.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="828.5" y="190.0">j..</text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (6 samples, 2.32%)</title><rect x="825.5" y="163.0" width="27.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="828.5" y="174.0">j..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (1 samples, 0.39%)</title><rect x="848.3" y="147.0" width="4.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="851.3" y="158.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (5 samples, 1.93%)</title><rect x="852.9" y="211.0" width="22.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="855.9" y="222.0">s..</text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (3 samples, 1.16%)</title><rect x="875.6" y="355.0" width="13.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.6" y="366.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.39%)</title><rect x="875.6" y="339.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="878.6" y="350.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.39%)</title><rect x="875.6" y="323.0" width="4.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="878.6" y="334.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.39%)</title><rect x="875.6" y="307.0" width="4.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="878.6" y="318.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.39%)</title><rect x="875.6" y="291.0" width="4.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="878.6" y="302.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.39%)</title><rect x="880.2" y="339.0" width="4.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="883.2" y="350.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.39%)</title><rect x="880.2" y="323.0" width="4.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="883.2" y="334.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.39%)</title><rect x="884.7" y="339.0" width="4.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="887.7" y="350.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 1.16%)</title><rect x="889.3" y="355.0" width="13.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="892.3" y="366.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.39%)</title><rect x="893.9" y="339.0" width="4.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="896.9" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.39%)</title><rect x="893.9" y="323.0" width="4.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="896.9" y="334.0"></text>
</g>
<g>
<title>java/lang/String.substring (1 samples, 0.39%)</title><rect x="898.4" y="339.0" width="4.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="901.4" y="350.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.newString (1 samples, 0.39%)</title><rect x="898.4" y="323.0" width="4.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="901.4" y="334.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.39%)</title><rect x="898.4" y="307.0" width="4.6" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="901.4" y="318.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 1.54%)</title><rect x="903.0" y="355.0" width="18.2" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="906.0" y="366.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (4 samples, 1.54%)</title><rect x="903.0" y="339.0" width="18.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="906.0" y="350.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (1 samples, 0.39%)</title><rect x="921.2" y="371.0" width="4.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="924.2" y="382.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (9 samples, 3.47%)</title><rect x="925.8" y="371.0" width="41.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="928.8" y="382.0">one..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (9 samples, 3.47%)</title><rect x="925.8" y="355.0" width="41.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="928.8" y="366.0">one..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (5 samples, 1.93%)</title><rect x="930.3" y="339.0" width="22.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="933.3" y="350.0">J..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (2 samples, 0.77%)</title><rect x="934.9" y="323.0" width="9.1" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="937.9" y="334.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.39%)</title><rect x="944.0" y="323.0" width="4.5" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="947.0" y="334.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.39%)</title><rect x="948.5" y="323.0" width="4.6" height="15" fill="#e45f5f" rx="2" ry="2"/>
<text x="951.5" y="334.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.39%)</title><rect x="948.5" y="307.0" width="4.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="951.5" y="318.0"></text>
</g>
<g>
<title>recv (3 samples, 1.16%)</title><rect x="953.1" y="339.0" width="13.7" height="15" fill="#e56060" rx="2" ry="2"/>
<text x="956.1" y="350.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.39%)</title><rect x="966.8" y="403.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="969.8" y="414.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.39%)</title><rect x="966.8" y="387.0" width="4.5" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="969.8" y="398.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.39%)</title><rect x="966.8" y="371.0" width="4.5" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="969.8" y="382.0"></text>
</g>
<g>
<title>start_thread (48 samples, 18.53%)</title><rect x="971.3" y="419.0" width="218.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="974.3" y="430.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (48 samples, 18.53%)</title><rect x="971.3" y="403.0" width="218.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="974.3" y="414.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (48 samples, 18.53%)</title><rect x="971.3" y="387.0" width="218.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="974.3" y="398.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (48 samples, 18.53%)</title><rect x="971.3" y="371.0" width="218.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="974.3" y="382.0">GangWorker::loop()</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (47 samples, 18.15%)</title><rect x="971.3" y="355.0" width="214.1" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="974.3" y="366.0">G1ParTask::work(unsigned int)</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (36 samples, 13.90%)</title><rect x="971.3" y="339.0" width="164.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="974.3" y="350.0">G1ParEvacuateFollower..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (12 samples, 4.63%)</title><rect x="975.9" y="323.0" width="54.6" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="978.9" y="334.0">G1Par..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (8 samples, 3.09%)</title><rect x="994.1" y="307.0" width="36.4" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="997.1" y="318.0">G1P..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.77%)</title><rect x="1021.4" y="291.0" width="9.1" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1024.4" y="302.0"></text>
</g>
<g>
<title>SpinPause (23 samples, 8.88%)</title><rect x="1030.5" y="323.0" width="104.8" height="15" fill="#f77878" rx="2" ry="2"/>
<text x="1033.5" y="334.0">SpinPause</text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (11 samples, 4.25%)</title><rect x="1135.3" y="339.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.3" y="350.0">G1Rem..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (11 samples, 4.25%)</title><rect x="1135.3" y="323.0" width="50.1" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1138.3" y="334.0">G1Rem..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (11 samples, 4.25%)</title><rect x="1135.3" y="307.0" width="50.1" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1138.3" y="318.0">G1Col..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (11 samples, 4.25%)</title><rect x="1135.3" y="291.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.3" y="302.0">Dirty..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (11 samples, 4.25%)</title><rect x="1135.3" y="275.0" width="50.1" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1138.3" y="286.0">G1Ref..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (9 samples, 3.47%)</title><rect x="1135.3" y="259.0" width="41.0" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1138.3" y="270.0">G1P..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (5 samples, 1.93%)</title><rect x="1153.6" y="243.0" width="22.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1156.6" y="254.0">G..</text>
</g>
<g>
<title>G1RemSet::refine_card_during_gc(signed char*, G1ScanObjsDuringUpdateRSClosure*) [clone .part.124] (2 samples, 0.77%)</title><rect x="1176.3" y="259.0" width="9.1" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1179.3" y="270.0"></text>
</g>
<g>
<title>bool HeapRegion::oops_on_card_seq_iterate_careful&lt;true, G1ScanObjsDuringUpdateRSClosure&gt;(MemRegion, G1ScanObjsDuringUpdateRSClosure*) (2 samples, 0.77%)</title><rect x="1176.3" y="243.0" width="9.1" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1179.3" y="254.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (1 samples, 0.39%)</title><rect x="1180.9" y="227.0" width="4.5" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1183.9" y="238.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (1 samples, 0.39%)</title><rect x="1185.4" y="355.0" width="4.6" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1188.4" y="366.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (1 samples, 0.39%)</title><rect x="1185.4" y="339.0" width="4.6" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1188.4" y="350.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.39%)</title><rect x="1185.4" y="323.0" width="4.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1188.4" y="334.0"></text>
</g>
<g>
<title>CodeBlob::is_nmethod() const (1 samples, 0.39%)</title><rect x="1185.4" y="307.0" width="4.6" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1188.4" y="318.0"></text>
</g>
</g>
</svg>
