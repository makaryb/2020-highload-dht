<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="357"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="357"> </text>
<g id="frames">
<g>
<title>all (217 samples, 100.00%)</title><rect x="10.0" y="323.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="334.0">all</text>
</g>
<g>
<title>[not_walkable_Java] (1 samples, 0.46%)</title><rect x="10.0" y="307.0" width="5.4" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="13.0" y="318.0"></text>
</g>
<g>
<title>OptoRuntime::new_array_nozero_C(Klass*, int, JavaThread*) (1 samples, 0.46%)</title><rect x="10.0" y="291.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="302.0"></text>
</g>
<g>
<title>OptoRuntime::is_deoptimized_caller_frame(JavaThread*) (1 samples, 0.46%)</title><rect x="10.0" y="275.0" width="5.4" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="13.0" y="286.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.46%)</title><rect x="10.0" y="259.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="13.0" y="270.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (163 samples, 75.12%)</title><rect x="15.4" y="307.0" width="886.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="18.4" y="318.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (24 samples, 11.06%)</title><rect x="15.4" y="291.0" width="130.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="18.4" y="302.0">one/nio/net/Nati..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (24 samples, 11.06%)</title><rect x="15.4" y="275.0" width="130.5" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="18.4" y="286.0">one/nio/net/Nati..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.46%)</title><rect x="20.9" y="259.0" width="5.4" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="23.9" y="270.0"></text>
</g>
<g>
<title>clock_gettime (5 samples, 2.30%)</title><rect x="26.3" y="259.0" width="27.2" height="15" fill="#f17070" rx="2" ry="2"/>
<text x="29.3" y="270.0">c..</text>
</g>
<g>
<title>clock_gettime (1 samples, 0.46%)</title><rect x="48.1" y="243.0" width="5.4" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="51.1" y="254.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.46%)</title><rect x="48.1" y="227.0" width="5.4" height="15" fill="#f37373" rx="2" ry="2"/>
<text x="51.1" y="238.0"></text>
</g>
<g>
<title>epoll_wait (17 samples, 7.83%)</title><rect x="53.5" y="259.0" width="92.4" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="56.5" y="270.0">epoll_wait</text>
</g>
<g>
<title>one/nio/net/Session.process (136 samples, 62.67%)</title><rect x="145.9" y="291.0" width="739.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="148.9" y="302.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (136 samples, 62.67%)</title><rect x="145.9" y="275.0" width="739.6" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="148.9" y="286.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (118 samples, 54.38%)</title><rect x="145.9" y="259.0" width="641.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="148.9" y="270.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (102 samples, 47.00%)</title><rect x="162.3" y="243.0" width="554.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="165.3" y="254.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (102 samples, 47.00%)</title><rect x="162.3" y="227.0" width="554.6" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="165.3" y="238.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler1_put.handleRequest (98 samples, 45.16%)</title><rect x="162.3" y="211.0" width="532.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="165.3" y="222.0">RequestHandler1_put.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (28 samples, 12.90%)</title><rect x="162.3" y="195.0" width="152.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="165.3" y="206.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (28 samples, 12.90%)</title><rect x="162.3" y="179.0" width="152.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="165.3" y="190.0">one/nio/http/HttpSe..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (8 samples, 3.69%)</title><rect x="167.7" y="163.0" width="43.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="170.7" y="174.0">one/..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (5 samples, 2.30%)</title><rect x="184.0" y="147.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.0" y="158.0">o..</text>
</g>
<g>
<title>one/nio/util/Utf8.length (5 samples, 2.30%)</title><rect x="184.0" y="131.0" width="27.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="187.0" y="142.0">o..</text>
</g>
<g>
<title>java/lang/String.charAt (5 samples, 2.30%)</title><rect x="184.0" y="115.0" width="27.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="187.0" y="126.0">j..</text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 8.76%)</title><rect x="211.2" y="163.0" width="103.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="214.2" y="174.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/Session.write (19 samples, 8.76%)</title><rect x="211.2" y="147.0" width="103.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.2" y="158.0">one/nio/net/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (2 samples, 0.92%)</title><rect x="211.2" y="131.0" width="10.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="214.2" y="142.0"></text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (17 samples, 7.83%)</title><rect x="222.1" y="131.0" width="92.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="225.1" y="142.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (1 samples, 0.46%)</title><rect x="232.9" y="115.0" width="5.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="235.9" y="126.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (14 samples, 6.45%)</title><rect x="238.4" y="115.0" width="76.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="241.4" y="126.0">one/nio/..</text>
</g>
<g>
<title>__pthread_disable_asynccancel (1 samples, 0.46%)</title><rect x="249.3" y="99.0" width="5.4" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="252.3" y="110.0"></text>
</g>
<g>
<title>__send (11 samples, 5.07%)</title><rect x="254.7" y="99.0" width="59.8" height="15" fill="#f37272" rx="2" ry="2"/>
<text x="257.7" y="110.0">__send</text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (8 samples, 3.69%)</title><rect x="314.5" y="195.0" width="43.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="317.5" y="206.0">one/..</text>
</g>
<g>
<title>one/nio/http/Request.getParameter (8 samples, 3.69%)</title><rect x="314.5" y="179.0" width="43.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="317.5" y="190.0">one/..</text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.46%)</title><rect x="352.6" y="163.0" width="5.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="355.6" y="174.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.46%)</title><rect x="352.6" y="147.0" width="5.4" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="355.6" y="158.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.46%)</title><rect x="352.6" y="131.0" width="5.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="355.6" y="142.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.46%)</title><rect x="352.6" y="115.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="355.6" y="126.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.put (62 samples, 28.57%)</title><rect x="358.0" y="195.0" width="337.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.0" y="206.0">ru/mail/polis/service/boriskin/NewService.put</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (62 samples, 28.57%)</title><rect x="358.0" y="179.0" width="337.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="361.0" y="190.0">ru/mail/polis/service/boriskin/NewService.oper..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (62 samples, 28.57%)</title><rect x="358.0" y="163.0" width="337.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="361.0" y="174.0">ru/mail/polis/dao/boriskin/NewDAO.upsert</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (17 samples, 7.83%)</title><rect x="358.0" y="147.0" width="92.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="361.0" y="158.0">ru/mail/pol..</text>
</g>
<g>
<title>[unknown] (1 samples, 0.46%)</title><rect x="358.0" y="131.0" width="5.5" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="361.0" y="142.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.46%)</title><rect x="358.0" y="115.0" width="5.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="361.0" y="126.0"></text>
</g>
<g>
<title>java/util/TreeMap.put (15 samples, 6.91%)</title><rect x="363.5" y="131.0" width="81.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="366.5" y="142.0">java/util..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (12 samples, 5.53%)</title><rect x="374.3" y="115.0" width="65.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="377.3" y="126.0">java/ni..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (6 samples, 2.76%)</title><rect x="407.0" y="99.0" width="32.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="410.0" y="110.0">ja..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (6 samples, 2.76%)</title><rect x="407.0" y="83.0" width="32.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="410.0" y="94.0">ja..</text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.46%)</title><rect x="417.8" y="67.0" width="5.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="420.8" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.46%)</title><rect x="417.8" y="51.0" width="5.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="420.8" y="62.0"></text>
</g>
<g>
<title>vectorizedMismatch (3 samples, 1.38%)</title><rect x="423.3" y="67.0" width="16.3" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="426.3" y="78.0"></text>
</g>
<g>
<title>java/util/TreeMap.fixAfterInsertion (1 samples, 0.46%)</title><rect x="439.6" y="115.0" width="5.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="442.6" y="126.0"></text>
</g>
<g>
<title>one/nio/util/URLEncoder.decode (1 samples, 0.46%)</title><rect x="445.0" y="131.0" width="5.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="448.0" y="142.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.flush (45 samples, 20.74%)</title><rect x="450.5" y="147.0" width="244.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="453.5" y="158.0">ru/mail/polis/dao/boriskin/NewDA..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.writeData (45 samples, 20.74%)</title><rect x="450.5" y="131.0" width="244.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="453.5" y="142.0">ru/mail/polis/dao/boriskin/Sorte..</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.write (44 samples, 20.28%)</title><rect x="455.9" y="115.0" width="239.3" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="458.9" y="126.0">sun/nio/ch/FileChannelImpl.write</text>
</g>
<g>
<title>sun/nio/ch/FileChannelImpl.beginBlocking (1 samples, 0.46%)</title><rect x="461.3" y="99.0" width="5.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="464.3" y="110.0"></text>
</g>
<g>
<title>java/nio/channels/spi/AbstractInterruptibleChannel.begin (1 samples, 0.46%)</title><rect x="461.3" y="83.0" width="5.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="464.3" y="94.0"></text>
</g>
<g>
<title>java/lang/Thread.isInterrupted (1 samples, 0.46%)</title><rect x="461.3" y="67.0" width="5.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="464.3" y="78.0"></text>
</g>
<g>
<title>sun/nio/ch/IOUtil.write (40 samples, 18.43%)</title><rect x="466.8" y="99.0" width="217.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="469.8" y="110.0">sun/nio/ch/IOUtil.write</text>
</g>
<g>
<title>sun/nio/ch/IOUtil.writeFromNativeBuffer (34 samples, 15.67%)</title><rect x="488.5" y="83.0" width="184.9" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="491.5" y="94.0">sun/nio/ch/IOUtil.writeF..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write (34 samples, 15.67%)</title><rect x="488.5" y="67.0" width="184.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="491.5" y="78.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>sun/nio/ch/FileDispatcherImpl.write0 (34 samples, 15.67%)</title><rect x="488.5" y="51.0" width="184.9" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="491.5" y="62.0">sun/nio/ch/FileDispatche..</text>
</g>
<g>
<title>__libc_write (31 samples, 14.29%)</title><rect x="494.0" y="35.0" width="168.5" height="15" fill="#e86464" rx="2" ry="2"/>
<text x="497.0" y="46.0">__libc_write</text>
</g>
<g>
<title>__pthread_disable_asynccancel (2 samples, 0.92%)</title><rect x="662.5" y="35.0" width="10.9" height="15" fill="#f16f6f" rx="2" ry="2"/>
<text x="665.5" y="46.0"></text>
</g>
<g>
<title>sun/nio/ch/Util.getTemporaryDirectBuffer (2 samples, 0.92%)</title><rect x="673.4" y="83.0" width="10.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="676.4" y="94.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal.get (2 samples, 0.92%)</title><rect x="673.4" y="67.0" width="10.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="676.4" y="78.0"></text>
</g>
<g>
<title>java/lang/ThreadLocal$ThreadLocalMap.getEntry (2 samples, 0.92%)</title><rect x="673.4" y="51.0" width="10.9" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="676.4" y="62.0"></text>
</g>
<g>
<title>sun/nio/ch/NativeThreadSet.add (2 samples, 0.92%)</title><rect x="684.3" y="99.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="687.3" y="110.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (4 samples, 1.84%)</title><rect x="695.2" y="211.0" width="21.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="698.2" y="222.0">o..</text>
</g>
<g>
<title>java/util/HashMap.get (4 samples, 1.84%)</title><rect x="695.2" y="195.0" width="21.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="698.2" y="206.0">j..</text>
</g>
<g>
<title>java/util/HashMap.getNode (1 samples, 0.46%)</title><rect x="695.2" y="179.0" width="5.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="698.2" y="190.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (3 samples, 1.38%)</title><rect x="700.6" y="179.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.6" y="190.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (3 samples, 1.38%)</title><rect x="700.6" y="163.0" width="16.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="703.6" y="174.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (3 samples, 1.38%)</title><rect x="700.6" y="147.0" width="16.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="703.6" y="158.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.46%)</title><rect x="711.5" y="131.0" width="5.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="714.5" y="142.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (7 samples, 3.23%)</title><rect x="716.9" y="243.0" width="38.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="719.9" y="254.0">one..</text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (3 samples, 1.38%)</title><rect x="722.4" y="227.0" width="16.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="725.4" y="238.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 1.38%)</title><rect x="722.4" y="211.0" width="16.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="725.4" y="222.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (3 samples, 1.38%)</title><rect x="722.4" y="195.0" width="16.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="725.4" y="206.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (3 samples, 1.38%)</title><rect x="722.4" y="179.0" width="16.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="725.4" y="190.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 1.38%)</title><rect x="738.7" y="227.0" width="16.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="741.7" y="238.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.46%)</title><rect x="755.0" y="243.0" width="5.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="758.0" y="254.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (3 samples, 1.38%)</title><rect x="760.4" y="243.0" width="16.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="763.4" y="254.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 1.38%)</title><rect x="760.4" y="227.0" width="16.3" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="763.4" y="238.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 1.38%)</title><rect x="760.4" y="211.0" width="16.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="763.4" y="222.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.46%)</title><rect x="771.3" y="195.0" width="5.4" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="774.3" y="206.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.92%)</title><rect x="776.7" y="243.0" width="10.9" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="779.7" y="254.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (2 samples, 0.92%)</title><rect x="776.7" y="227.0" width="10.9" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="779.7" y="238.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (18 samples, 8.29%)</title><rect x="787.6" y="259.0" width="97.9" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="790.6" y="270.0">one/nio/net..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (17 samples, 7.83%)</title><rect x="793.0" y="243.0" width="92.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="796.0" y="254.0">one/nio/net..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (10 samples, 4.61%)</title><rect x="793.0" y="227.0" width="54.4" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="796.0" y="238.0">Java_..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 1.38%)</title><rect x="793.0" y="211.0" width="16.4" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="796.0" y="222.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.46%)</title><rect x="809.4" y="211.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="812.4" y="222.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.46%)</title><rect x="814.8" y="211.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="817.8" y="222.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.46%)</title><rect x="820.2" y="211.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="823.2" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 1.38%)</title><rect x="825.7" y="211.0" width="16.3" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="828.7" y="222.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.46%)</title><rect x="831.1" y="195.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="834.1" y="206.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.46%)</title><rect x="836.5" y="195.0" width="5.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="839.5" y="206.0"></text>
</g>
<g>
<title>void AccessInternal::arraycopy_conjoint&lt;signed char&gt;(signed char*, signed char*, unsigned long) (1 samples, 0.46%)</title><rect x="842.0" y="211.0" width="5.4" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="845.0" y="222.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (2 samples, 0.92%)</title><rect x="847.4" y="227.0" width="10.9" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="850.4" y="238.0"></text>
</g>
<g>
<title>recv (5 samples, 2.30%)</title><rect x="858.3" y="227.0" width="27.2" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="861.3" y="238.0">r..</text>
</g>
<g>
<title>os::javaTimeMillis() (3 samples, 1.38%)</title><rect x="885.5" y="291.0" width="16.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="888.5" y="302.0"></text>
</g>
<g>
<title>gettimeofday (3 samples, 1.38%)</title><rect x="885.5" y="275.0" width="16.3" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="888.5" y="286.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.92%)</title><rect x="890.9" y="259.0" width="10.9" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="893.9" y="270.0"></text>
</g>
<g>
<title>start_thread (53 samples, 24.42%)</title><rect x="901.8" y="307.0" width="288.2" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="904.8" y="318.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (53 samples, 24.42%)</title><rect x="901.8" y="291.0" width="288.2" height="15" fill="#ed6b6b" rx="2" ry="2"/>
<text x="904.8" y="302.0">thread_native_entry(Thread*)</text>
</g>
<g>
<title>Thread::call_run() (53 samples, 24.42%)</title><rect x="901.8" y="275.0" width="288.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="904.8" y="286.0">Thread::call_run()</text>
</g>
<g>
<title>GangWorker::loop() (53 samples, 24.42%)</title><rect x="901.8" y="259.0" width="288.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="904.8" y="270.0">GangWorker::loop()</text>
</g>
<g>
<title>G1CMConcurrentMarkingTask::work(unsigned int) (6 samples, 2.76%)</title><rect x="901.8" y="243.0" width="32.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="904.8" y="254.0">G1..</text>
</g>
<g>
<title>G1CMTask::do_marking_step(double, bool, bool) (6 samples, 2.76%)</title><rect x="901.8" y="227.0" width="32.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="904.8" y="238.0">G1..</text>
</g>
<g>
<title>G1CMBitMapClosure::do_addr(HeapWord*) (1 samples, 0.46%)</title><rect x="912.7" y="211.0" width="5.4" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="915.7" y="222.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.46%)</title><rect x="912.7" y="195.0" width="5.4" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="915.7" y="206.0"></text>
</g>
<g>
<title>void OopOopIterateDispatch&lt;G1CMOopClosure&gt;::Table::oop_oop_iterate&lt;InstanceKlass, unsigned int&gt;(G1CMOopClosure*, oopDesc*, Klass*) (1 samples, 0.46%)</title><rect x="912.7" y="179.0" width="5.4" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="915.7" y="190.0"></text>
</g>
<g>
<title>G1CMTask::make_reference_grey(oopDesc*) (1 samples, 0.46%)</title><rect x="912.7" y="163.0" width="5.4" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="915.7" y="174.0"></text>
</g>
<g>
<title>oopDesc::size() (1 samples, 0.46%)</title><rect x="912.7" y="147.0" width="5.4" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="915.7" y="158.0"></text>
</g>
<g>
<title>G1CMTask::drain_local_queue(bool) [clone .part.158] (2 samples, 0.92%)</title><rect x="918.1" y="211.0" width="10.9" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="921.1" y="222.0"></text>
</g>
<g>
<title>void G1CMTask::process_grey_task_entry&lt;true&gt;(G1TaskQueueEntry) (1 samples, 0.46%)</title><rect x="923.5" y="195.0" width="5.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="926.5" y="206.0"></text>
</g>
<g>
<title>G1ConcurrentMark::try_stealing(unsigned int, int*, G1TaskQueueEntry&amp;) (1 samples, 0.46%)</title><rect x="929.0" y="211.0" width="5.4" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="932.0" y="222.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (45 samples, 20.74%)</title><rect x="934.4" y="243.0" width="244.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.4" y="254.0">G1ParTask::work(unsigned int)</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (41 samples, 18.89%)</title><rect x="934.4" y="227.0" width="223.0" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="937.4" y="238.0">G1ParEvacuateFollowersClosure..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.46%)</title><rect x="950.7" y="211.0" width="5.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="953.7" y="222.0"></text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue() (35 samples, 16.13%)</title><rect x="956.2" y="211.0" width="190.3" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="959.2" y="222.0">G1ParScanThreadState::tri..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (15 samples, 6.91%)</title><rect x="1064.9" y="195.0" width="81.6" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1067.9" y="206.0">G1ParScan..</text>
</g>
<g>
<title>void OopOopIterateBackwardsDispatch&lt;G1ScanEvacuatedObjClosure&gt;::Table::oop_oop_iterate_backwards&lt;InstanceKlass, unsigned int&gt;(G1ScanEvacuatedObjClosure*, oopDesc*, Klass*) (2 samples, 0.92%)</title><rect x="1135.6" y="179.0" width="10.9" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1138.6" y="190.0"></text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (1 samples, 0.46%)</title><rect x="1146.5" y="211.0" width="5.4" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1149.5" y="222.0"></text>
</g>
<g>
<title>SpinPause (1 samples, 0.46%)</title><rect x="1151.9" y="211.0" width="5.5" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="1154.9" y="222.0"></text>
</g>
<g>
<title>G1RemSet::oops_into_collection_set_do(G1ParScanThreadState*, unsigned int) (4 samples, 1.84%)</title><rect x="1157.4" y="227.0" width="21.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1160.4" y="238.0">G..</text>
</g>
<g>
<title>G1RemSet::update_rem_set(G1ParScanThreadState*, unsigned int) (4 samples, 1.84%)</title><rect x="1157.4" y="211.0" width="21.7" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1160.4" y="222.0">G..</text>
</g>
<g>
<title>G1CollectedHeap::iterate_dirty_card_closure(CardTableEntryClosure*, unsigned int) (4 samples, 1.84%)</title><rect x="1157.4" y="195.0" width="21.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1160.4" y="206.0">G..</text>
</g>
<g>
<title>DirtyCardQueueSet::apply_closure_during_gc(CardTableEntryClosure*, unsigned int) (4 samples, 1.84%)</title><rect x="1157.4" y="179.0" width="21.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1160.4" y="190.0">D..</text>
</g>
<g>
<title>G1RefineCardClosure::do_card_ptr(signed char*, unsigned int) (4 samples, 1.84%)</title><rect x="1157.4" y="163.0" width="21.7" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1160.4" y="174.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::trim_queue_partially() (4 samples, 1.84%)</title><rect x="1157.4" y="147.0" width="21.7" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1160.4" y="158.0">G..</text>
</g>
<g>
<title>G1ParScanThreadState::copy_to_survivor_space(InCSetState, oopDesc*, markOopDesc*) (1 samples, 0.46%)</title><rect x="1173.7" y="131.0" width="5.4" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1176.7" y="142.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::work(unsigned int) (2 samples, 0.92%)</title><rect x="1179.1" y="243.0" width="10.9" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1182.1" y="254.0"></text>
</g>
<g>
<title>HeapRegionManager::par_iterate(HeapRegionClosure*, HeapRegionClaimer*, unsigned int) const (2 samples, 0.92%)</title><rect x="1179.1" y="227.0" width="10.9" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1182.1" y="238.0"></text>
</g>
<g>
<title>G1RebuildRemSetTask::G1RebuildRemSetHeapRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.92%)</title><rect x="1179.1" y="211.0" width="10.9" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1182.1" y="222.0"></text>
</g>
<g>
<title>G1BlockOffsetTablePart::forward_to_block_containing_addr_slow(HeapWord*, HeapWord*, void const*) (2 samples, 0.92%)</title><rect x="1179.1" y="195.0" width="10.9" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1182.1" y="206.0"></text>
</g>
<g>
<title>HeapRegion::block_size(HeapWord const*) const (2 samples, 0.92%)</title><rect x="1179.1" y="179.0" width="10.9" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1182.1" y="190.0"></text>
</g>
</g>
</svg>
