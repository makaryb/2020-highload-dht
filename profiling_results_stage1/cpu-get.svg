<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="709"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="709"> </text>
<g id="frames">
<g>
<title>all (673 samples, 100.00%)</title><rect x="10.0" y="675.0" width="1180.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="13.0" y="686.0">all</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="10.0" y="659.0" width="1.8" height="15" fill="#fd8080" rx="2" ry="2"/>
<text x="13.0" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="11.8" y="659.0" width="1.7" height="15" fill="#e25c5c" rx="2" ry="2"/>
<text x="14.8" y="670.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="11.8" y="643.0" width="1.7" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="14.8" y="654.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="11.8" y="627.0" width="1.7" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="14.8" y="638.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="11.8" y="611.0" width="1.7" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="14.8" y="622.0"></text>
</g>
<g>
<title>__new_sem_wait_slow.constprop.0 (2 samples, 0.30%)</title><rect x="13.5" y="659.0" width="3.5" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="16.5" y="670.0"></text>
</g>
<g>
<title>__pthread_cleanup_push (1 samples, 0.15%)</title><rect x="17.0" y="659.0" width="1.8" height="15" fill="#f67777" rx="2" ry="2"/>
<text x="20.0" y="670.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.30%)</title><rect x="18.8" y="659.0" width="3.5" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="21.8" y="670.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.30%)</title><rect x="18.8" y="643.0" width="3.5" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="21.8" y="654.0"></text>
</g>
<g>
<title>[vdso] (2 samples, 0.30%)</title><rect x="18.8" y="627.0" width="3.5" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="21.8" y="638.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (597 samples, 88.71%)</title><rect x="22.3" y="659.0" width="1046.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="25.3" y="670.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (26 samples, 3.86%)</title><rect x="22.3" y="643.0" width="45.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="25.3" y="654.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (23 samples, 3.42%)</title><rect x="27.5" y="627.0" width="40.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="30.5" y="638.0">one..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (3 samples, 0.45%)</title><rect x="31.0" y="611.0" width="5.3" height="15" fill="#f06e6e" rx="2" ry="2"/>
<text x="34.0" y="622.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSelector_epollWait (1 samples, 0.15%)</title><rect x="36.3" y="611.0" width="1.8" height="15" fill="#e35d5d" rx="2" ry="2"/>
<text x="39.3" y="622.0"></text>
</g>
<g>
<title>clock_gettime (12 samples, 1.78%)</title><rect x="38.1" y="611.0" width="21.0" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="41.1" y="622.0">c..</text>
</g>
<g>
<title>[vdso] (2 samples, 0.30%)</title><rect x="53.8" y="595.0" width="3.5" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="56.8" y="606.0"></text>
</g>
<g>
<title>clock_gettime (1 samples, 0.15%)</title><rect x="57.3" y="595.0" width="1.8" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="60.3" y="606.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.15%)</title><rect x="57.3" y="579.0" width="1.8" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="60.3" y="590.0"></text>
</g>
<g>
<title>epoll_wait (5 samples, 0.74%)</title><rect x="59.1" y="611.0" width="8.8" height="15" fill="#f27070" rx="2" ry="2"/>
<text x="62.1" y="622.0"></text>
</g>
<g>
<title>one/nio/net/Session.process (571 samples, 84.84%)</title><rect x="67.9" y="643.0" width="1001.1" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="70.9" y="654.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (570 samples, 84.70%)</title><rect x="69.6" y="627.0" width="999.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="72.6" y="638.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (554 samples, 82.32%)</title><rect x="69.6" y="611.0" width="971.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="72.6" y="622.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (545 samples, 80.98%)</title><rect x="74.9" y="595.0" width="955.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.9" y="606.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (545 samples, 80.98%)</title><rect x="74.9" y="579.0" width="955.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.9" y="590.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (542 samples, 80.53%)</title><rect x="74.9" y="563.0" width="950.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="77.9" y="574.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (20 samples, 2.97%)</title><rect x="74.9" y="547.0" width="35.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.9" y="558.0">one..</text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (19 samples, 2.82%)</title><rect x="76.6" y="531.0" width="33.3" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="79.6" y="542.0">on..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (6 samples, 0.89%)</title><rect x="76.6" y="515.0" width="10.5" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="79.6" y="526.0"></text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (3 samples, 0.45%)</title><rect x="81.9" y="499.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="84.9" y="510.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (3 samples, 0.45%)</title><rect x="81.9" y="483.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="84.9" y="494.0"></text>
</g>
<g>
<title>java/lang/String.charAt (3 samples, 0.45%)</title><rect x="81.9" y="467.0" width="5.2" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="84.9" y="478.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="85.4" y="451.0" width="1.7" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="88.4" y="462.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 1.93%)</title><rect x="87.1" y="515.0" width="22.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="90.1" y="526.0">o..</text>
</g>
<g>
<title>one/nio/net/Session.write (13 samples, 1.93%)</title><rect x="87.1" y="499.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="90.1" y="510.0">o..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (11 samples, 1.63%)</title><rect x="90.7" y="483.0" width="19.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="93.7" y="494.0"></text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (11 samples, 1.63%)</title><rect x="90.7" y="467.0" width="19.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="93.7" y="478.0"></text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_write (2 samples, 0.30%)</title><rect x="90.7" y="451.0" width="3.5" height="15" fill="#fc7e7e" rx="2" ry="2"/>
<text x="93.7" y="462.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="90.7" y="435.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="93.7" y="446.0"></text>
</g>
<g>
<title>jni_GetByteArrayRegion (1 samples, 0.15%)</title><rect x="92.4" y="435.0" width="1.8" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="95.4" y="446.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="92.4" y="419.0" width="1.8" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="95.4" y="430.0"></text>
</g>
<g>
<title>__pthread_enable_asynccancel (2 samples, 0.30%)</title><rect x="94.2" y="451.0" width="3.5" height="15" fill="#f27171" rx="2" ry="2"/>
<text x="97.2" y="462.0"></text>
</g>
<g>
<title>__send (7 samples, 1.04%)</title><rect x="97.7" y="451.0" width="12.2" height="15" fill="#ee6c6c" rx="2" ry="2"/>
<text x="100.7" y="462.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.15%)</title><rect x="109.9" y="547.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="112.9" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.15%)</title><rect x="109.9" y="531.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="112.9" y="542.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="109.9" y="515.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="112.9" y="526.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.15%)</title><rect x="109.9" y="499.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="112.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.get (521 samples, 77.41%)</title><rect x="111.7" y="547.0" width="913.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="114.7" y="558.0">ru/mail/polis/service/boriskin/NewService.get</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (519 samples, 77.12%)</title><rect x="111.7" y="531.0" width="910.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="114.7" y="542.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.15%)</title><rect x="113.4" y="515.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="116.4" y="526.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.wrap (1 samples, 0.15%)</title><rect x="113.4" y="499.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="116.4" y="510.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="113.4" y="483.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.4" y="494.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="113.4" y="467.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="116.4" y="478.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="113.4" y="451.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="116.4" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="113.4" y="435.0" width="1.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="116.4" y="446.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="113.4" y="419.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="116.4" y="430.0"></text>
</g>
<g>
<title>jint_arraycopy (1 samples, 0.15%)</title><rect x="113.4" y="403.0" width="1.8" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="116.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (516 samples, 76.67%)</title><rect x="115.2" y="515.0" width="904.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="118.2" y="526.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (31 samples, 4.61%)</title><rect x="115.2" y="499.0" width="54.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="118.2" y="510.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (31 samples, 4.61%)</title><rect x="115.2" y="483.0" width="54.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.2" y="494.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (31 samples, 4.61%)</title><rect x="115.2" y="467.0" width="54.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="118.2" y="478.0">com/g..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (31 samples, 4.61%)</title><rect x="115.2" y="451.0" width="54.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="118.2" y="462.0">com/g..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (31 samples, 4.61%)</title><rect x="115.2" y="435.0" width="54.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="118.2" y="446.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (1 samples, 0.15%)</title><rect x="115.2" y="419.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="118.2" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (26 samples, 3.86%)</title><rect x="117.0" y="419.0" width="45.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="120.0" y="430.0">com/..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (3 samples, 0.45%)</title><rect x="117.0" y="403.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="120.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3 samples, 0.45%)</title><rect x="117.0" y="387.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="120.0" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.45%)</title><rect x="117.0" y="371.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="120.0" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.45%)</title><rect x="117.0" y="355.0" width="5.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="120.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.45%)</title><rect x="117.0" y="339.0" width="5.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="120.0" y="350.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (2 samples, 0.30%)</title><rect x="118.7" y="323.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="121.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (2 samples, 0.30%)</title><rect x="118.7" y="307.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="121.7" y="318.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (2 samples, 0.30%)</title><rect x="118.7" y="291.0" width="3.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="121.7" y="302.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (2 samples, 0.30%)</title><rect x="118.7" y="275.0" width="3.5" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="121.7" y="286.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (2 samples, 0.30%)</title><rect x="118.7" y="259.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="121.7" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.15%)</title><rect x="120.5" y="243.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="123.5" y="254.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (12 samples, 1.78%)</title><rect x="122.2" y="403.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.2" y="414.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (12 samples, 1.78%)</title><rect x="122.2" y="387.0" width="21.1" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="125.2" y="398.0">j..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (12 samples, 1.78%)</title><rect x="122.2" y="371.0" width="21.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="125.2" y="382.0">j..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 1.78%)</title><rect x="122.2" y="355.0" width="21.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="125.2" y="366.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 1.78%)</title><rect x="122.2" y="339.0" width="21.1" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="125.2" y="350.0">c..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/1512709650.compare (12 samples, 1.78%)</title><rect x="122.2" y="323.0" width="21.1" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="125.2" y="334.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (12 samples, 1.78%)</title><rect x="122.2" y="307.0" width="21.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="125.2" y="318.0">j..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1687701365.compare (12 samples, 1.78%)</title><rect x="122.2" y="291.0" width="21.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="125.2" y="302.0">j..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (12 samples, 1.78%)</title><rect x="122.2" y="275.0" width="21.1" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="125.2" y="286.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.59%)</title><rect x="124.0" y="259.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="127.0" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.59%)</title><rect x="124.0" y="243.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="127.0" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.30%)</title><rect x="127.5" y="227.0" width="3.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="130.5" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1491043170.apply (7 samples, 1.04%)</title><rect x="131.0" y="259.0" width="12.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="134.0" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (7 samples, 1.04%)</title><rect x="131.0" y="243.0" width="12.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="134.0" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (7 samples, 1.04%)</title><rect x="131.0" y="227.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (7 samples, 1.04%)</title><rect x="131.0" y="211.0" width="12.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="134.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (7 samples, 1.04%)</title><rect x="131.0" y="195.0" width="12.3" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="134.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (7 samples, 1.04%)</title><rect x="131.0" y="179.0" width="12.3" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="134.0" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="136.2" y="163.0" width="7.1" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="139.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="136.2" y="147.0" width="7.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="139.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="136.2" y="131.0" width="7.1" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="139.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="136.2" y="115.0" width="7.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="139.2" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="138.0" y="99.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="141.0" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="138.0" y="83.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="141.0" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="138.0" y="67.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.0" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="138.0" y="51.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="141.0" y="62.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.30%)</title><rect x="139.7" y="99.0" width="3.6" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="142.7" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="139.7" y="83.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="142.7" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="141.5" y="83.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="144.5" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="141.5" y="67.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="144.5" y="78.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.15%)</title><rect x="141.5" y="51.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="144.5" y="62.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (11 samples, 1.63%)</title><rect x="143.3" y="403.0" width="19.2" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="146.3" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (11 samples, 1.63%)</title><rect x="143.3" y="387.0" width="19.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.3" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.15%)</title><rect x="143.3" y="371.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="146.3" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (10 samples, 1.49%)</title><rect x="145.0" y="371.0" width="17.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="148.0" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (10 samples, 1.49%)</title><rect x="145.0" y="355.0" width="17.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="148.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 1.34%)</title><rect x="146.8" y="339.0" width="15.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="149.8" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (9 samples, 1.34%)</title><rect x="146.8" y="323.0" width="15.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.8" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (2 samples, 0.30%)</title><rect x="146.8" y="307.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="149.8" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.15%)</title><rect x="146.8" y="291.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="149.8" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.15%)</title><rect x="146.8" y="275.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="149.8" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.15%)</title><rect x="146.8" y="259.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="149.8" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="148.5" y="291.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="151.5" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="148.5" y="275.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="151.5" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (1 samples, 0.15%)</title><rect x="148.5" y="259.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="151.5" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (1 samples, 0.15%)</title><rect x="148.5" y="243.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="151.5" y="254.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/1512709650.compare (7 samples, 1.04%)</title><rect x="150.3" y="307.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.3" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (7 samples, 1.04%)</title><rect x="150.3" y="291.0" width="12.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="153.3" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1687701365.compare (7 samples, 1.04%)</title><rect x="150.3" y="275.0" width="12.2" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.3" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (7 samples, 1.04%)</title><rect x="150.3" y="259.0" width="12.2" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="153.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.74%)</title><rect x="150.3" y="243.0" width="8.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="153.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 0.74%)</title><rect x="150.3" y="227.0" width="8.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="153.3" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 0.74%)</title><rect x="150.3" y="211.0" width="8.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="153.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.15%)</title><rect x="157.3" y="195.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="160.3" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1491043170.apply (2 samples, 0.30%)</title><rect x="159.0" y="243.0" width="3.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="162.0" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (2 samples, 0.30%)</title><rect x="159.0" y="227.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.0" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="159.0" y="211.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="162.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="159.0" y="195.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="162.0" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="179.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.0" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="163.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="162.0" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="147.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="162.0" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="131.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.0" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="115.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.0" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="159.0" y="99.0" width="1.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="162.0" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="159.0" y="83.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="162.0" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="159.0" y="67.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="162.0" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="159.0" y="51.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="162.0" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="159.0" y="35.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="162.0" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="160.8" y="211.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="163.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="160.8" y="195.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="163.8" y="206.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="160.8" y="179.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="163.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="160.8" y="163.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="163.8" y="174.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="160.8" y="147.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.8" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="160.8" y="131.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="163.8" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="160.8" y="115.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="163.8" y="126.0"></text>
</g>
<g>
<title>[unknown] (1 samples, 0.15%)</title><rect x="160.8" y="99.0" width="1.7" height="15" fill="#ec6969" rx="2" ry="2"/>
<text x="163.8" y="110.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (1 samples, 0.15%)</title><rect x="160.8" y="83.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="163.8" y="94.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.45%)</title><rect x="162.5" y="419.0" width="5.3" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="165.5" y="430.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (3 samples, 0.45%)</title><rect x="162.5" y="403.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="165.5" y="414.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.15%)</title><rect x="166.0" y="387.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="169.0" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.15%)</title><rect x="166.0" y="371.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="169.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$59/646624800.apply (1 samples, 0.15%)</title><rect x="167.8" y="419.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="170.8" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1 samples, 0.15%)</title><rect x="167.8" y="403.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="170.8" y="414.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="167.8" y="387.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.8" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="167.8" y="371.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.8" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="355.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="170.8" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="339.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="170.8" y="350.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="323.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.8" y="334.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="307.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="170.8" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="291.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="170.8" y="302.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="167.8" y="275.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="170.8" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="167.8" y="259.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.8" y="270.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="167.8" y="243.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="170.8" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="167.8" y="227.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="170.8" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="167.8" y="211.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="170.8" y="222.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (3 samples, 0.45%)</title><rect x="169.6" y="499.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="172.6" y="510.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.next (2 samples, 0.30%)</title><rect x="169.6" y="483.0" width="3.5" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="172.6" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterator (2 samples, 0.30%)</title><rect x="169.6" y="467.0" width="3.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="172.6" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.15%)</title><rect x="173.1" y="483.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="176.1" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$61/345574065.apply (1 samples, 0.15%)</title><rect x="173.1" y="467.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="176.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.lambda$iterator$0 (1 samples, 0.15%)</title><rect x="173.1" y="451.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="176.1" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1 samples, 0.15%)</title><rect x="173.1" y="435.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="176.1" y="446.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="173.1" y="419.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="176.1" y="430.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="173.1" y="403.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="176.1" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.15%)</title><rect x="174.8" y="499.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="177.8" y="510.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="174.8" y="483.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="177.8" y="494.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterator (481 samples, 71.47%)</title><rect x="176.6" y="499.0" width="843.3" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="179.6" y="510.0">ru/mail/polis/dao/boriskin/NewDAO.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells (480 samples, 71.32%)</title><rect x="178.3" y="483.0" width="841.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="181.3" y="494.0">ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (72 samples, 10.70%)</title><rect x="185.3" y="467.0" width="126.3" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="188.3" y="478.0">com/google/commo..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (72 samples, 10.70%)</title><rect x="185.3" y="451.0" width="126.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="188.3" y="462.0">com/google/commo..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (8 samples, 1.19%)</title><rect x="185.3" y="435.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="188.3" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (8 samples, 1.19%)</title><rect x="185.3" y="419.0" width="14.1" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="188.3" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (8 samples, 1.19%)</title><rect x="185.3" y="403.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.3" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (8 samples, 1.19%)</title><rect x="185.3" y="387.0" width="14.1" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="188.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (8 samples, 1.19%)</title><rect x="185.3" y="371.0" width="14.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="188.3" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (3 samples, 0.45%)</title><rect x="187.1" y="355.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="190.1" y="366.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (3 samples, 0.45%)</title><rect x="187.1" y="339.0" width="5.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="190.1" y="350.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (3 samples, 0.45%)</title><rect x="187.1" y="323.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="190.1" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (3 samples, 0.45%)</title><rect x="187.1" y="307.0" width="5.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="190.1" y="318.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (3 samples, 0.45%)</title><rect x="192.3" y="355.0" width="5.3" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="195.3" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$59/646624800.apply (1 samples, 0.15%)</title><rect x="197.6" y="355.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.6" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1 samples, 0.15%)</title><rect x="197.6" y="339.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="200.6" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="197.6" y="323.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="200.6" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="197.6" y="307.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="200.6" y="318.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="291.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="200.6" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="275.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="200.6" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="259.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="200.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="243.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.6" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="227.0" width="1.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="200.6" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="197.6" y="211.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="200.6" y="222.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.15%)</title><rect x="199.4" y="435.0" width="1.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="202.4" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.checkForComodification (1 samples, 0.15%)</title><rect x="199.4" y="419.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="202.4" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (63 samples, 9.36%)</title><rect x="201.1" y="435.0" width="110.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="204.1" y="446.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (63 samples, 9.36%)</title><rect x="201.1" y="419.0" width="110.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="204.1" y="430.0">java/util/Pri..</text>
</g>
<g>
<title>java/util/PriorityQueue.grow (2 samples, 0.30%)</title><rect x="204.6" y="403.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="207.6" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (59 samples, 8.77%)</title><rect x="208.1" y="403.0" width="103.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.1" y="414.0">java/util/Pr..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (59 samples, 8.77%)</title><rect x="208.1" y="387.0" width="103.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="211.1" y="398.0">java/util/Pr..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (57 samples, 8.47%)</title><rect x="211.6" y="371.0" width="100.0" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="214.6" y="382.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (56 samples, 8.32%)</title><rect x="213.4" y="355.0" width="98.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="216.4" y="366.0">com/google/c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (18 samples, 2.67%)</title><rect x="215.1" y="339.0" width="31.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="218.1" y="350.0">co..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (11 samples, 1.63%)</title><rect x="220.4" y="323.0" width="19.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="223.4" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (7 samples, 1.04%)</title><rect x="220.4" y="307.0" width="12.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="223.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$54/680647206.apply (6 samples, 0.89%)</title><rect x="222.2" y="291.0" width="10.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.2" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (1 samples, 0.15%)</title><rect x="230.9" y="275.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="233.9" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.&lt;init&gt; (1 samples, 0.15%)</title><rect x="230.9" y="259.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="233.9" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.59%)</title><rect x="232.7" y="307.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="235.7" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (4 samples, 0.59%)</title><rect x="232.7" y="291.0" width="7.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="235.7" y="302.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (2 samples, 0.30%)</title><rect x="236.2" y="275.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="239.2" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.15%)</title><rect x="237.9" y="259.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="240.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4 samples, 0.59%)</title><rect x="239.7" y="323.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="242.7" y="334.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (4 samples, 0.59%)</title><rect x="239.7" y="307.0" width="7.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="242.7" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (4 samples, 0.59%)</title><rect x="239.7" y="291.0" width="7.0" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="242.7" y="302.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (1 samples, 0.15%)</title><rect x="241.4" y="275.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="244.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getLong (1 samples, 0.15%)</title><rect x="241.4" y="259.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="244.4" y="270.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getLongUnaligned (1 samples, 0.15%)</title><rect x="241.4" y="243.0" width="1.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="244.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="243.2" y="275.0" width="1.7" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="246.2" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="243.2" y="259.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="246.2" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="243.2" y="243.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.2" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="243.2" y="227.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="246.2" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="243.2" y="211.0" width="1.7" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="246.2" y="222.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="244.9" y="275.0" width="1.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.9" y="286.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="244.9" y="259.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="247.9" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="244.9" y="243.0" width="1.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.9" y="254.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="244.9" y="227.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="247.9" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="246.7" y="339.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="249.7" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/1512709650.compare (36 samples, 5.35%)</title><rect x="248.5" y="339.0" width="63.1" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="251.5" y="350.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (36 samples, 5.35%)</title><rect x="248.5" y="323.0" width="63.1" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="251.5" y="334.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1687701365.compare (36 samples, 5.35%)</title><rect x="248.5" y="307.0" width="63.1" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="251.5" y="318.0">java/ut..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (36 samples, 5.35%)</title><rect x="248.5" y="291.0" width="63.1" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="251.5" y="302.0">java/ut..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.15%)</title><rect x="250.2" y="275.0" width="1.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="253.2" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 2.53%)</title><rect x="252.0" y="275.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.0" y="286.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (17 samples, 2.53%)</title><rect x="252.0" y="259.0" width="29.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="255.0" y="270.0">ja..</text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.30%)</title><rect x="253.7" y="243.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="256.7" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="255.5" y="227.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="258.5" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 2.08%)</title><rect x="257.2" y="243.0" width="24.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="260.2" y="254.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.base (1 samples, 0.15%)</title><rect x="271.2" y="227.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="274.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.30%)</title><rect x="273.0" y="227.0" width="3.5" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="276.0" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="274.8" y="211.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="277.8" y="222.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="276.5" y="227.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="279.5" y="238.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="276.5" y="211.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="279.5" y="222.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.15%)</title><rect x="278.3" y="227.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="281.3" y="238.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.15%)</title><rect x="280.0" y="227.0" width="1.8" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="283.0" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1491043170.apply (17 samples, 2.53%)</title><rect x="281.8" y="275.0" width="29.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="284.8" y="286.0">ru..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (17 samples, 2.53%)</title><rect x="281.8" y="259.0" width="29.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="284.8" y="270.0">ru..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (15 samples, 2.23%)</title><rect x="281.8" y="243.0" width="26.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="254.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (15 samples, 2.23%)</title><rect x="281.8" y="227.0" width="26.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="284.8" y="238.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.15%)</title><rect x="287.0" y="211.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="290.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (11 samples, 1.63%)</title><rect x="288.8" y="211.0" width="19.3" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="291.8" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 1.19%)</title><rect x="294.0" y="195.0" width="14.1" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="297.0" y="206.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (5 samples, 0.74%)</title><rect x="295.8" y="179.0" width="8.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="298.8" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.74%)</title><rect x="295.8" y="163.0" width="8.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="298.8" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (5 samples, 0.74%)</title><rect x="295.8" y="147.0" width="8.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="298.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="297.5" y="131.0" width="7.1" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="300.5" y="142.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.45%)</title><rect x="299.3" y="115.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="302.3" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="302.8" y="99.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="305.8" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.30%)</title><rect x="304.6" y="179.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="307.6" y="190.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.30%)</title><rect x="308.1" y="243.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="311.1" y="254.0"></text>
</g>
<g>
<title>java/nio/HeapByteBufferR.&lt;init&gt; (2 samples, 0.30%)</title><rect x="308.1" y="227.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="311.1" y="238.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (2 samples, 0.30%)</title><rect x="308.1" y="211.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="311.1" y="222.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.30%)</title><rect x="308.1" y="195.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.1" y="206.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.30%)</title><rect x="308.1" y="179.0" width="3.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="311.1" y="190.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.30%)</title><rect x="308.1" y="163.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="311.1" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="309.8" y="147.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.8" y="158.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="309.8" y="131.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="312.8" y="142.0"></text>
</g>
<g>
<title>java/util/ArrayList$Itr.next (1 samples, 0.15%)</title><rect x="311.6" y="467.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="314.6" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.74%)</title><rect x="313.3" y="467.0" width="8.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="316.3" y="478.0"></text>
</g>
<g>
<title>java/util/ArrayList.add (5 samples, 0.74%)</title><rect x="313.3" y="451.0" width="8.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="316.3" y="462.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.59%)</title><rect x="315.1" y="435.0" width="7.0" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="318.1" y="446.0"></text>
</g>
<g>
<title>java/util/ArrayList.grow (4 samples, 0.59%)</title><rect x="315.1" y="419.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="318.1" y="430.0"></text>
</g>
<g>
<title>java/util/ArrayList.newCapacity (1 samples, 0.15%)</title><rect x="320.3" y="403.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="323.3" y="414.0"></text>
</g>
<g>
<title>java/util/ArrayList.iterator (2 samples, 0.30%)</title><rect x="322.1" y="467.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="325.1" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (13 samples, 1.93%)</title><rect x="325.6" y="467.0" width="22.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="328.6" y="478.0">r..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (13 samples, 1.93%)</title><rect x="325.6" y="451.0" width="22.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="328.6" y="462.0">r..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (13 samples, 1.93%)</title><rect x="325.6" y="435.0" width="22.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="328.6" y="446.0">c..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.hasNext (1 samples, 0.15%)</title><rect x="325.6" y="419.0" width="1.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="328.6" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.next (1 samples, 0.15%)</title><rect x="327.4" y="419.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.4" y="430.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="327.4" y="403.0" width="1.7" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="330.4" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="327.4" y="387.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="330.4" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (1 samples, 0.15%)</title><rect x="327.4" y="371.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="330.4" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (1 samples, 0.15%)</title><rect x="327.4" y="355.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="330.4" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (1 samples, 0.15%)</title><rect x="327.4" y="339.0" width="1.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="330.4" y="350.0"></text>
</g>
<g>
<title>java/util/AbstractQueue.remove (4 samples, 0.59%)</title><rect x="329.1" y="419.0" width="7.0" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="332.1" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.poll (4 samples, 0.59%)</title><rect x="329.1" y="403.0" width="7.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="332.1" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (4 samples, 0.59%)</title><rect x="329.1" y="387.0" width="7.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="332.1" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.59%)</title><rect x="329.1" y="371.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="332.1" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (4 samples, 0.59%)</title><rect x="329.1" y="355.0" width="7.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.1" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.15%)</title><rect x="329.1" y="339.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="332.1" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.15%)</title><rect x="329.1" y="323.0" width="1.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="332.1" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.15%)</title><rect x="329.1" y="307.0" width="1.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="332.1" y="318.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.15%)</title><rect x="329.1" y="291.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="332.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/1512709650.compare (3 samples, 0.45%)</title><rect x="330.9" y="339.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.9" y="350.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.45%)</title><rect x="330.9" y="323.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="333.9" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1687701365.compare (3 samples, 0.45%)</title><rect x="330.9" y="307.0" width="5.2" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="333.9" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.45%)</title><rect x="330.9" y="291.0" width="5.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="333.9" y="302.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="330.9" y="275.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="333.9" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="330.9" y="259.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.9" y="270.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.30%)</title><rect x="330.9" y="243.0" width="3.5" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="333.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1491043170.apply (1 samples, 0.15%)</title><rect x="334.4" y="275.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="337.4" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1 samples, 0.15%)</title><rect x="334.4" y="259.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="337.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.15%)</title><rect x="334.4" y="243.0" width="1.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="337.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="334.4" y="227.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="337.4" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="334.4" y="211.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="337.4" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="334.4" y="195.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="337.4" y="206.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 1.04%)</title><rect x="336.1" y="419.0" width="12.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.1" y="430.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 1.04%)</title><rect x="336.1" y="403.0" width="12.3" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="339.1" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.15%)</title><rect x="336.1" y="387.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="339.1" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6 samples, 0.89%)</title><rect x="337.9" y="387.0" width="10.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="340.9" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6 samples, 0.89%)</title><rect x="337.9" y="371.0" width="10.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="340.9" y="382.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.89%)</title><rect x="337.9" y="355.0" width="10.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="340.9" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 0.89%)</title><rect x="337.9" y="339.0" width="10.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="340.9" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (3 samples, 0.45%)</title><rect x="337.9" y="323.0" width="5.2" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="340.9" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (2 samples, 0.30%)</title><rect x="337.9" y="307.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="340.9" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.15%)</title><rect x="339.6" y="291.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="342.6" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$54/680647206.apply (1 samples, 0.15%)</title><rect x="339.6" y="275.0" width="1.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="342.6" y="286.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (1 samples, 0.15%)</title><rect x="339.6" y="259.0" width="1.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="342.6" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.&lt;init&gt; (1 samples, 0.15%)</title><rect x="339.6" y="243.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="342.6" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="341.4" y="307.0" width="1.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="344.4" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.next (1 samples, 0.15%)</title><rect x="341.4" y="291.0" width="1.7" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="344.4" y="302.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findCell (1 samples, 0.15%)</title><rect x="341.4" y="275.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="344.4" y="286.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.15%)</title><rect x="341.4" y="259.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="344.4" y="270.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.15%)</title><rect x="341.4" y="243.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="344.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="341.4" y="227.0" width="1.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="344.4" y="238.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/1512709650.compare (3 samples, 0.45%)</title><rect x="343.1" y="323.0" width="5.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="346.1" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (3 samples, 0.45%)</title><rect x="343.1" y="307.0" width="5.3" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="346.1" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1687701365.compare (3 samples, 0.45%)</title><rect x="343.1" y="291.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="346.1" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (3 samples, 0.45%)</title><rect x="343.1" y="275.0" width="5.3" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="346.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (1 samples, 0.15%)</title><rect x="343.1" y="259.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="346.1" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1491043170.apply (2 samples, 0.30%)</title><rect x="344.9" y="259.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.9" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (2 samples, 0.30%)</title><rect x="344.9" y="243.0" width="3.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="347.9" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.30%)</title><rect x="344.9" y="227.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.30%)</title><rect x="344.9" y="211.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="347.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.30%)</title><rect x="344.9" y="195.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.30%)</title><rect x="344.9" y="179.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="347.9" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.9" y="163.0" width="1.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="347.9" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.9" y="147.0" width="1.7" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="347.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.9" y="131.0" width="1.7" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="347.9" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="344.9" y="115.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="347.9" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="344.9" y="99.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="347.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="344.9" y="83.0" width="1.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="347.9" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="346.6" y="163.0" width="1.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="349.6" y="174.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.iterator (10 samples, 1.49%)</title><rect x="348.4" y="467.0" width="17.5" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="351.4" y="478.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators.transform (2 samples, 0.30%)</title><rect x="348.4" y="451.0" width="3.5" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="351.4" y="462.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.&lt;init&gt; (2 samples, 0.30%)</title><rect x="348.4" y="435.0" width="3.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="351.4" y="446.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.&lt;init&gt; (2 samples, 0.30%)</title><rect x="348.4" y="419.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="351.4" y="430.0"></text>
</g>
<g>
<title>java/lang/Object.&lt;init&gt; (1 samples, 0.15%)</title><rect x="350.1" y="403.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="353.1" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (5 samples, 0.74%)</title><rect x="351.9" y="451.0" width="8.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.9" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.&lt;init&gt; (1 samples, 0.15%)</title><rect x="351.9" y="435.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="354.9" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.&lt;init&gt; (1 samples, 0.15%)</title><rect x="351.9" y="419.0" width="1.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.9" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (4 samples, 0.59%)</title><rect x="353.7" y="435.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="356.7" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (4 samples, 0.59%)</title><rect x="353.7" y="419.0" width="7.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="356.7" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (3 samples, 0.45%)</title><rect x="355.4" y="403.0" width="5.3" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="358.4" y="414.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="357.2" y="387.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="360.2" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="357.2" y="371.0" width="3.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.2" y="382.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.15%)</title><rect x="357.2" y="355.0" width="1.7" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="360.2" y="366.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="357.2" y="339.0" width="1.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="360.2" y="350.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="357.2" y="323.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="360.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="358.9" y="355.0" width="1.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="361.9" y="366.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="358.9" y="339.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="361.9" y="350.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.entrySet (1 samples, 0.15%)</title><rect x="360.7" y="451.0" width="1.7" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="363.7" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.&lt;init&gt; (1 samples, 0.15%)</title><rect x="360.7" y="435.0" width="1.7" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="363.7" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$EntrySetView.&lt;init&gt; (1 samples, 0.15%)</title><rect x="360.7" y="419.0" width="1.7" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="363.7" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.30%)</title><rect x="362.4" y="451.0" width="3.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="365.4" y="462.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (2 samples, 0.30%)</title><rect x="362.4" y="435.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.4" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (2 samples, 0.30%)</title><rect x="362.4" y="419.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="365.4" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (2 samples, 0.30%)</title><rect x="362.4" y="403.0" width="3.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="365.4" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (2 samples, 0.30%)</title><rect x="362.4" y="387.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="365.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="362.4" y="371.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="365.4" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.30%)</title><rect x="362.4" y="355.0" width="3.5" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="365.4" y="366.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.30%)</title><rect x="362.4" y="339.0" width="3.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="365.4" y="350.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="364.2" y="323.0" width="1.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="367.2" y="334.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.ix (1 samples, 0.15%)</title><rect x="364.2" y="307.0" width="1.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="367.2" y="318.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.iterator (373 samples, 55.42%)</title><rect x="365.9" y="467.0" width="654.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.9" y="478.0">ru/mail/polis/dao/boriskin/SortedStringTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt; (373 samples, 55.42%)</title><rect x="365.9" y="451.0" width="654.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="368.9" y="462.0">ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findNext (373 samples, 55.42%)</title><rect x="365.9" y="435.0" width="654.0" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="368.9" y="446.0">ru/mail/polis/dao/boriskin/SortedStringTable.findNext</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (139 samples, 20.65%)</title><rect x="388.7" y="419.0" width="243.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="391.7" y="430.0">java/nio/ByteBuffer.compareTo</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (122 samples, 18.13%)</title><rect x="418.5" y="403.0" width="213.9" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="421.5" y="414.0">java/nio/ByteBuffer.compareTo</text>
</g>
<g>
<title>java/nio/Buffer.position (13 samples, 1.93%)</title><rect x="430.8" y="387.0" width="22.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="433.8" y="398.0">j..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (3 samples, 0.45%)</title><rect x="441.3" y="371.0" width="5.3" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="444.3" y="382.0"></text>
</g>
<g>
<title>vtable stub (4 samples, 0.59%)</title><rect x="446.6" y="371.0" width="7.0" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="449.6" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.remaining (1 samples, 0.15%)</title><rect x="453.6" y="387.0" width="1.7" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="456.6" y="398.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (96 samples, 14.26%)</title><rect x="455.3" y="387.0" width="168.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="458.3" y="398.0">java/nio/BufferMismatc..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (15 samples, 2.23%)</title><rect x="564.1" y="371.0" width="26.3" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="567.1" y="382.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.45%)</title><rect x="583.3" y="355.0" width="5.3" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="586.3" y="366.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.15%)</title><rect x="588.6" y="355.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="591.6" y="366.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 0.74%)</title><rect x="590.4" y="371.0" width="8.7" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="593.4" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (2 samples, 0.30%)</title><rect x="599.1" y="371.0" width="3.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="602.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="600.9" y="355.0" width="1.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="603.9" y="366.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.59%)</title><rect x="602.6" y="371.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="605.6" y="382.0"></text>
</g>
<g>
<title>vtable stub (8 samples, 1.19%)</title><rect x="609.6" y="371.0" width="14.1" height="15" fill="#e15b5b" rx="2" ry="2"/>
<text x="612.6" y="382.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (4 samples, 0.59%)</title><rect x="623.7" y="387.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="626.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.45%)</title><rect x="623.7" y="371.0" width="5.2" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="626.7" y="382.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getByte (1 samples, 0.15%)</title><rect x="628.9" y="371.0" width="1.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="631.9" y="382.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.get (1 samples, 0.15%)</title><rect x="630.7" y="387.0" width="1.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="633.7" y="398.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (1 samples, 0.15%)</title><rect x="630.7" y="371.0" width="1.7" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="633.7" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findK (221 samples, 32.84%)</title><rect x="632.4" y="419.0" width="387.5" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="635.4" y="430.0">ru/mail/polis/dao/boriskin/SortedStringTable.findK</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (90 samples, 13.37%)</title><rect x="728.9" y="403.0" width="157.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="731.9" y="414.0">java/nio/DirectByteB..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.45%)</title><rect x="728.9" y="387.0" width="5.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="731.9" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.getInt (85 samples, 12.63%)</title><rect x="734.1" y="387.0" width="149.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="737.1" y="398.0">java/nio/DirectByte..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getIntUnaligned (85 samples, 12.63%)</title><rect x="734.1" y="371.0" width="149.1" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="737.1" y="382.0">jdk/internal/misc/U..</text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.convEndian (84 samples, 12.48%)</title><rect x="735.9" y="355.0" width="147.3" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="738.9" y="366.0">jdk/internal/misc/U..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.ix (2 samples, 0.30%)</title><rect x="883.2" y="387.0" width="3.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="886.2" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (49 samples, 7.28%)</title><rect x="886.7" y="403.0" width="85.9" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="889.7" y="414.0">java/nio/D..</text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.30%)</title><rect x="904.2" y="387.0" width="3.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="907.2" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (37 samples, 5.50%)</title><rect x="907.7" y="387.0" width="64.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="910.7" y="398.0">java/ni..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (36 samples, 5.35%)</title><rect x="909.5" y="371.0" width="63.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="912.5" y="382.0">java/ni..</text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (30 samples, 4.46%)</title><rect x="920.0" y="355.0" width="52.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="923.0" y="366.0">java/..</text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="965.6" y="339.0" width="7.0" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="968.6" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="965.6" y="323.0" width="7.0" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="968.6" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.59%)</title><rect x="965.6" y="307.0" width="7.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="968.6" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="969.1" y="291.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="972.1" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.15%)</title><rect x="969.1" y="275.0" width="1.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="972.1" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (1 samples, 0.15%)</title><rect x="969.1" y="259.0" width="1.7" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="972.1" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (1 samples, 0.15%)</title><rect x="969.1" y="243.0" width="1.7" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="972.1" y="254.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="970.8" y="291.0" width="1.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="973.8" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.15%)</title><rect x="970.8" y="275.0" width="1.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="973.8" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (1 samples, 0.15%)</title><rect x="970.8" y="259.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="973.8" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (1 samples, 0.15%)</title><rect x="970.8" y="243.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="973.8" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (16 samples, 2.38%)</title><rect x="972.6" y="403.0" width="28.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="975.6" y="414.0">ja..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (3 samples, 0.45%)</title><rect x="981.4" y="387.0" width="5.2" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="984.4" y="398.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (3 samples, 0.45%)</title><rect x="981.4" y="371.0" width="5.2" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="984.4" y="382.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (3 samples, 0.45%)</title><rect x="981.4" y="355.0" width="5.2" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="984.4" y="366.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (3 samples, 0.45%)</title><rect x="981.4" y="339.0" width="5.2" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="984.4" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (2 samples, 0.30%)</title><rect x="983.1" y="323.0" width="3.5" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.1" y="334.0"></text>
</g>
<g>
<title>G1Allocator::unsafe_max_tlab_alloc() (1 samples, 0.15%)</title><rect x="983.1" y="307.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="986.1" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.15%)</title><rect x="984.9" y="307.0" width="1.7" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="987.9" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.15%)</title><rect x="984.9" y="291.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.9" y="302.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.15%)</title><rect x="984.9" y="275.0" width="1.7" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="987.9" y="286.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.15%)</title><rect x="984.9" y="259.0" width="1.7" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="987.9" y="270.0"></text>
</g>
<g>
<title>G1RemSetTrackingPolicy::update_at_allocate(HeapRegion*) (1 samples, 0.15%)</title><rect x="984.9" y="243.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="987.9" y="254.0"></text>
</g>
<g>
<title>G1FromCardCache::clear(unsigned int) (1 samples, 0.15%)</title><rect x="984.9" y="227.0" width="1.7" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="987.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (8 samples, 1.19%)</title><rect x="986.6" y="387.0" width="14.0" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="989.6" y="398.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (8 samples, 1.19%)</title><rect x="986.6" y="371.0" width="14.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="989.6" y="382.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.45%)</title><rect x="995.4" y="355.0" width="5.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="998.4" y="366.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.45%)</title><rect x="995.4" y="339.0" width="5.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="998.4" y="350.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.45%)</title><rect x="995.4" y="323.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.4" y="334.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (3 samples, 0.45%)</title><rect x="995.4" y="307.0" width="5.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="998.4" y="318.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.45%)</title><rect x="995.4" y="291.0" width="5.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="998.4" y="302.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (3 samples, 0.45%)</title><rect x="995.4" y="275.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="998.4" y="286.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (3 samples, 0.45%)</title><rect x="995.4" y="259.0" width="5.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="998.4" y="270.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (3 samples, 0.45%)</title><rect x="995.4" y="243.0" width="5.2" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="998.4" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectIntBufferS.get (3 samples, 0.45%)</title><rect x="1000.6" y="403.0" width="5.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1003.6" y="414.0"></text>
</g>
<g>
<title>jdk/internal/misc/Unsafe.getInt (3 samples, 0.45%)</title><rect x="1000.6" y="387.0" width="5.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1003.6" y="398.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.30%)</title><rect x="1005.9" y="403.0" width="3.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1008.9" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (2 samples, 0.30%)</title><rect x="1005.9" y="387.0" width="3.5" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1008.9" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.limit (2 samples, 0.30%)</title><rect x="1005.9" y="371.0" width="3.5" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1008.9" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.limit (2 samples, 0.30%)</title><rect x="1005.9" y="355.0" width="3.5" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1008.9" y="366.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.89%)</title><rect x="1009.4" y="403.0" width="10.5" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="1012.4" y="414.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (6 samples, 0.89%)</title><rect x="1009.4" y="387.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.4" y="398.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (6 samples, 0.89%)</title><rect x="1009.4" y="371.0" width="10.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1012.4" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (6 samples, 0.89%)</title><rect x="1009.4" y="355.0" width="10.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1012.4" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.upsert (1 samples, 0.15%)</title><rect x="1019.9" y="515.0" width="1.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1022.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.upsert (1 samples, 0.15%)</title><rect x="1019.9" y="499.0" width="1.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="1022.9" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/Value.valueOf (1 samples, 0.15%)</title><rect x="1019.9" y="483.0" width="1.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1022.9" y="494.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.duplicate (1 samples, 0.15%)</title><rect x="1019.9" y="467.0" width="1.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1022.9" y="478.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="1019.9" y="451.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1022.9" y="462.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.15%)</title><rect x="1019.9" y="435.0" width="1.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1022.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.resp (2 samples, 0.30%)</title><rect x="1021.7" y="531.0" width="3.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1024.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Response.&lt;init&gt; (2 samples, 0.30%)</title><rect x="1021.7" y="515.0" width="3.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1024.7" y="526.0"></text>
</g>
<g>
<title>jlong_disjoint_arraycopy (1 samples, 0.15%)</title><rect x="1023.4" y="499.0" width="1.8" height="15" fill="#e45e5e" rx="2" ry="2"/>
<text x="1026.4" y="510.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (3 samples, 0.45%)</title><rect x="1025.2" y="563.0" width="5.2" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1028.2" y="574.0"></text>
</g>
<g>
<title>java/util/HashMap.get (3 samples, 0.45%)</title><rect x="1025.2" y="547.0" width="5.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1028.2" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.getNode (2 samples, 0.30%)</title><rect x="1025.2" y="531.0" width="3.5" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="1028.2" y="542.0"></text>
</g>
<g>
<title>java/lang/String.equals (1 samples, 0.15%)</title><rect x="1026.9" y="515.0" width="1.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1029.9" y="526.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (1 samples, 0.15%)</title><rect x="1026.9" y="499.0" width="1.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1029.9" y="510.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.15%)</title><rect x="1028.7" y="531.0" width="1.7" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="1031.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (4 samples, 0.59%)</title><rect x="1030.4" y="595.0" width="7.1" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="1033.4" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.&lt;init&gt; (1 samples, 0.15%)</title><rect x="1030.4" y="579.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.4" y="590.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="1030.4" y="563.0" width="1.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1033.4" y="574.0"></text>
</g>
<g>
<title>java/lang/String.indexOf (1 samples, 0.15%)</title><rect x="1030.4" y="547.0" width="1.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="1033.4" y="558.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.indexOf (1 samples, 0.15%)</title><rect x="1030.4" y="531.0" width="1.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1033.4" y="542.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (3 samples, 0.45%)</title><rect x="1032.2" y="579.0" width="5.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="1035.2" y="590.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.15%)</title><rect x="1037.5" y="595.0" width="1.7" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="1040.5" y="606.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeaderCount (1 samples, 0.15%)</title><rect x="1039.2" y="595.0" width="1.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1042.2" y="606.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (1 samples, 0.15%)</title><rect x="1039.2" y="579.0" width="1.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="1042.2" y="590.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (16 samples, 2.38%)</title><rect x="1041.0" y="611.0" width="28.0" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1044.0" y="622.0">on..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (16 samples, 2.38%)</title><rect x="1041.0" y="595.0" width="28.0" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="1044.0" y="606.0">on..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (6 samples, 0.89%)</title><rect x="1042.7" y="579.0" width="10.5" height="15" fill="#fc7f7f" rx="2" ry="2"/>
<text x="1045.7" y="590.0"></text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.15%)</title><rect x="1042.7" y="563.0" width="1.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1045.7" y="574.0"></text>
</g>
<g>
<title>AccessInternal::PostRuntimeDispatch&lt;G1BarrierSet::AccessBarrier&lt;1097844ul, G1BarrierSet&gt;, (AccessInternal::BarrierType)2, 1097844ul&gt;::oop_access_barrier(void*) (1 samples, 0.15%)</title><rect x="1044.5" y="563.0" width="1.7" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1047.5" y="574.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.15%)</title><rect x="1046.2" y="563.0" width="1.8" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1049.2" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (3 samples, 0.45%)</title><rect x="1048.0" y="563.0" width="5.2" height="15" fill="#f87979" rx="2" ry="2"/>
<text x="1051.0" y="574.0"></text>
</g>
<g>
<title>HandleMark::pop_and_restore() (1 samples, 0.15%)</title><rect x="1048.0" y="547.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1051.0" y="558.0"></text>
</g>
<g>
<title>ResourceMark::reset_to_mark() (1 samples, 0.15%)</title><rect x="1049.7" y="547.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1052.7" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.15%)</title><rect x="1051.5" y="547.0" width="1.7" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1054.5" y="558.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.15%)</title><rect x="1053.2" y="579.0" width="1.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1056.2" y="590.0"></text>
</g>
<g>
<title>recv (8 samples, 1.19%)</title><rect x="1055.0" y="579.0" width="14.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1058.0" y="590.0"></text>
</g>
<g>
<title>start_thread (69 samples, 10.25%)</title><rect x="1069.0" y="659.0" width="121.0" height="15" fill="#eb6868" rx="2" ry="2"/>
<text x="1072.0" y="670.0">start_thread</text>
</g>
<g>
<title>thread_native_entry(Thread*) (69 samples, 10.25%)</title><rect x="1069.0" y="643.0" width="121.0" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="1072.0" y="654.0">thread_native_e..</text>
</g>
<g>
<title>Thread::call_run() (69 samples, 10.25%)</title><rect x="1069.0" y="627.0" width="121.0" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1072.0" y="638.0">Thread::call_ru..</text>
</g>
<g>
<title>GangWorker::loop() (66 samples, 9.81%)</title><rect x="1069.0" y="611.0" width="115.7" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1072.0" y="622.0">GangWorker::lo..</text>
</g>
<g>
<title>G1FreeCollectionSetTask::work(unsigned int) (2 samples, 0.30%)</title><rect x="1069.0" y="595.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1072.0" y="606.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate(HeapRegionClosure*) const (1 samples, 0.15%)</title><rect x="1069.0" y="579.0" width="1.8" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1072.0" y="590.0"></text>
</g>
<g>
<title>G1FreeCollectionSetTask::G1SerialFreeCollectionSetClosure::do_heap_region(HeapRegion*) (1 samples, 0.15%)</title><rect x="1069.0" y="563.0" width="1.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1072.0" y="574.0"></text>
</g>
<g>
<title>G1CollectedHeap::free_region(HeapRegion*, FreeRegionList*, bool, bool, bool) (1 samples, 0.15%)</title><rect x="1069.0" y="547.0" width="1.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1072.0" y="558.0"></text>
</g>
<g>
<title>HeapRegionRemSet::clear_locked(bool) (1 samples, 0.15%)</title><rect x="1070.8" y="579.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1073.8" y="590.0"></text>
</g>
<g>
<title>RSHashTable::clear() (1 samples, 0.15%)</title><rect x="1070.8" y="563.0" width="1.7" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1073.8" y="574.0"></text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (55 samples, 8.17%)</title><rect x="1072.5" y="595.0" width="96.5" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1075.5" y="606.0">G1ParTask::..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (48 samples, 7.13%)</title><rect x="1072.5" y="579.0" width="84.2" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1075.5" y="590.0">G1ParEvacu..</text>
</g>
<g>
<title>ParallelTaskTerminator::offer_termination(TerminatorTerminator*) (2 samples, 0.30%)</title><rect x="1072.5" y="563.0" width="3.5" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1075.5" y="574.0"></text>
</g>
<g>
<title>SpinPause (46 samples, 6.84%)</title><rect x="1076.0" y="563.0" width="80.7" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="1079.0" y="574.0">SpinPause</text>
</g>
<g>
<title>G1RemSet::scan_rem_set(G1ParScanThreadState*, unsigned int) (2 samples, 0.30%)</title><rect x="1156.7" y="579.0" width="3.5" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1159.7" y="590.0"></text>
</g>
<g>
<title>G1CollectionSet::iterate_from(HeapRegionClosure*, unsigned int, unsigned int) const (2 samples, 0.30%)</title><rect x="1156.7" y="563.0" width="3.5" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1159.7" y="574.0"></text>
</g>
<g>
<title>G1ScanRSForRegionClosure::do_heap_region(HeapRegion*) (2 samples, 0.30%)</title><rect x="1156.7" y="547.0" width="3.5" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1159.7" y="558.0"></text>
</g>
<g>
<title>G1RootProcessor::evacuate_roots(G1ParScanThreadState*, unsigned int) (5 samples, 0.74%)</title><rect x="1160.2" y="579.0" width="8.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1163.2" y="590.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.15%)</title><rect x="1160.2" y="563.0" width="1.7" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1163.2" y="574.0"></text>
</g>
<g>
<title>G1RootProcessor::process_java_roots(G1RootClosures*, G1GCPhaseTimes*, unsigned int) (4 samples, 0.59%)</title><rect x="1161.9" y="563.0" width="7.1" height="15" fill="#e4e445" rx="2" ry="2"/>
<text x="1164.9" y="574.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_oops_do(bool, OopClosure*, CodeBlobClosure*) (4 samples, 0.59%)</title><rect x="1161.9" y="547.0" width="7.1" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1164.9" y="558.0"></text>
</g>
<g>
<title>G1ParCopyClosure&lt;(G1Barrier)0, (G1Mark)0&gt;::do_oop(oopDesc**) (1 samples, 0.15%)</title><rect x="1161.9" y="531.0" width="1.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1164.9" y="542.0"></text>
</g>
<g>
<title>JavaThread::oops_do(OopClosure*, CodeBlobClosure*) (3 samples, 0.45%)</title><rect x="1163.7" y="531.0" width="5.3" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1166.7" y="542.0"></text>
</g>
<g>
<title>ConstantPool::impl_signature_ref_at(int, bool) (1 samples, 0.15%)</title><rect x="1163.7" y="515.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1166.7" y="526.0"></text>
</g>
<g>
<title>G1CodeBlobClosure::do_code_blob(CodeBlob*) (1 samples, 0.15%)</title><rect x="1165.5" y="515.0" width="1.7" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1168.5" y="526.0"></text>
</g>
<g>
<title>nmethod::oops_do(OopClosure*, bool) (1 samples, 0.15%)</title><rect x="1165.5" y="499.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1168.5" y="510.0"></text>
</g>
<g>
<title>HeapRegionRemSet::add_strong_code_root(nmethod*) (1 samples, 0.15%)</title><rect x="1165.5" y="483.0" width="1.7" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1168.5" y="494.0"></text>
</g>
<g>
<title>G1CodeRootSet::contains(nmethod*) (1 samples, 0.15%)</title><rect x="1165.5" y="467.0" width="1.7" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1168.5" y="478.0"></text>
</g>
<g>
<title>frame::oops_interpreted_do(OopClosure*, RegisterMap const*, bool) (1 samples, 0.15%)</title><rect x="1167.2" y="515.0" width="1.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1170.2" y="526.0"></text>
</g>
<g>
<title>OopMapCache::lookup(methodHandle const&amp;, int, InterpreterOopMap*) (1 samples, 0.15%)</title><rect x="1167.2" y="499.0" width="1.8" height="15" fill="#d3d33f" rx="2" ry="2"/>
<text x="1170.2" y="510.0"></text>
</g>
<g>
<title>G1RemSetScanState::G1ClearCardTableTask::work(unsigned int) (2 samples, 0.30%)</title><rect x="1169.0" y="595.0" width="3.5" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1172.0" y="606.0"></text>
</g>
<g>
<title>HeapRegion::clear_cardtable() (1 samples, 0.15%)</title><rect x="1170.7" y="579.0" width="1.8" height="15" fill="#d5d540" rx="2" ry="2"/>
<text x="1173.7" y="590.0"></text>
</g>
<g>
<title>GCIdMark::GCIdMark(unsigned int) (3 samples, 0.45%)</title><rect x="1172.5" y="595.0" width="5.2" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1175.5" y="606.0"></text>
</g>
<g>
<title>ParallelSPCleanupTask::work(unsigned int) (3 samples, 0.45%)</title><rect x="1177.7" y="595.0" width="5.3" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1180.7" y="606.0"></text>
</g>
<g>
<title>Threads::possibly_parallel_threads_do(bool, ThreadClosure*) (3 samples, 0.45%)</title><rect x="1177.7" y="579.0" width="5.3" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1180.7" y="590.0"></text>
</g>
<g>
<title>JavaThread::nmethods_do(CodeBlobClosure*) [clone .part.66] (1 samples, 0.15%)</title><rect x="1179.5" y="563.0" width="1.7" height="15" fill="#d8d841" rx="2" ry="2"/>
<text x="1182.5" y="574.0"></text>
</g>
<g>
<title>StackFrameStream::StackFrameStream(JavaThread*, bool) (1 samples, 0.15%)</title><rect x="1179.5" y="547.0" width="1.7" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1182.5" y="558.0"></text>
</g>
<g>
<title>JavaThread::pd_last_frame() (1 samples, 0.15%)</title><rect x="1179.5" y="531.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1182.5" y="542.0"></text>
</g>
<g>
<title>CodeCache::find_blob(void*) (1 samples, 0.15%)</title><rect x="1179.5" y="515.0" width="1.7" height="15" fill="#d4d440" rx="2" ry="2"/>
<text x="1182.5" y="526.0"></text>
</g>
<g>
<title>CodeHeap::find_blob_unsafe(void*) const (1 samples, 0.15%)</title><rect x="1179.5" y="499.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1182.5" y="510.0"></text>
</g>
<g>
<title>ParallelSPCleanupThreadClosure::do_thread(Thread*) (1 samples, 0.15%)</title><rect x="1181.2" y="563.0" width="1.8" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1184.2" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::deflate_thread_local_monitors(Thread*, DeflateMonitorCounters*) (1 samples, 0.15%)</title><rect x="1181.2" y="547.0" width="1.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1184.2" y="558.0"></text>
</g>
<g>
<title>sem_post@@GLIBC_2.2.5 (1 samples, 0.15%)</title><rect x="1183.0" y="595.0" width="1.7" height="15" fill="#fe8181" rx="2" ry="2"/>
<text x="1186.0" y="606.0"></text>
</g>
<g>
<title>VMThread::run() (3 samples, 0.45%)</title><rect x="1184.7" y="611.0" width="5.3" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1187.7" y="622.0"></text>
</g>
<g>
<title>VMThread::loop() (3 samples, 0.45%)</title><rect x="1184.7" y="595.0" width="5.3" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1187.7" y="606.0"></text>
</g>
<g>
<title>SafepointSynchronize::begin() (1 samples, 0.15%)</title><rect x="1184.7" y="579.0" width="1.8" height="15" fill="#cece3e" rx="2" ry="2"/>
<text x="1187.7" y="590.0"></text>
</g>
<g>
<title>SafepointSynchronize::do_cleanup_tasks() (1 samples, 0.15%)</title><rect x="1184.7" y="563.0" width="1.8" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1187.7" y="574.0"></text>
</g>
<g>
<title>ObjectSynchronizer::finish_deflate_idle_monitors(DeflateMonitorCounters*) (1 samples, 0.15%)</title><rect x="1184.7" y="547.0" width="1.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1187.7" y="558.0"></text>
</g>
<g>
<title>VMThread::evaluate_operation(VM_Operation*) [clone .constprop.66] (2 samples, 0.30%)</title><rect x="1186.5" y="579.0" width="3.5" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.5" y="590.0"></text>
</g>
<g>
<title>VM_Operation::evaluate() (2 samples, 0.30%)</title><rect x="1186.5" y="563.0" width="3.5" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1189.5" y="574.0"></text>
</g>
<g>
<title>VM_G1CollectForAllocation::doit() (2 samples, 0.30%)</title><rect x="1186.5" y="547.0" width="3.5" height="15" fill="#dbdb42" rx="2" ry="2"/>
<text x="1189.5" y="558.0"></text>
</g>
<g>
<title>G1CollectedHeap::do_collection_pause_at_safepoint(double) (2 samples, 0.30%)</title><rect x="1186.5" y="531.0" width="3.5" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1189.5" y="542.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print() (1 samples, 0.15%)</title><rect x="1186.5" y="515.0" width="1.7" height="15" fill="#c9c93c" rx="2" ry="2"/>
<text x="1189.5" y="526.0"></text>
</g>
<g>
<title>G1GCPhaseTimes::print_post_evacuate_collection_set() const (1 samples, 0.15%)</title><rect x="1186.5" y="499.0" width="1.7" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1189.5" y="510.0"></text>
</g>
<g>
<title>ReferenceProcessorPhaseTimes::print_all_references(unsigned int, bool) const (1 samples, 0.15%)</title><rect x="1186.5" y="483.0" width="1.7" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1189.5" y="494.0"></text>
</g>
<g>
<title>outputStream::print_cr(char const*, ...) (1 samples, 0.15%)</title><rect x="1186.5" y="467.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="478.0"></text>
</g>
<g>
<title>outputStream::do_vsnprintf_and_write_with_automatic_buffer(char const*, __va_list_tag*, bool) (1 samples, 0.15%)</title><rect x="1186.5" y="451.0" width="1.7" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1189.5" y="462.0"></text>
</g>
<g>
<title>LogStream::write(char const*, unsigned long) (1 samples, 0.15%)</title><rect x="1186.5" y="435.0" width="1.7" height="15" fill="#e3e345" rx="2" ry="2"/>
<text x="1189.5" y="446.0"></text>
</g>
<g>
<title>LogTargetHandle::print(char const*, ...) (1 samples, 0.15%)</title><rect x="1186.5" y="419.0" width="1.7" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1189.5" y="430.0"></text>
</g>
<g>
<title>LogTagSet::vwrite(LogLevel::type, char const*, __va_list_tag*) (1 samples, 0.15%)</title><rect x="1186.5" y="403.0" width="1.7" height="15" fill="#dede43" rx="2" ry="2"/>
<text x="1189.5" y="414.0"></text>
</g>
<g>
<title>LogTagSet::label(char*, unsigned long, char const*) const (1 samples, 0.15%)</title><rect x="1186.5" y="387.0" width="1.7" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1189.5" y="398.0"></text>
</g>
<g>
<title>G1Policy::record_collection_pause_end(double, unsigned long, unsigned long) (1 samples, 0.15%)</title><rect x="1188.2" y="515.0" width="1.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1191.2" y="526.0"></text>
</g>
<g>
<title>G1Policy::young_list_target_lengths(unsigned long) const (1 samples, 0.15%)</title><rect x="1188.2" y="499.0" width="1.8" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1191.2" y="510.0"></text>
</g>
<g>
<title>G1Policy::calculate_young_list_target_length(unsigned long, unsigned int, unsigned int, unsigned int) const [clone .part.44] (1 samples, 0.15%)</title><rect x="1188.2" y="483.0" width="1.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1191.2" y="494.0"></text>
</g>
</g>
</svg>
