<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0" y="0" width="100%" height="100%" fill="rgb(240,240,220)"/>
<text id="title" x="600" y="24">Flame Graph</text>
<text id="details" x="10" y="693"> </text>
<text id="unzoom" x="10" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090" y="24">Search</text>
<text id="matched" x="1090" y="693"> </text>
<g id="frames">
<g>
<title>all (422 samples, 100.00%)</title><rect x="10.0" y="659.0" width="1180.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="13.0" y="670.0">all</text>
</g>
<g>
<title>java/lang/Thread.run (2 samples, 0.47%)</title><rect x="10.0" y="643.0" width="5.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="13.0" y="654.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor$Worker.run (2 samples, 0.47%)</title><rect x="10.0" y="627.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="638.0"></text>
</g>
<g>
<title>java/util/concurrent/ThreadPoolExecutor.runWorker (2 samples, 0.47%)</title><rect x="10.0" y="611.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="622.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run (2 samples, 0.47%)</title><rect x="10.0" y="595.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="606.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (2 samples, 0.47%)</title><rect x="10.0" y="579.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="13.0" y="590.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler$$Lambda$92/1886071647.run (2 samples, 0.47%)</title><rect x="10.0" y="563.0" width="5.6" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="574.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.lambda$run$0 (2 samples, 0.47%)</title><rect x="10.0" y="547.0" width="5.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="13.0" y="558.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport$ConnectionHandler.run0 (2 samples, 0.47%)</title><rect x="10.0" y="531.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="13.0" y="542.0"></text>
</g>
<g>
<title>sun/rmi/transport/tcp/TCPTransport.handleMessages (2 samples, 0.47%)</title><rect x="10.0" y="515.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="13.0" y="526.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.serviceCall (2 samples, 0.47%)</title><rect x="10.0" y="499.0" width="5.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="13.0" y="510.0"></text>
</g>
<g>
<title>java/security/AccessController.doPrivileged (1 samples, 0.24%)</title><rect x="10.0" y="483.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="13.0" y="494.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1 samples, 0.24%)</title><rect x="10.0" y="467.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="13.0" y="478.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport$1.run (1 samples, 0.24%)</title><rect x="10.0" y="451.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="13.0" y="462.0"></text>
</g>
<g>
<title>sun/rmi/server/UnicastServerRef.dispatch (1 samples, 0.24%)</title><rect x="10.0" y="435.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="13.0" y="446.0"></text>
</g>
<g>
<title>sun/rmi/transport/StreamRemoteCall.releaseOutputStream (1 samples, 0.24%)</title><rect x="10.0" y="419.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="13.0" y="430.0"></text>
</g>
<g>
<title>sun/rmi/transport/ConnectionOutputStream.done (1 samples, 0.24%)</title><rect x="10.0" y="403.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="13.0" y="414.0"></text>
</g>
<g>
<title>sun/rmi/transport/Transport.setContextClassLoader (1 samples, 0.24%)</title><rect x="12.8" y="483.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="15.8" y="494.0"></text>
</g>
<g>
<title>one/nio/server/SelectorThread.run (410 samples, 97.16%)</title><rect x="15.6" y="643.0" width="1146.4" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="18.6" y="654.0">one/nio/server/SelectorThread.run</text>
</g>
<g>
<title>one/nio/net/NativeSelector.select (17 samples, 4.03%)</title><rect x="18.4" y="627.0" width="47.5" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="21.4" y="638.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSelector.epollWait (17 samples, 4.03%)</title><rect x="18.4" y="611.0" width="47.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="21.4" y="622.0">one/..</text>
</g>
<g>
<title>/usr/lib/x86_64-linux-gnu/libc-2.31.so (1 samples, 0.24%)</title><rect x="18.4" y="595.0" width="2.8" height="15" fill="#e86363" rx="2" ry="2"/>
<text x="21.4" y="606.0"></text>
</g>
<g>
<title>clock_gettime (2 samples, 0.47%)</title><rect x="21.2" y="595.0" width="5.6" height="15" fill="#e55f5f" rx="2" ry="2"/>
<text x="24.2" y="606.0"></text>
</g>
<g>
<title>epoll_wait (14 samples, 3.32%)</title><rect x="26.8" y="595.0" width="39.1" height="15" fill="#f97a7a" rx="2" ry="2"/>
<text x="29.8" y="606.0">epo..</text>
</g>
<g>
<title>one/nio/net/Session.process (392 samples, 92.89%)</title><rect x="65.9" y="627.0" width="1096.1" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="68.9" y="638.0">one/nio/net/Session.process</text>
</g>
<g>
<title>one/nio/http/HttpSession.processRead (392 samples, 92.89%)</title><rect x="65.9" y="611.0" width="1096.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="68.9" y="622.0">one/nio/http/HttpSession.processRead</text>
</g>
<g>
<title>one/nio/http/HttpSession.processHttpBuffer (382 samples, 90.52%)</title><rect x="65.9" y="595.0" width="1068.2" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="68.9" y="606.0">one/nio/http/HttpSession.processHttpBuffer</text>
</g>
<g>
<title>one/nio/http/HttpSession.handleParsedRequest (374 samples, 88.63%)</title><rect x="74.3" y="579.0" width="1045.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="77.3" y="590.0">one/nio/http/HttpSession.handleParsedRequest</text>
</g>
<g>
<title>one/nio/http/HttpServer.handleRequest (374 samples, 88.63%)</title><rect x="74.3" y="563.0" width="1045.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="77.3" y="574.0">one/nio/http/HttpServer.handleRequest</text>
</g>
<g>
<title>RequestHandler0_get.handleRequest (373 samples, 88.39%)</title><rect x="74.3" y="547.0" width="1043.0" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="77.3" y="558.0">RequestHandler0_get.handleRequest</text>
</g>
<g>
<title>one/nio/http/HttpSession.sendResponse (33 samples, 7.82%)</title><rect x="79.9" y="531.0" width="92.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="82.9" y="542.0">one/nio/htt..</text>
</g>
<g>
<title>java/lang/String.equalsIgnoreCase (3 samples, 0.71%)</title><rect x="79.9" y="515.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="82.9" y="526.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (3 samples, 0.71%)</title><rect x="79.9" y="499.0" width="8.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="82.9" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (3 samples, 0.71%)</title><rect x="79.9" y="483.0" width="8.4" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="82.9" y="494.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="82.7" y="467.0" width="2.8" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="85.7" y="478.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="85.5" y="467.0" width="2.8" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="88.5" y="478.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="85.5" y="451.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="88.5" y="462.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="85.5" y="435.0" width="2.8" height="15" fill="#fe8080" rx="2" ry="2"/>
<text x="88.5" y="446.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.writeResponse (29 samples, 6.87%)</title><rect x="88.3" y="515.0" width="81.1" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="91.3" y="526.0">one/nio/h..</text>
</g>
<g>
<title>one/nio/http/Response.toBytes (11 samples, 2.61%)</title><rect x="88.3" y="499.0" width="30.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="91.3" y="510.0">on..</text>
</g>
<g>
<title>one/nio/util/ByteArrayBuilder.append (7 samples, 1.66%)</title><rect x="99.5" y="483.0" width="19.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="102.5" y="494.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.length (7 samples, 1.66%)</title><rect x="99.5" y="467.0" width="19.6" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="102.5" y="478.0"></text>
</g>
<g>
<title>java/lang/String.charAt (7 samples, 1.66%)</title><rect x="99.5" y="451.0" width="19.6" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="102.5" y="462.0"></text>
</g>
<g>
<title>jbyte_disjoint_arraycopy (1 samples, 0.24%)</title><rect x="116.3" y="435.0" width="2.8" height="15" fill="#fb7d7d" rx="2" ry="2"/>
<text x="119.3" y="446.0"></text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 4.27%)</title><rect x="119.1" y="499.0" width="50.3" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="122.1" y="510.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session.write (18 samples, 4.27%)</title><rect x="119.1" y="483.0" width="50.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="122.1" y="494.0">one/n..</text>
</g>
<g>
<title>one/nio/net/Session$ArrayQueueItem.write (16 samples, 3.79%)</title><rect x="124.6" y="467.0" width="44.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="127.6" y="478.0">one/..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.write (16 samples, 3.79%)</title><rect x="124.6" y="451.0" width="44.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="127.6" y="462.0">one/..</text>
</g>
<g>
<title>__send (14 samples, 3.32%)</title><rect x="124.6" y="435.0" width="39.2" height="15" fill="#e35c5c" rx="2" ry="2"/>
<text x="127.6" y="446.0">__s..</text>
</g>
<g>
<title>jni_GetByteArrayRegion (2 samples, 0.47%)</title><rect x="163.8" y="435.0" width="5.6" height="15" fill="#fd7f7f" rx="2" ry="2"/>
<text x="166.8" y="446.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.24%)</title><rect x="169.4" y="515.0" width="2.8" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="172.4" y="526.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.24%)</title><rect x="172.2" y="531.0" width="2.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="175.2" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getParameter (1 samples, 0.24%)</title><rect x="172.2" y="515.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="175.2" y="526.0"></text>
</g>
<g>
<title>jbyte_arraycopy (1 samples, 0.24%)</title><rect x="172.2" y="499.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="175.2" y="510.0"></text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.get (337 samples, 79.86%)</title><rect x="175.0" y="531.0" width="942.3" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="178.0" y="542.0">ru/mail/polis/service/boriskin/NewService.get</text>
</g>
<g>
<title>ru/mail/polis/service/boriskin/NewService.operation (337 samples, 79.86%)</title><rect x="175.0" y="515.0" width="942.3" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="178.0" y="526.0">ru/mail/polis/service/boriskin/NewService.operation</text>
</g>
<g>
<title>java/lang/String.getBytes (1 samples, 0.24%)</title><rect x="180.6" y="499.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.6" y="510.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encode (1 samples, 0.24%)</title><rect x="180.6" y="483.0" width="2.8" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="183.6" y="494.0"></text>
</g>
<g>
<title>java/lang/StringCoding.encodeUTF8 (1 samples, 0.24%)</title><rect x="180.6" y="467.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="183.6" y="478.0"></text>
</g>
<g>
<title>one/nio/http/Request.getRequiredParameter (1 samples, 0.24%)</title><rect x="180.6" y="451.0" width="2.8" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="183.6" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/DAO.get (334 samples, 79.15%)</title><rect x="183.4" y="499.0" width="933.9" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.4" y="510.0">ru/mail/polis/dao/DAO.get</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (22 samples, 5.21%)</title><rect x="183.4" y="483.0" width="61.5" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="186.4" y="494.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (22 samples, 5.21%)</title><rect x="183.4" y="467.0" width="61.5" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="186.4" y="478.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (22 samples, 5.21%)</title><rect x="183.4" y="451.0" width="61.5" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="186.4" y="462.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (22 samples, 5.21%)</title><rect x="183.4" y="435.0" width="61.5" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="186.4" y="446.0">com/go..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (22 samples, 5.21%)</title><rect x="183.4" y="419.0" width="61.5" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="186.4" y="430.0">ru/mai..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 4.74%)</title><rect x="183.4" y="403.0" width="55.9" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="186.4" y="414.0">com/g..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (13 samples, 3.08%)</title><rect x="183.4" y="387.0" width="36.3" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="186.4" y="398.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (13 samples, 3.08%)</title><rect x="183.4" y="371.0" width="36.3" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="186.4" y="382.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (13 samples, 3.08%)</title><rect x="183.4" y="355.0" width="36.3" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="186.4" y="366.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (12 samples, 2.84%)</title><rect x="186.2" y="339.0" width="33.5" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="189.2" y="350.0">co..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (11 samples, 2.61%)</title><rect x="189.0" y="323.0" width="30.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="192.0" y="334.0">co..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/899785279.compare (11 samples, 2.61%)</title><rect x="189.0" y="307.0" width="30.7" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="192.0" y="318.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (11 samples, 2.61%)</title><rect x="189.0" y="291.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.0" y="302.0">ja..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1730347369.compare (11 samples, 2.61%)</title><rect x="189.0" y="275.0" width="30.7" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="192.0" y="286.0">ja..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (11 samples, 2.61%)</title><rect x="189.0" y="259.0" width="30.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="192.0" y="270.0">ja..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 1.18%)</title><rect x="189.0" y="243.0" width="13.9" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="192.0" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (5 samples, 1.18%)</title><rect x="189.0" y="227.0" width="13.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="192.0" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (5 samples, 1.18%)</title><rect x="189.0" y="211.0" width="13.9" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="192.0" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (1 samples, 0.24%)</title><rect x="197.3" y="195.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="200.3" y="206.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.24%)</title><rect x="200.1" y="195.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="203.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1820352028.apply (6 samples, 1.42%)</title><rect x="202.9" y="243.0" width="16.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="205.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (6 samples, 1.42%)</title><rect x="202.9" y="227.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="205.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (4 samples, 0.95%)</title><rect x="202.9" y="211.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (4 samples, 0.95%)</title><rect x="202.9" y="195.0" width="11.2" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="205.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="179.0" width="11.2" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="205.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="163.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="205.9" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="147.0" width="11.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="205.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="131.0" width="11.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="205.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="115.0" width="11.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="205.9" y="126.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (4 samples, 0.95%)</title><rect x="202.9" y="99.0" width="11.2" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="205.9" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (3 samples, 0.71%)</title><rect x="205.7" y="83.0" width="8.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="208.7" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (2 samples, 0.47%)</title><rect x="208.5" y="67.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="211.5" y="78.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.position (2 samples, 0.47%)</title><rect x="208.5" y="51.0" width="5.6" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="211.5" y="62.0"></text>
</g>
<g>
<title>java/nio/Buffer.position (2 samples, 0.47%)</title><rect x="208.5" y="35.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="211.5" y="46.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (2 samples, 0.47%)</title><rect x="214.1" y="211.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="217.1" y="222.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 1.66%)</title><rect x="219.7" y="387.0" width="19.6" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="222.7" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 1.66%)</title><rect x="219.7" y="371.0" width="19.6" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="222.7" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (7 samples, 1.66%)</title><rect x="219.7" y="355.0" width="19.6" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="222.7" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (7 samples, 1.66%)</title><rect x="219.7" y="339.0" width="19.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.7" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 1.66%)</title><rect x="219.7" y="323.0" width="19.6" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="222.7" y="334.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (7 samples, 1.66%)</title><rect x="219.7" y="307.0" width="19.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="222.7" y="318.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$PeekingImpl.peek (1 samples, 0.24%)</title><rect x="219.7" y="291.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="222.7" y="302.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.24%)</title><rect x="219.7" y="275.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="222.7" y="286.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.24%)</title><rect x="219.7" y="259.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="222.7" y="270.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapEntryIterator.next (1 samples, 0.24%)</title><rect x="219.7" y="243.0" width="2.8" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="222.7" y="254.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap$SubMapIterator.nextEntry (1 samples, 0.24%)</title><rect x="219.7" y="227.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="222.7" y="238.0"></text>
</g>
<g>
<title>java/util/TreeMap.successor (1 samples, 0.24%)</title><rect x="219.7" y="211.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="222.7" y="222.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="219.7" y="195.0" width="2.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="222.7" y="206.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/899785279.compare (6 samples, 1.42%)</title><rect x="222.5" y="291.0" width="16.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 1.42%)</title><rect x="222.5" y="275.0" width="16.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="225.5" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1730347369.compare (6 samples, 1.42%)</title><rect x="222.5" y="259.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="225.5" y="270.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 1.42%)</title><rect x="222.5" y="243.0" width="16.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="225.5" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.95%)</title><rect x="222.5" y="227.0" width="11.2" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="225.5" y="238.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.95%)</title><rect x="222.5" y="211.0" width="11.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="225.5" y="222.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (4 samples, 0.95%)</title><rect x="222.5" y="195.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="225.5" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (2 samples, 0.47%)</title><rect x="222.5" y="179.0" width="5.6" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="225.5" y="190.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (1 samples, 0.24%)</title><rect x="228.1" y="179.0" width="2.8" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="231.1" y="190.0"></text>
</g>
<g>
<title>vtable stub (1 samples, 0.24%)</title><rect x="230.9" y="179.0" width="2.8" height="15" fill="#e66060" rx="2" ry="2"/>
<text x="233.9" y="190.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1820352028.apply (2 samples, 0.47%)</title><rect x="233.7" y="227.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="236.7" y="238.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (2 samples, 0.47%)</title><rect x="233.7" y="211.0" width="5.6" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.7" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.24%)</title><rect x="233.7" y="195.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="236.7" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.24%)</title><rect x="233.7" y="179.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="236.7" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.24%)</title><rect x="233.7" y="163.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="236.7" y="174.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="233.7" y="147.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="236.7" y="158.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="233.7" y="131.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="236.7" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="233.7" y="115.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="236.7" y="126.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="233.7" y="99.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="236.7" y="110.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.24%)</title><rect x="236.5" y="195.0" width="2.8" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="239.5" y="206.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.24%)</title><rect x="239.3" y="403.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="242.3" y="414.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (1 samples, 0.24%)</title><rect x="239.3" y="387.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="242.3" y="398.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO$$Lambda$105/787256031.apply (1 samples, 0.24%)</title><rect x="242.1" y="403.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="245.1" y="414.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (1 samples, 0.24%)</title><rect x="242.1" y="387.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="245.1" y="398.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.24%)</title><rect x="242.1" y="371.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="245.1" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.equals (1 samples, 0.24%)</title><rect x="242.1" y="355.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="245.1" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.next (1 samples, 0.24%)</title><rect x="244.9" y="483.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="247.9" y="494.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$6.transform (1 samples, 0.24%)</title><rect x="244.9" y="467.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="247.9" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable$$Lambda$54/1868988673.apply (1 samples, 0.24%)</title><rect x="244.9" y="451.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="247.9" y="462.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.lambda$iterator$0 (1 samples, 0.24%)</title><rect x="244.9" y="435.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="247.9" y="446.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterator (311 samples, 73.70%)</title><rect x="247.7" y="483.0" width="869.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="250.7" y="494.0">ru/mail/polis/dao/boriskin/NewDAO.iterator</text>
</g>
<g>
<title>com/google/common/collect/Iterators.filter (2 samples, 0.47%)</title><rect x="247.7" y="467.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="250.7" y="478.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells (309 samples, 73.22%)</title><rect x="253.3" y="467.0" width="864.0" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="256.3" y="478.0">ru/mail/polis/dao/boriskin/NewDAO.iterateThroughTableCells</text>
</g>
<g>
<title>com/google/common/collect/Iterators.mergeSorted (32 samples, 7.58%)</title><rect x="261.7" y="451.0" width="89.4" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="264.7" y="462.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.&lt;init&gt; (32 samples, 7.58%)</title><rect x="261.7" y="435.0" width="89.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="264.7" y="446.0">com/google..</text>
</g>
<g>
<title>com/google/common/collect/TransformedIterator.hasNext (3 samples, 0.71%)</title><rect x="270.0" y="419.0" width="8.4" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="273.0" y="430.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.hasNext (3 samples, 0.71%)</title><rect x="270.0" y="403.0" width="8.4" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="273.0" y="414.0"></text>
</g>
<g>
<title>com/google/common/collect/AbstractIterator.tryToComputeNext (3 samples, 0.71%)</title><rect x="270.0" y="387.0" width="8.4" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="273.0" y="398.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$5.computeNext (3 samples, 0.71%)</title><rect x="270.0" y="371.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="273.0" y="382.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.next (3 samples, 0.71%)</title><rect x="270.0" y="355.0" width="8.4" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="273.0" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.hasNext (3 samples, 0.71%)</title><rect x="270.0" y="339.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="273.0" y="350.0"></text>
</g>
<g>
<title>jint_disjoint_arraycopy (2 samples, 0.47%)</title><rect x="272.8" y="323.0" width="5.6" height="15" fill="#f47373" rx="2" ry="2"/>
<text x="275.8" y="334.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (26 samples, 6.16%)</title><rect x="278.4" y="419.0" width="72.7" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="281.4" y="430.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.offer (26 samples, 6.16%)</title><rect x="278.4" y="403.0" width="72.7" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="281.4" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (26 samples, 6.16%)</title><rect x="278.4" y="387.0" width="72.7" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="281.4" y="398.0">java/uti..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (26 samples, 6.16%)</title><rect x="278.4" y="371.0" width="72.7" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="281.4" y="382.0">java/uti..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22 samples, 5.21%)</title><rect x="289.6" y="355.0" width="61.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.6" y="366.0">com/go..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (22 samples, 5.21%)</title><rect x="289.6" y="339.0" width="61.5" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="292.6" y="350.0">com/go..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/899785279.compare (22 samples, 5.21%)</title><rect x="289.6" y="323.0" width="61.5" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="292.6" y="334.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (22 samples, 5.21%)</title><rect x="289.6" y="307.0" width="61.5" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="292.6" y="318.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1730347369.compare (22 samples, 5.21%)</title><rect x="289.6" y="291.0" width="61.5" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="292.6" y="302.0">java/u..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (22 samples, 5.21%)</title><rect x="289.6" y="275.0" width="61.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="292.6" y="286.0">java/u..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.66%)</title><rect x="289.6" y="259.0" width="19.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="292.6" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (7 samples, 1.66%)</title><rect x="289.6" y="243.0" width="19.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="292.6" y="254.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (7 samples, 1.66%)</title><rect x="289.6" y="227.0" width="19.6" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="292.6" y="238.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (2 samples, 0.47%)</title><rect x="298.0" y="211.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="301.0" y="222.0"></text>
</g>
<g>
<title>vtable stub (2 samples, 0.47%)</title><rect x="303.6" y="211.0" width="5.6" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="306.6" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1820352028.apply (15 samples, 3.55%)</title><rect x="309.2" y="259.0" width="41.9" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="270.0">ru/..</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (15 samples, 3.55%)</title><rect x="309.2" y="243.0" width="41.9" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="312.2" y="254.0">ru/..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (2 samples, 0.47%)</title><rect x="309.2" y="227.0" width="5.6" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="312.2" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (2 samples, 0.47%)</title><rect x="309.2" y="211.0" width="5.6" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="312.2" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="195.0" width="5.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="312.2" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="179.0" width="5.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="312.2" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="163.0" width="5.6" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="312.2" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="147.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="312.2" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="131.0" width="5.6" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="312.2" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="309.2" y="115.0" width="5.6" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="312.2" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (13 samples, 3.08%)</title><rect x="314.8" y="227.0" width="36.3" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="317.8" y="238.0">jav..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters.collapseEquals (20 samples, 4.74%)</title><rect x="351.1" y="451.0" width="56.0" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="354.1" y="462.0">ru/ma..</text>
</g>
<g>
<title>ru/mail/polis/dao/Iters$CollapseEqualsIterator.&lt;init&gt; (20 samples, 4.74%)</title><rect x="351.1" y="435.0" width="56.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="354.1" y="446.0">ru/ma..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator.next (20 samples, 4.74%)</title><rect x="351.1" y="419.0" width="56.0" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="354.1" y="430.0">com/g..</text>
</g>
<g>
<title>java/util/AbstractQueue.remove (13 samples, 3.08%)</title><rect x="351.1" y="403.0" width="36.4" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="354.1" y="414.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.poll (13 samples, 3.08%)</title><rect x="351.1" y="387.0" width="36.4" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="354.1" y="398.0">jav..</text>
</g>
<g>
<title>java/util/PriorityQueue.siftDownUsingComparator (13 samples, 3.08%)</title><rect x="351.1" y="371.0" width="36.4" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.1" y="382.0">jav..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 3.08%)</title><rect x="351.1" y="355.0" width="36.4" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="354.1" y="366.0">com..</text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (13 samples, 3.08%)</title><rect x="351.1" y="339.0" width="36.4" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="354.1" y="350.0">com..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/899785279.compare (13 samples, 3.08%)</title><rect x="351.1" y="323.0" width="36.4" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="354.1" y="334.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (13 samples, 3.08%)</title><rect x="351.1" y="307.0" width="36.4" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="354.1" y="318.0">jav..</text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1730347369.compare (13 samples, 3.08%)</title><rect x="351.1" y="291.0" width="36.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="354.1" y="302.0">jav..</text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (13 samples, 3.08%)</title><rect x="351.1" y="275.0" width="36.4" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="354.1" y="286.0">jav..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 2.13%)</title><rect x="351.1" y="259.0" width="25.2" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="354.1" y="270.0">j..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (9 samples, 2.13%)</title><rect x="351.1" y="243.0" width="25.2" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="354.1" y="254.0">j..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (9 samples, 2.13%)</title><rect x="351.1" y="227.0" width="25.2" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="354.1" y="238.0">j..</text>
</g>
<g>
<title>vtable stub (1 samples, 0.24%)</title><rect x="373.5" y="211.0" width="2.8" height="15" fill="#f77777" rx="2" ry="2"/>
<text x="376.5" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1820352028.apply (4 samples, 0.95%)</title><rect x="376.3" y="259.0" width="11.2" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="379.3" y="270.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (4 samples, 0.95%)</title><rect x="376.3" y="243.0" width="11.2" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="379.3" y="254.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (3 samples, 0.71%)</title><rect x="376.3" y="227.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.3" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (3 samples, 0.71%)</title><rect x="376.3" y="211.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (3 samples, 0.71%)</title><rect x="376.3" y="195.0" width="8.4" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.3" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (3 samples, 0.71%)</title><rect x="376.3" y="179.0" width="8.4" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="379.3" y="190.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (3 samples, 0.71%)</title><rect x="376.3" y="163.0" width="8.4" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="379.3" y="174.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.71%)</title><rect x="376.3" y="147.0" width="8.4" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.3" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (3 samples, 0.71%)</title><rect x="376.3" y="131.0" width="8.4" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="379.3" y="142.0"></text>
</g>
<g>
<title>java/nio/Buffer.&lt;init&gt; (2 samples, 0.47%)</title><rect x="376.3" y="115.0" width="5.6" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="379.3" y="126.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.24%)</title><rect x="376.3" y="99.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="379.3" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.24%)</title><rect x="379.1" y="99.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="382.1" y="110.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.limit (1 samples, 0.24%)</title><rect x="379.1" y="83.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="382.1" y="94.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.position (1 samples, 0.24%)</title><rect x="381.9" y="115.0" width="2.8" height="15" fill="#54e554" rx="2" ry="2"/>
<text x="384.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (1 samples, 0.24%)</title><rect x="384.7" y="227.0" width="2.8" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="387.7" y="238.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.add (7 samples, 1.66%)</title><rect x="387.5" y="403.0" width="19.6" height="15" fill="#6afb6a" rx="2" ry="2"/>
<text x="390.5" y="414.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.offer (7 samples, 1.66%)</title><rect x="387.5" y="387.0" width="19.6" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="390.5" y="398.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.grow (1 samples, 0.24%)</title><rect x="387.5" y="371.0" width="2.8" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="390.5" y="382.0"></text>
</g>
<g>
<title>java/util/Arrays.copyOf (1 samples, 0.24%)</title><rect x="387.5" y="355.0" width="2.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="390.5" y="366.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUp (6 samples, 1.42%)</title><rect x="390.3" y="371.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.3" y="382.0"></text>
</g>
<g>
<title>java/util/PriorityQueue.siftUpUsingComparator (6 samples, 1.42%)</title><rect x="390.3" y="355.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.3" y="366.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 1.42%)</title><rect x="390.3" y="339.0" width="16.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="393.3" y="350.0"></text>
</g>
<g>
<title>com/google/common/collect/Iterators$MergingIterator$1.compare (6 samples, 1.42%)</title><rect x="390.3" y="323.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.3" y="334.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$58/899785279.compare (6 samples, 1.42%)</title><rect x="390.3" y="307.0" width="16.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="393.3" y="318.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$thenComparing$36697e65$1 (6 samples, 1.42%)</title><rect x="390.3" y="291.0" width="16.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.3" y="302.0"></text>
</g>
<g>
<title>java/util/Comparator$$Lambda$56/1730347369.compare (6 samples, 1.42%)</title><rect x="390.3" y="275.0" width="16.8" height="15" fill="#52e352" rx="2" ry="2"/>
<text x="393.3" y="286.0"></text>
</g>
<g>
<title>java/util/Comparator.lambda$comparing$77a9974f$1 (6 samples, 1.42%)</title><rect x="390.3" y="259.0" width="16.8" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="393.3" y="270.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.47%)</title><rect x="390.3" y="243.0" width="5.6" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="393.3" y="254.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (2 samples, 0.47%)</title><rect x="390.3" y="227.0" width="5.6" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="393.3" y="238.0"></text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (2 samples, 0.47%)</title><rect x="390.3" y="211.0" width="5.6" height="15" fill="#5ff05f" rx="2" ry="2"/>
<text x="393.3" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (1 samples, 0.24%)</title><rect x="393.1" y="195.0" width="2.8" height="15" fill="#6dfe6d" rx="2" ry="2"/>
<text x="396.1" y="206.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell$$Lambda$55/1820352028.apply (4 samples, 0.95%)</title><rect x="395.9" y="243.0" width="11.2" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="398.9" y="254.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/TableCell.getKey (4 samples, 0.95%)</title><rect x="395.9" y="227.0" width="11.2" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="398.9" y="238.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.asReadOnlyBuffer (1 samples, 0.24%)</title><rect x="395.9" y="211.0" width="2.8" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="398.9" y="222.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (1 samples, 0.24%)</title><rect x="395.9" y="195.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="398.9" y="206.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.&lt;init&gt; (1 samples, 0.24%)</title><rect x="395.9" y="179.0" width="2.8" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="398.9" y="190.0"></text>
</g>
<g>
<title>java/nio/DirectByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="395.9" y="163.0" width="2.8" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="398.9" y="174.0"></text>
</g>
<g>
<title>java/nio/MappedByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="395.9" y="147.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="398.9" y="158.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="395.9" y="131.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="398.9" y="142.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.&lt;init&gt; (1 samples, 0.24%)</title><rect x="395.9" y="115.0" width="2.8" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="398.9" y="126.0"></text>
</g>
<g>
<title>java/nio/HeapByteBuffer.asReadOnlyBuffer (3 samples, 0.71%)</title><rect x="398.7" y="211.0" width="8.4" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="401.7" y="222.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/MemTable.iterator (33 samples, 7.82%)</title><rect x="407.1" y="451.0" width="92.2" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="410.1" y="462.0">ru/mail/pol..</text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap$AscendingEntrySetView.iterator (27 samples, 6.40%)</title><rect x="407.1" y="435.0" width="75.5" height="15" fill="#50e150" rx="2" ry="2"/>
<text x="410.1" y="446.0">java/uti..</text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.absLowest (27 samples, 6.40%)</title><rect x="407.1" y="419.0" width="75.5" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="410.1" y="430.0">java/uti..</text>
</g>
<g>
<title>java/util/TreeMap.getCeilingEntry (27 samples, 6.40%)</title><rect x="407.1" y="403.0" width="75.5" height="15" fill="#61f261" rx="2" ry="2"/>
<text x="410.1" y="414.0">java/uti..</text>
</g>
<g>
<title>java/util/TreeMap.compare (24 samples, 5.69%)</title><rect x="415.5" y="387.0" width="67.1" height="15" fill="#68f968" rx="2" ry="2"/>
<text x="418.5" y="398.0">java/ut..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (16 samples, 3.79%)</title><rect x="437.8" y="371.0" width="44.8" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="440.8" y="382.0">java..</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (14 samples, 3.32%)</title><rect x="443.4" y="355.0" width="39.2" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="446.4" y="366.0">jav..</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (14 samples, 3.32%)</title><rect x="443.4" y="339.0" width="39.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="446.4" y="350.0">jav..</text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (4 samples, 0.95%)</title><rect x="471.4" y="323.0" width="11.2" height="15" fill="#5eef5e" rx="2" ry="2"/>
<text x="474.4" y="334.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (6 samples, 1.42%)</title><rect x="482.6" y="435.0" width="16.7" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="485.6" y="446.0"></text>
</g>
<g>
<title>java/util/TreeMap.tailMap (6 samples, 1.42%)</title><rect x="482.6" y="419.0" width="16.7" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="485.6" y="430.0"></text>
</g>
<g>
<title>java/util/TreeMap$AscendingSubMap.&lt;init&gt; (6 samples, 1.42%)</title><rect x="482.6" y="403.0" width="16.7" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="485.6" y="414.0"></text>
</g>
<g>
<title>java/util/TreeMap$NavigableSubMap.&lt;init&gt; (6 samples, 1.42%)</title><rect x="482.6" y="387.0" width="16.7" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="485.6" y="398.0"></text>
</g>
<g>
<title>java/util/TreeMap.compare (6 samples, 1.42%)</title><rect x="482.6" y="371.0" width="16.7" height="15" fill="#51e251" rx="2" ry="2"/>
<text x="485.6" y="382.0"></text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (4 samples, 0.95%)</title><rect x="488.2" y="355.0" width="11.1" height="15" fill="#5ced5c" rx="2" ry="2"/>
<text x="491.2" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.iterator (221 samples, 52.37%)</title><rect x="499.3" y="451.0" width="618.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.3" y="462.0">ru/mail/polis/dao/boriskin/SortedStringTable.iterator</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt; (221 samples, 52.37%)</title><rect x="499.3" y="435.0" width="618.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="502.3" y="446.0">ru/mail/polis/dao/boriskin/SortedStringTable$1.&lt;init&gt;</text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findNext (221 samples, 52.37%)</title><rect x="499.3" y="419.0" width="618.0" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="502.3" y="430.0">ru/mail/polis/dao/boriskin/SortedStringTable.findNext</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (107 samples, 25.36%)</title><rect x="546.9" y="403.0" width="299.2" height="15" fill="#5aeb5a" rx="2" ry="2"/>
<text x="549.9" y="414.0">java/nio/ByteBuffer.compareTo</text>
</g>
<g>
<title>java/nio/ByteBuffer.compareTo (107 samples, 25.36%)</title><rect x="546.9" y="387.0" width="299.2" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="549.9" y="398.0">java/nio/ByteBuffer.compareTo</text>
</g>
<g>
<title>java/nio/BufferMismatch.mismatch (101 samples, 23.93%)</title><rect x="549.7" y="371.0" width="282.4" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="552.7" y="382.0">java/nio/BufferMismatch.mismatch</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (9 samples, 2.13%)</title><rect x="700.7" y="355.0" width="25.1" height="15" fill="#62f362" rx="2" ry="2"/>
<text x="703.7" y="366.0">j..</text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (3 samples, 0.71%)</title><rect x="717.4" y="339.0" width="8.4" height="15" fill="#65f665" rx="2" ry="2"/>
<text x="720.4" y="350.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.base (5 samples, 1.18%)</title><rect x="725.8" y="355.0" width="14.0" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="728.8" y="366.0"></text>
</g>
<g>
<title>jdk/internal/util/ArraysSupport.vectorizedMismatch (20 samples, 4.74%)</title><rect x="739.8" y="355.0" width="55.9" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="742.8" y="366.0">jdk/i..</text>
</g>
<g>
<title>vtable stub (13 samples, 3.08%)</title><rect x="795.7" y="355.0" width="36.4" height="15" fill="#e76262" rx="2" ry="2"/>
<text x="798.7" y="366.0">vta..</text>
</g>
<g>
<title>java/nio/DirectByteBuffer.get (5 samples, 1.18%)</title><rect x="832.1" y="371.0" width="14.0" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="835.1" y="382.0"></text>
</g>
<g>
<title>java/nio/Buffer.checkIndex (5 samples, 1.18%)</title><rect x="832.1" y="355.0" width="14.0" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="835.1" y="366.0"></text>
</g>
<g>
<title>ru/mail/polis/dao/boriskin/SortedStringTable.findK (97 samples, 22.99%)</title><rect x="846.1" y="403.0" width="271.2" height="15" fill="#63f463" rx="2" ry="2"/>
<text x="849.1" y="414.0">ru/mail/polis/dao/boriskin/SortedStr..</text>
</g>
<g>
<title>java/nio/DirectByteBufferR.duplicate (90 samples, 21.33%)</title><rect x="860.0" y="387.0" width="251.7" height="15" fill="#57e857" rx="2" ry="2"/>
<text x="863.0" y="398.0">java/nio/DirectByteBufferR.duplic..</text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.47%)</title><rect x="1106.1" y="371.0" width="5.6" height="15" fill="#d7d741" rx="2" ry="2"/>
<text x="1109.1" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.47%)</title><rect x="1106.1" y="355.0" width="5.6" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.1" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.47%)</title><rect x="1106.1" y="339.0" width="5.6" height="15" fill="#cfcf3e" rx="2" ry="2"/>
<text x="1109.1" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (1 samples, 0.24%)</title><rect x="1106.1" y="323.0" width="2.8" height="15" fill="#e2e244" rx="2" ry="2"/>
<text x="1109.1" y="334.0"></text>
</g>
<g>
<title>MemAllocator::allocate_inside_tlab_slow(MemAllocator::Allocation&amp;) const (1 samples, 0.24%)</title><rect x="1106.1" y="307.0" width="2.8" height="15" fill="#dcdc42" rx="2" ry="2"/>
<text x="1109.1" y="318.0"></text>
</g>
<g>
<title>G1CollectedHeap::allocate_new_tlab(unsigned long, unsigned long, unsigned long*) (1 samples, 0.24%)</title><rect x="1106.1" y="291.0" width="2.8" height="15" fill="#caca3c" rx="2" ry="2"/>
<text x="1109.1" y="302.0"></text>
</g>
<g>
<title>G1CollectedHeap::attempt_allocation_slow(unsigned long) (1 samples, 0.24%)</title><rect x="1106.1" y="275.0" width="2.8" height="15" fill="#cbcb3d" rx="2" ry="2"/>
<text x="1109.1" y="286.0"></text>
</g>
<g>
<title>G1AllocRegion::new_alloc_region_and_allocate(unsigned long, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="259.0" width="2.8" height="15" fill="#d2d23f" rx="2" ry="2"/>
<text x="1109.1" y="270.0"></text>
</g>
<g>
<title>G1CollectedHeap::new_mutator_alloc_region(unsigned long, bool) (1 samples, 0.24%)</title><rect x="1106.1" y="243.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="254.0"></text>
</g>
<g>
<title>MasterFreeRegionListMtSafeChecker::check() (1 samples, 0.24%)</title><rect x="1106.1" y="227.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1109.1" y="238.0"></text>
</g>
<g>
<title>__tls_get_addr (1 samples, 0.24%)</title><rect x="1108.9" y="323.0" width="2.8" height="15" fill="#f47474" rx="2" ry="2"/>
<text x="1111.9" y="334.0"></text>
</g>
<g>
<title>java/nio/DirectByteBufferR.slice (2 samples, 0.47%)</title><rect x="1111.7" y="387.0" width="5.6" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1114.7" y="398.0"></text>
</g>
<g>
<title>OptoRuntime::new_instance_C(Klass*, JavaThread*) (2 samples, 0.47%)</title><rect x="1111.7" y="371.0" width="5.6" height="15" fill="#dfdf43" rx="2" ry="2"/>
<text x="1114.7" y="382.0"></text>
</g>
<g>
<title>InstanceKlass::allocate_instance(Thread*) (2 samples, 0.47%)</title><rect x="1111.7" y="355.0" width="5.6" height="15" fill="#d0d03e" rx="2" ry="2"/>
<text x="1114.7" y="366.0"></text>
</g>
<g>
<title>CollectedHeap::obj_allocate(Klass*, int, Thread*) (2 samples, 0.47%)</title><rect x="1111.7" y="339.0" width="5.6" height="15" fill="#d1d13f" rx="2" ry="2"/>
<text x="1114.7" y="350.0"></text>
</g>
<g>
<title>MemAllocator::allocate() const (2 samples, 0.47%)</title><rect x="1111.7" y="323.0" width="5.6" height="15" fill="#cdcd3d" rx="2" ry="2"/>
<text x="1114.7" y="334.0"></text>
</g>
<g>
<title>AllocTracer::send_allocation_in_new_tlab(Klass*, HeapWord*, unsigned long, unsigned long, Thread*) (1 samples, 0.24%)</title><rect x="1111.7" y="307.0" width="2.8" height="15" fill="#e5e545" rx="2" ry="2"/>
<text x="1114.7" y="318.0"></text>
</g>
<g>
<title>ObjectSampler::is_created() (1 samples, 0.24%)</title><rect x="1111.7" y="291.0" width="2.8" height="15" fill="#c8c83c" rx="2" ry="2"/>
<text x="1114.7" y="302.0"></text>
</g>
<g>
<title>MemAllocator::Allocation::notify_allocation_jvmti_sampler() (1 samples, 0.24%)</title><rect x="1114.5" y="307.0" width="2.8" height="15" fill="#e0e044" rx="2" ry="2"/>
<text x="1117.5" y="318.0"></text>
</g>
<g>
<title>one/nio/http/PathMapper.find (1 samples, 0.24%)</title><rect x="1117.3" y="547.0" width="2.8" height="15" fill="#59ea59" rx="2" ry="2"/>
<text x="1120.3" y="558.0"></text>
</g>
<g>
<title>java/util/HashMap.get (1 samples, 0.24%)</title><rect x="1117.3" y="531.0" width="2.8" height="15" fill="#55e655" rx="2" ry="2"/>
<text x="1120.3" y="542.0"></text>
</g>
<g>
<title>java/util/HashMap.hash (1 samples, 0.24%)</title><rect x="1117.3" y="515.0" width="2.8" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1120.3" y="526.0"></text>
</g>
<g>
<title>java/lang/String.hashCode (1 samples, 0.24%)</title><rect x="1117.3" y="499.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1120.3" y="510.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.hashCode (1 samples, 0.24%)</title><rect x="1117.3" y="483.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1120.3" y="494.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.parseRequest (2 samples, 0.47%)</title><rect x="1120.1" y="579.0" width="5.6" height="15" fill="#66f766" rx="2" ry="2"/>
<text x="1123.1" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.24%)</title><rect x="1120.1" y="563.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1123.1" y="574.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.24%)</title><rect x="1120.1" y="547.0" width="2.8" height="15" fill="#53e453" rx="2" ry="2"/>
<text x="1123.1" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.startsWith (1 samples, 0.24%)</title><rect x="1122.9" y="563.0" width="2.8" height="15" fill="#64f564" rx="2" ry="2"/>
<text x="1125.9" y="574.0"></text>
</g>
<g>
<title>one/nio/http/HttpSession.startParsingRequestBody (1 samples, 0.24%)</title><rect x="1125.7" y="579.0" width="2.8" height="15" fill="#5bec5b" rx="2" ry="2"/>
<text x="1128.7" y="590.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.24%)</title><rect x="1125.7" y="563.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1128.7" y="574.0"></text>
</g>
<g>
<title>java/lang/Integer.parseInt (1 samples, 0.24%)</title><rect x="1125.7" y="547.0" width="2.8" height="15" fill="#6cfd6c" rx="2" ry="2"/>
<text x="1128.7" y="558.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.24%)</title><rect x="1125.7" y="531.0" width="2.8" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1128.7" y="542.0"></text>
</g>
<g>
<title>one/nio/http/Request.getHeader (1 samples, 0.24%)</title><rect x="1128.5" y="579.0" width="2.8" height="15" fill="#69fa69" rx="2" ry="2"/>
<text x="1131.5" y="590.0"></text>
</g>
<g>
<title>java/lang/String.regionMatches (1 samples, 0.24%)</title><rect x="1128.5" y="563.0" width="2.8" height="15" fill="#56e756" rx="2" ry="2"/>
<text x="1131.5" y="574.0"></text>
</g>
<g>
<title>java/lang/StringLatin1.regionMatchesCI (1 samples, 0.24%)</title><rect x="1128.5" y="547.0" width="2.8" height="15" fill="#67f867" rx="2" ry="2"/>
<text x="1131.5" y="558.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.24%)</title><rect x="1131.3" y="579.0" width="2.8" height="15" fill="#60f160" rx="2" ry="2"/>
<text x="1134.3" y="590.0"></text>
</g>
<g>
<title>one/nio/util/Utf8.read (1 samples, 0.24%)</title><rect x="1131.3" y="563.0" width="2.8" height="15" fill="#58e958" rx="2" ry="2"/>
<text x="1134.3" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.read (10 samples, 2.37%)</title><rect x="1134.1" y="595.0" width="27.9" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1137.1" y="606.0">o..</text>
</g>
<g>
<title>one/nio/net/NativeSocket.read (8 samples, 1.90%)</title><rect x="1134.1" y="579.0" width="22.3" height="15" fill="#6bfc6b" rx="2" ry="2"/>
<text x="1137.1" y="590.0">o..</text>
</g>
<g>
<title>Java_one_nio_net_NativeSocket_read (4 samples, 0.95%)</title><rect x="1134.1" y="563.0" width="11.2" height="15" fill="#fb7c7c" rx="2" ry="2"/>
<text x="1137.1" y="574.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (4 samples, 0.95%)</title><rect x="1134.1" y="547.0" width="11.2" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1137.1" y="558.0"></text>
</g>
<g>
<title>ThreadInVMfromNative::~ThreadInVMfromNative() (1 samples, 0.24%)</title><rect x="1136.9" y="531.0" width="2.8" height="15" fill="#d9d941" rx="2" ry="2"/>
<text x="1139.9" y="542.0"></text>
</g>
<g>
<title>ThreadStateTransition::transition_from_native(JavaThread*, JavaThreadState) [clone .constprop.222] (1 samples, 0.24%)</title><rect x="1139.7" y="531.0" width="2.8" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1142.7" y="542.0"></text>
</g>
<g>
<title>check_bounds(int, int, int, Thread*) (1 samples, 0.24%)</title><rect x="1142.5" y="531.0" width="2.8" height="15" fill="#e96464" rx="2" ry="2"/>
<text x="1145.5" y="542.0"></text>
</g>
<g>
<title>jni_SetByteArrayRegion (1 samples, 0.24%)</title><rect x="1145.3" y="563.0" width="2.8" height="15" fill="#fa7c7c" rx="2" ry="2"/>
<text x="1148.3" y="574.0"></text>
</g>
<g>
<title>recv (3 samples, 0.71%)</title><rect x="1148.1" y="563.0" width="8.3" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1151.1" y="574.0"></text>
</g>
<g>
<title>one/nio/net/Session.listen (2 samples, 0.47%)</title><rect x="1156.4" y="579.0" width="5.6" height="15" fill="#5dee5d" rx="2" ry="2"/>
<text x="1159.4" y="590.0"></text>
</g>
<g>
<title>os::javaTimeMillis() (1 samples, 0.24%)</title><rect x="1159.2" y="563.0" width="2.8" height="15" fill="#e1e144" rx="2" ry="2"/>
<text x="1162.2" y="574.0"></text>
</g>
<g>
<title>gettimeofday (1 samples, 0.24%)</title><rect x="1159.2" y="547.0" width="2.8" height="15" fill="#ef6d6d" rx="2" ry="2"/>
<text x="1162.2" y="558.0"></text>
</g>
<g>
<title>[vdso] (1 samples, 0.24%)</title><rect x="1159.2" y="531.0" width="2.8" height="15" fill="#e96565" rx="2" ry="2"/>
<text x="1162.2" y="542.0"></text>
</g>
<g>
<title>start_thread (10 samples, 2.37%)</title><rect x="1162.0" y="643.0" width="28.0" height="15" fill="#e66161" rx="2" ry="2"/>
<text x="1165.0" y="654.0">s..</text>
</g>
<g>
<title>thread_native_entry(Thread*) (10 samples, 2.37%)</title><rect x="1162.0" y="627.0" width="28.0" height="15" fill="#f57575" rx="2" ry="2"/>
<text x="1165.0" y="638.0">t..</text>
</g>
<g>
<title>Thread::call_run() (10 samples, 2.37%)</title><rect x="1162.0" y="611.0" width="28.0" height="15" fill="#dddd43" rx="2" ry="2"/>
<text x="1165.0" y="622.0">T..</text>
</g>
<g>
<title>GangWorker::loop() (10 samples, 2.37%)</title><rect x="1162.0" y="595.0" width="28.0" height="15" fill="#cccc3d" rx="2" ry="2"/>
<text x="1165.0" y="606.0">G..</text>
</g>
<g>
<title>G1ParTask::work(unsigned int) (10 samples, 2.37%)</title><rect x="1162.0" y="579.0" width="28.0" height="15" fill="#dada42" rx="2" ry="2"/>
<text x="1165.0" y="590.0">G..</text>
</g>
<g>
<title>G1ParEvacuateFollowersClosure::do_void() (10 samples, 2.37%)</title><rect x="1162.0" y="563.0" width="28.0" height="15" fill="#d6d640" rx="2" ry="2"/>
<text x="1165.0" y="574.0">G..</text>
</g>
<g>
<title>SpinPause (10 samples, 2.37%)</title><rect x="1162.0" y="547.0" width="28.0" height="15" fill="#fa7b7b" rx="2" ry="2"/>
<text x="1165.0" y="558.0">S..</text>
</g>
</g>
</svg>
